/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/drawfont.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/acorn/dist/acorn.js":
/*!******************************************!*\
  !*** ./node_modules/acorn/dist/acorn.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? factory(exports) :\n  undefined;\n}(this, function (exports) { 'use strict';\n\n  // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    7: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  }\n\n  // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\"\n\n  var keywords = {\n    5: ecma5AndLessKeywords,\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  }\n\n  // ## Character categories\n\n  // Big ugly regular expressions that match characters in the\n  // whitespace, identifier, and identifier-start categories. These\n  // are only applied when a character is found to actually have a\n  // code point above 128.\n  // Generated by `bin/generate-identifier-regex.js`.\n\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\"\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\"\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\")\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\")\n\n  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null\n\n  // These are a run-length and offset encoded representation of the\n  // >0xffff code points that are a valid part of identifiers. The\n  // offset starts at 0x10000, and each pair of numbers represents an\n  // offset to the next range, and then a size of the range. They were\n  // generated by bin/generate-identifier-regex.js\n  var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541]\n  var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239]\n\n  // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n  function isInAstralSet(code, set) {\n    var pos = 0x10000\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i]\n      if (pos > code) return false\n      pos += set[i + 1]\n      if (pos >= code) return true\n    }\n  }\n\n  // Test whether a given character code starts an identifier.\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) return code === 36\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n  // Test whether a given character is part of an identifier.\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) return code === 36\n    if (code < 58) return true\n    if (code < 65) return false\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label\n    this.keyword = conf.keyword\n    this.beforeExpr = !!conf.beforeExpr\n    this.startsExpr = !!conf.startsExpr\n    this.isLoop = !!conf.isLoop\n    this.isAssign = !!conf.isAssign\n    this.prefix = !!conf.prefix\n    this.postfix = !!conf.postfix\n    this.binop = conf.binop || null\n    this.updateContext = null\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true};\n  var startsExpr = {startsExpr: true};\n  // Map keyword names to token types.\n\n  var keywordTypes = {}\n\n  // Succinct definitions of keyword token types\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name\n    return keywordTypes[name] = new TokenType(name, options)\n  }\n\n  var tt = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"prefix\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=\", 6),\n    relational: binop(\"</>\", 7),\n    bitShift: binop(\"<</>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\"),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\"),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  }\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/\n  var lineBreakG = new RegExp(lineBreak.source, \"g\")\n\n  function isNewLine(code) {\n    return code === 10 || code === 13 || code === 0x2028 || code == 0x2029\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g\n\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\"\n  }\n\n  // Checks if an object has a property.\n\n  function has(obj, propName) {\n    return Object.prototype.hasOwnProperty.call(obj, propName)\n  }\n\n  // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n  var Position = function Position(line, col) {\n    this.line = line\n    this.column = col\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start\n    this.end = end\n    if (p.sourceFile !== null) this.source = p.sourceFile\n  };\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      lineBreakG.lastIndex = cur\n      var match = lineBreakG.exec(input)\n      if (match && match.index < offset) {\n        ++line\n        cur = match.index + match[0].length\n      } else {\n        return new Position(line, offset - cur)\n      }\n    }\n  }\n\n  // A second optional argument can be given to further configure\n  // the parser process. These options are recognized:\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must\n    // be either 3, or 5, or 6. This influences support for strict\n    // mode, the set of reserved words, support for getters and\n    // setters and other features. The default is 6.\n    ecmaVersion: 6,\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called\n    // when a semicolon is automatically inserted. It will be passed\n    // th position of the comma as an offset, and if `locations` is\n    // enabled, it is given the location as a `{line, column}` object\n    // as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // When enabled, hashbang directive in the beginning of file\n    // is allowed and treated as a line comment.\n    allowHashBang: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false,\n    plugins: {}\n  }\n\n  // Interpret and default an options object\n\n  function getOptions(opts) {\n    var options = {}\n    for (var opt in defaultOptions)\n      options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]\n    if (options.allowReserved == null)\n      options.allowReserved = options.ecmaVersion < 5\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken\n      options.onToken = function (token) { return tokens.push(token); }\n    }\n    if (isArray(options.onComment))\n      options.onComment = pushComment(options, options.onComment)\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function (block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? 'Block' : 'Line',\n        value: text,\n        start: start,\n        end: end\n      }\n      if (options.locations)\n        comment.loc = new SourceLocation(this, startLoc, endLoc)\n      if (options.ranges)\n        comment.range = [start, end]\n      array.push(comment)\n    }\n  }\n\n  // Registered plugins\n  var plugins = {}\n\n  function keywordRegexp(words) {\n    return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\")\n  }\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options)\n    this.sourceFile = options.sourceFile\n    this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5])\n    var reserved = options.allowReserved ? \"\" :\n        reservedWords[options.ecmaVersion] + (options.sourceType == \"module\" ? \" await\" : \"\")\n    this.reservedWords = keywordRegexp(reserved)\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict\n    this.reservedWordsStrict = keywordRegexp(reservedStrict)\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind)\n    this.input = String(input)\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false\n\n    // Load plugins\n    this.loadPlugins(options.plugins)\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos\n      this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos))\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length\n    } else {\n      this.pos = this.lineStart = 0\n      this.curLine = 1\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = tt.eof\n    // For tokens that include more information than their type, the value\n    this.value = null\n    // Its start and end offset\n    this.start = this.end = this.pos\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition()\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null\n    this.lastTokStart = this.lastTokEnd = this.pos\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext()\n    this.exprAllowed = true\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\"\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1\n\n    // Flags to track whether we are in a function, a generator.\n    this.inFunction = this.inGenerator = false\n    // Labels in scope.\n    this.labels = []\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')\n      this.skipLineComment(2)\n  };\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n  Parser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\n  Parser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\n  Parser.prototype.extend = function extend (name, f) {\n    this[name] = f(this[name])\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n      var this$1 = this;\n\n    for (var name in pluginConfigs) {\n      var plugin = plugins[name]\n      if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n      plugin(this$1, pluginConfigs[name])\n    }\n  };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode()\n    this.nextToken()\n    return this.parseTopLevel(node)\n  };\n\n  var pp = Parser.prototype\n\n  // ## Parser utilities\n\n  // Test whether a statement node is the string literal `\"use strict\"`.\n\n  pp.isUseStrict = function(stmt) {\n    return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"Literal\" &&\n      stmt.expression.raw.slice(1, -1) === \"use strict\"\n  }\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  pp.eat = function(type) {\n    if (this.type === type) {\n      this.next()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  pp.isContextual = function(name) {\n    return this.type === tt.name && this.value === name\n  }\n\n  // Consumes contextual keyword if possible.\n\n  pp.eatContextual = function(name) {\n    return this.value === name && this.eat(tt.name)\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  pp.expectContextual = function(name) {\n    if (!this.eatContextual(name)) this.unexpected()\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  pp.canInsertSemicolon = function() {\n    return this.type === tt.eof ||\n      this.type === tt.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  }\n\n  pp.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)\n      return true\n    }\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  pp.semicolon = function() {\n    if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected()\n  }\n\n  pp.afterTrailingComma = function(tokType) {\n    if (this.type == tokType) {\n      if (this.options.onTrailingComma)\n        this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)\n      this.next()\n      return true\n    }\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  pp.expect = function(type) {\n    this.eat(type) || this.unexpected()\n  }\n\n  // Raise an unexpected token error.\n\n  pp.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\")\n  }\n\n  var DestructuringErrors = function DestructuringErrors() {\n    this.shorthandAssign = 0\n    this.trailingComma = 0\n  };\n\n  pp.checkPatternErrors = function(refDestructuringErrors, andThrow) {\n    var trailing = refDestructuringErrors && refDestructuringErrors.trailingComma\n    if (!andThrow) return !!trailing\n    if (trailing) this.raise(trailing, \"Comma is not permitted after the rest element\")\n  }\n\n  pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign\n    if (!andThrow) return !!pos\n    if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\")\n  }\n\n  var pp$1 = Parser.prototype\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$1.parseTopLevel = function(node) {\n    var this$1 = this;\n\n    var first = true\n    if (!node.body) node.body = []\n    while (this.type !== tt.eof) {\n      var stmt = this$1.parseStatement(true, true)\n      node.body.push(stmt)\n      if (first) {\n        if (this$1.isUseStrict(stmt)) this$1.setStrict(true)\n        first = false\n      }\n    }\n    this.next()\n    if (this.options.ecmaVersion >= 6) {\n      node.sourceType = this.options.sourceType\n    }\n    return this.finishNode(node, \"Program\")\n  }\n\n  var loopLabel = {kind: \"loop\"};\n  var switchLabel = {kind: \"switch\"};\n  pp$1.isLet = function() {\n    if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false\n    skipWhiteSpace.lastIndex = this.pos\n    var skip = skipWhiteSpace.exec(this.input)\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next)\n    if (nextCh === 91 || nextCh == 123) return true // '{' and '['\n    if (isIdentifierStart(nextCh, true)) {\n      for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}\n      var ident = this.input.slice(next, pos)\n      if (!this.isKeyword(ident)) return true\n    }\n    return false\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  pp$1.parseStatement = function(declaration, topLevel) {\n    var starttype = this.type, node = this.startNode(), kind\n\n    if (this.isLet()) {\n      starttype = tt._var\n      kind = \"let\"\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n    case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case tt._debugger: return this.parseDebuggerStatement(node)\n    case tt._do: return this.parseDoStatement(node)\n    case tt._for: return this.parseForStatement(node)\n    case tt._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()\n      return this.parseFunctionStatement(node)\n    case tt._class:\n      if (!declaration) this.unexpected()\n      return this.parseClass(node, true)\n    case tt._if: return this.parseIfStatement(node)\n    case tt._return: return this.parseReturnStatement(node)\n    case tt._switch: return this.parseSwitchStatement(node)\n    case tt._throw: return this.parseThrowStatement(node)\n    case tt._try: return this.parseTryStatement(node)\n    case tt._const: case tt._var:\n      kind = kind || this.value\n      if (!declaration && kind != \"var\") this.unexpected()\n      return this.parseVarStatement(node, kind)\n    case tt._while: return this.parseWhileStatement(node)\n    case tt._with: return this.parseWithStatement(node)\n    case tt.braceL: return this.parseBlock()\n    case tt.semi: return this.parseEmptyStatement(node)\n    case tt._export:\n    case tt._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          this.raise(this.start, \"'import' and 'export' may only appear at the top level\")\n        if (!this.inModule)\n          this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\")\n      }\n      return starttype === tt._import ? this.parseImport(node) : this.parseExport(node)\n\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value, expr = this.parseExpression()\n      if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon))\n        return this.parseLabeledStatement(node, maybeName, expr)\n      else return this.parseExpressionStatement(node, expr)\n    }\n  }\n\n  pp$1.parseBreakContinueStatement = function(node, keyword) {\n    var this$1 = this;\n\n    var isBreak = keyword == \"break\"\n    this.next()\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null\n    else if (this.type !== tt.name) this.unexpected()\n    else {\n      node.label = this.parseIdent()\n      this.semicolon()\n    }\n\n    // Verify that there is an actual destination to break or\n    // continue to.\n    for (var i = 0; i < this.labels.length; ++i) {\n      var lab = this$1.labels[i]\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break\n        if (node.label && isBreak) break\n      }\n    }\n    if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword)\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  }\n\n  pp$1.parseDebuggerStatement = function(node) {\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n  }\n\n  pp$1.parseDoStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    this.expect(tt._while)\n    node.test = this.parseParenExpression()\n    if (this.options.ecmaVersion >= 6)\n      this.eat(tt.semi)\n    else\n      this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  pp$1.parseForStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    this.expect(tt.parenL)\n    if (this.type === tt.semi) return this.parseFor(node, null)\n    var isLet = this.isLet()\n    if (this.type === tt._var || this.type === tt._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value\n      this.next()\n      this.parseVar(init$1, true, kind)\n      this.finishNode(init$1, \"VariableDeclaration\")\n      if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n          !(kind !== \"var\" && init$1.declarations[0].init))\n        return this.parseForIn(node, init$1)\n      return this.parseFor(node, init$1)\n    }\n    var refDestructuringErrors = new DestructuringErrors\n    var init = this.parseExpression(true, refDestructuringErrors)\n    if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      this.toAssignable(init)\n      this.checkLVal(init)\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return this.parseFor(node, init)\n  }\n\n  pp$1.parseFunctionStatement = function(node) {\n    this.next()\n    return this.parseFunction(node, true)\n  }\n\n  pp$1.parseIfStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    node.consequent = this.parseStatement(false)\n    node.alternate = this.eat(tt._else) ? this.parseStatement(false) : null\n    return this.finishNode(node, \"IfStatement\")\n  }\n\n  pp$1.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      this.raise(this.start, \"'return' outside of function\")\n    this.next()\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n  }\n\n  pp$1.parseSwitchStatement = function(node) {\n    var this$1 = this;\n\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.expect(tt.braceL)\n    this.labels.push(switchLabel)\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    for (var cur, sawDefault = false; this.type != tt.braceR;) {\n      if (this$1.type === tt._case || this$1.type === tt._default) {\n        var isCase = this$1.type === tt._case\n        if (cur) this$1.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this$1.startNode())\n        cur.consequent = []\n        this$1.next()\n        if (isCase) {\n          cur.test = this$1.parseExpression()\n        } else {\n          if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\")\n          sawDefault = true\n          cur.test = null\n        }\n        this$1.expect(tt.colon)\n      } else {\n        if (!cur) this$1.unexpected()\n        cur.consequent.push(this$1.parseStatement(true))\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.next() // Closing brace\n    this.labels.pop()\n    return this.finishNode(node, \"SwitchStatement\")\n  }\n\n  pp$1.parseThrowStatement = function(node) {\n    this.next()\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      this.raise(this.lastTokEnd, \"Illegal newline after throw\")\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n  }\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty = []\n\n  pp$1.parseTryStatement = function(node) {\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.type === tt._catch) {\n      var clause = this.startNode()\n      this.next()\n      this.expect(tt.parenL)\n      clause.param = this.parseBindingAtom()\n      this.checkLVal(clause.param, true)\n      this.expect(tt.parenR)\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer)\n      this.raise(node.start, \"Missing catch or finally clause\")\n    return this.finishNode(node, \"TryStatement\")\n  }\n\n  pp$1.parseVarStatement = function(node, kind) {\n    this.next()\n    this.parseVar(node, false, kind)\n    this.semicolon()\n    return this.finishNode(node, \"VariableDeclaration\")\n  }\n\n  pp$1.parseWhileStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"WhileStatement\")\n  }\n\n  pp$1.parseWithStatement = function(node) {\n    if (this.strict) this.raise(this.start, \"'with' in strict mode\")\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement(false)\n    return this.finishNode(node, \"WithStatement\")\n  }\n\n  pp$1.parseEmptyStatement = function(node) {\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n  }\n\n  pp$1.parseLabeledStatement = function(node, maybeName, expr) {\n    var this$1 = this;\n\n    for (var i = 0; i < this.labels.length; ++i)\n      if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\")\n    var kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null\n    for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {\n      var label = this$1.labels[i$1]\n      if (label.statementStart == node.start) {\n        label.statementStart = this$1.start\n        label.kind = kind\n      } else break\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start})\n    node.body = this.parseStatement(true)\n    this.labels.pop()\n    node.label = expr\n    return this.finishNode(node, \"LabeledStatement\")\n  }\n\n  pp$1.parseExpressionStatement = function(node, expr) {\n    node.expression = expr\n    this.semicolon()\n    return this.finishNode(node, \"ExpressionStatement\")\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  pp$1.parseBlock = function(allowStrict) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, oldStrict\n    node.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      var stmt = this$1.parseStatement(true)\n      node.body.push(stmt)\n      if (first && allowStrict && this$1.isUseStrict(stmt)) {\n        oldStrict = this$1.strict\n        this$1.setStrict(this$1.strict = true)\n      }\n      first = false\n    }\n    if (oldStrict === false) this.setStrict(false)\n    return this.finishNode(node, \"BlockStatement\")\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  pp$1.parseFor = function(node, init) {\n    node.init = init\n    this.expect(tt.semi)\n    node.test = this.type === tt.semi ? null : this.parseExpression()\n    this.expect(tt.semi)\n    node.update = this.type === tt.parenR ? null : this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"ForStatement\")\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  pp$1.parseForIn = function(node, init) {\n    var type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n    this.next()\n    node.left = init\n    node.right = this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, type)\n  }\n\n  // Parse a list of variable declarations.\n\n  pp$1.parseVar = function(node, isFor, kind) {\n    var this$1 = this;\n\n    node.declarations = []\n    node.kind = kind\n    for (;;) {\n      var decl = this$1.startNode()\n      this$1.parseVarId(decl)\n      if (this$1.eat(tt.eq)) {\n        decl.init = this$1.parseMaybeAssign(isFor)\n      } else if (kind === \"const\" && !(this$1.type === tt._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n        this$1.unexpected()\n      } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === tt._in || this$1.isContextual(\"of\")))) {\n        this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\")\n      } else {\n        decl.init = null\n      }\n      node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"))\n      if (!this$1.eat(tt.comma)) break\n    }\n    return node\n  }\n\n  pp$1.parseVarId = function(decl) {\n    decl.id = this.parseBindingAtom()\n    this.checkLVal(decl.id, true)\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseFunction = function(node, isStatement, allowExpressionBody) {\n    this.initFunction(node)\n    if (this.options.ecmaVersion >= 6)\n      node.generator = this.eat(tt.star)\n    var oldInGen = this.inGenerator\n    this.inGenerator = node.generator\n    if (isStatement || this.type === tt.name)\n      node.id = this.parseIdent()\n    this.parseFunctionParams(node)\n    this.parseFunctionBody(node, allowExpressionBody)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  }\n\n  pp$1.parseFunctionParams = function(node) {\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, false, true)\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseClass = function(node, isStatement) {\n    var this$1 = this;\n\n    this.next()\n    this.parseClassId(node, isStatement)\n    this.parseClassSuper(node)\n    var classBody = this.startNode()\n    var hadConstructor = false\n    classBody.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (this$1.eat(tt.semi)) continue\n      var method = this$1.startNode()\n      var isGenerator = this$1.eat(tt.star)\n      var isMaybeStatic = this$1.type === tt.name && this$1.value === \"static\"\n      this$1.parsePropertyName(method)\n      method.static = isMaybeStatic && this$1.type !== tt.parenL\n      if (method.static) {\n        if (isGenerator) this$1.unexpected()\n        isGenerator = this$1.eat(tt.star)\n        this$1.parsePropertyName(method)\n      }\n      method.kind = \"method\"\n      var isGetSet = false\n      if (!method.computed) {\n        var key = method.key;\n        if (!isGenerator && key.type === \"Identifier\" && this$1.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n          isGetSet = true\n          method.kind = key.name\n          key = this$1.parsePropertyName(method)\n        }\n        if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n            key.type === \"Literal\" && key.value === \"constructor\")) {\n          if (hadConstructor) this$1.raise(key.start, \"Duplicate constructor in the same class\")\n          if (isGetSet) this$1.raise(key.start, \"Constructor can't have get/set modifier\")\n          if (isGenerator) this$1.raise(key.start, \"Constructor can't be a generator\")\n          method.kind = \"constructor\"\n          hadConstructor = true\n        }\n      }\n      this$1.parseClassMethod(classBody, method, isGenerator)\n      if (isGetSet) {\n        var paramCount = method.kind === \"get\" ? 0 : 1\n        if (method.value.params.length !== paramCount) {\n          var start = method.value.start\n          if (method.kind === \"get\")\n            this$1.raiseRecoverable(start, \"getter should have no params\")\n          else\n            this$1.raiseRecoverable(start, \"setter should have exactly one param\")\n        }\n        if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n          this$1.raise(method.value.params[0].start, \"Setter cannot use rest params\")\n      }\n    }\n    node.body = this.finishNode(classBody, \"ClassBody\")\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  }\n\n  pp$1.parseClassMethod = function(classBody, method, isGenerator) {\n    method.value = this.parseMethod(isGenerator)\n    classBody.body.push(this.finishNode(method, \"MethodDefinition\"))\n  }\n\n  pp$1.parseClassId = function(node, isStatement) {\n    node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null\n  }\n\n  pp$1.parseClassSuper = function(node) {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null\n  }\n\n  // Parses module export declaration.\n\n  pp$1.parseExport = function(node) {\n    var this$1 = this;\n\n    this.next()\n    // export * from '...'\n    if (this.eat(tt.star)) {\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      this.semicolon()\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(tt._default)) { // export default ...\n      var parens = this.type == tt.parenL\n      var expr = this.parseMaybeAssign()\n      var needsSemi = true\n      if (!parens && (expr.type == \"FunctionExpression\" ||\n                      expr.type == \"ClassExpression\")) {\n        needsSemi = false\n        if (expr.id) {\n          expr.type = expr.type == \"FunctionExpression\"\n            ? \"FunctionDeclaration\"\n            : \"ClassDeclaration\"\n        }\n      }\n      node.declaration = expr\n      if (needsSemi) this.semicolon()\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseStatement(true)\n      node.specifiers = []\n      node.source = null\n    } else { // export { x, y as z } [from '...']\n      node.declaration = null\n      node.specifiers = this.parseExportSpecifiers()\n      if (this.eatContextual(\"from\")) {\n        node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      } else {\n        // check for keywords used as local names\n        for (var i = 0; i < node.specifiers.length; i++) {\n          if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {\n            this$1.unexpected(node.specifiers[i].local.start)\n          }\n        }\n\n        node.source = null\n      }\n      this.semicolon()\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  }\n\n  pp$1.shouldParseExportStatement = function() {\n    return this.type.keyword || this.isLet()\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  pp$1.parseExportSpecifiers = function() {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node = this$1.startNode()\n      node.local = this$1.parseIdent(this$1.type === tt._default)\n      node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local\n      nodes.push(this$1.finishNode(node, \"ExportSpecifier\"))\n    }\n    return nodes\n  }\n\n  // Parses import declaration.\n\n  pp$1.parseImport = function(node) {\n    this.next()\n    // import '...'\n    if (this.type === tt.string) {\n      node.specifiers = empty\n      node.source = this.parseExprAtom()\n    } else {\n      node.specifiers = this.parseImportSpecifiers()\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    }\n    this.semicolon()\n    return this.finishNode(node, \"ImportDeclaration\")\n  }\n\n  // Parses a comma-separated list of module imports.\n\n  pp$1.parseImportSpecifiers = function() {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    if (this.type === tt.name) {\n      // import defaultObj, { x, y as z } from '...'\n      var node = this.startNode()\n      node.local = this.parseIdent()\n      this.checkLVal(node.local, true)\n      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"))\n      if (!this.eat(tt.comma)) return nodes\n    }\n    if (this.type === tt.star) {\n      var node$1 = this.startNode()\n      this.next()\n      this.expectContextual(\"as\")\n      node$1.local = this.parseIdent()\n      this.checkLVal(node$1.local, true)\n      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"))\n      return nodes\n    }\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node$2 = this$1.startNode()\n      node$2.imported = this$1.parseIdent(true)\n      if (this$1.eatContextual(\"as\")) {\n        node$2.local = this$1.parseIdent()\n      } else {\n        node$2.local = node$2.imported\n        if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start)\n        if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raise(node$2.local.start, \"The keyword '\" + node$2.local.name + \"' is reserved\")\n      }\n      this$1.checkLVal(node$2.local, true)\n      nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"))\n    }\n    return nodes\n  }\n\n  var pp$2 = Parser.prototype\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$2.toAssignable = function(node, isBinding) {\n    var this$1 = this;\n\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\"\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i]\n          if (prop.kind !== \"init\") this$1.raise(prop.key.start, \"Object pattern can't contain getter or setter\")\n          this$1.toAssignable(prop.value, isBinding)\n        }\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\"\n        this.toAssignableList(node.elements, isBinding)\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\"\n          delete node.operator\n          // falls through to AssignmentPattern\n        } else {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\")\n          break\n        }\n\n      case \"AssignmentPattern\":\n        if (node.right.type === \"YieldExpression\")\n          this.raise(node.right.start, \"Yield expression cannot be a default value\")\n        break\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding)\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) break\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\")\n      }\n    }\n    return node\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  pp$2.toAssignableList = function(exprList, isBinding) {\n    var this$1 = this;\n\n    var end = exprList.length\n    if (end) {\n      var last = exprList[end - 1]\n      if (last && last.type == \"RestElement\") {\n        --end\n      } else if (last && last.type == \"SpreadElement\") {\n        last.type = \"RestElement\"\n        var arg = last.argument\n        this.toAssignable(arg, isBinding)\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\")\n          this.unexpected(arg.start)\n        --end\n      }\n\n      if (isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        this.unexpected(last.argument.start)\n    }\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i]\n      if (elt) this$1.toAssignable(elt, isBinding)\n    }\n    return exprList\n  }\n\n  // Parses spread element.\n\n  pp$2.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors)\n    return this.finishNode(node, \"SpreadElement\")\n  }\n\n  pp$2.parseRest = function(allowNonIdent) {\n    var node = this.startNode()\n    this.next()\n\n    // RestElement inside of a function parameter must be an identifier\n    if (allowNonIdent) node.argument = this.type === tt.name ? this.parseIdent() : this.unexpected()\n    else node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected()\n\n    return this.finishNode(node, \"RestElement\")\n  }\n\n  // Parses lvalue (assignable) atom.\n\n  pp$2.parseBindingAtom = function() {\n    if (this.options.ecmaVersion < 6) return this.parseIdent()\n    switch (this.type) {\n    case tt.name:\n      return this.parseIdent()\n\n    case tt.bracketL:\n      var node = this.startNode()\n      this.next()\n      node.elements = this.parseBindingList(tt.bracketR, true, true)\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case tt.braceL:\n      return this.parseObj(true)\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowNonIdent) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (first) first = false\n      else this$1.expect(tt.comma)\n      if (allowEmpty && this$1.type === tt.comma) {\n        elts.push(null)\n      } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n        break\n      } else if (this$1.type === tt.ellipsis) {\n        var rest = this$1.parseRest(allowNonIdent)\n        this$1.parseBindingListItem(rest)\n        elts.push(rest)\n        if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\")\n        this$1.expect(close)\n        break\n      } else {\n        var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc)\n        this$1.parseBindingListItem(elem)\n        elts.push(elem)\n      }\n    }\n    return elts\n  }\n\n  pp$2.parseBindingListItem = function(param) {\n    return param\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom()\n    if (this.options.ecmaVersion < 6 || !this.eat(tt.eq)) return left\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.right = this.parseMaybeAssign()\n    return this.finishNode(node, \"AssignmentPattern\")\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  pp$2.checkLVal = function(expr, isBinding, checkClashes) {\n    var this$1 = this;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\")\n      if (checkClashes) {\n        if (has(checkClashes, expr.name))\n          this.raiseRecoverable(expr.start, \"Argument name clash\")\n        checkClashes[expr.name] = true\n      }\n      break\n\n    case \"MemberExpression\":\n      if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\")\n      break\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++)\n        this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes)\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {\n        var elem = expr.elements[i$1]\n        if (elem) this$1.checkLVal(elem, isBinding, checkClashes)\n      }\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes)\n      break\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes)\n      break\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes)\n      break\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\")\n    }\n  }\n\n  var pp$3 = Parser.prototype\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$3.checkPropClash = function(prop, propHash) {\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      return\n    var key = prop.key;\n    var name\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\")\n        propHash.proto = true\n      }\n      return\n    }\n    name = \"$\" + name\n    var other = propHash[name]\n    if (other) {\n      var isGetSet = kind !== \"init\"\n      if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))\n        this.raiseRecoverable(key.start, \"Redefinition of property\")\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      }\n    }\n    other[kind] = true\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors)\n    if (this.type === tt.comma) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.expressions = [expr]\n      while (this.eat(tt.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors))\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n    if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield()\n\n    var ownDestructuringErrors = false\n    if (!refDestructuringErrors) {\n      refDestructuringErrors = new DestructuringErrors\n      ownDestructuringErrors = true\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    if (this.type == tt.parenL || this.type == tt.name)\n      this.potentialArrowAt = this.start\n    var left = this.parseMaybeConditional(noIn, refDestructuringErrors)\n    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc)\n    if (this.type.isAssign) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors)\n      var node = this.startNodeAt(startPos, startLoc)\n      node.operator = this.value\n      node.left = this.type === tt.eq ? this.toAssignable(left) : left\n      refDestructuringErrors.shorthandAssign = 0 // reset because shorthand default was used correctly\n      this.checkLVal(left)\n      this.next()\n      node.right = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return left\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprOps(noIn, refDestructuringErrors)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    if (this.eat(tt.question)) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.test = expr\n      node.consequent = this.parseMaybeAssign()\n      this.expect(tt.colon)\n      node.alternate = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  }\n\n  // Start the precedence parser.\n\n  pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.type.binop\n    if (prec != null && (!noIn || this.type !== tt._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === tt.logicalOR || this.type === tt.logicalAND\n        var op = this.value\n        this.next()\n        var startPos = this.start, startLoc = this.startLoc\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn)\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical)\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n      }\n    }\n    return left\n  }\n\n  pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.operator = op\n    node.right = right\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, expr\n    if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === tt.incDec\n      node.operator = this.value\n      node.prefix = true\n      this.next()\n      node.argument = this.parseMaybeUnary(null, true)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n      if (update) this.checkLVal(node.argument)\n      else if (this.strict && node.operator === \"delete\" &&\n               node.argument.type === \"Identifier\")\n        this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\")\n      else sawUnary = true\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors)\n      if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.operator = this$1.value\n        node$1.prefix = false\n        node$1.argument = expr\n        this$1.checkLVal(expr)\n        this$1.next()\n        expr = this$1.finishNode(node$1, \"UpdateExpression\")\n      }\n    }\n\n    if (!sawUnary && this.eat(tt.starstar))\n      return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false)\n    else\n      return expr\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprAtom(refDestructuringErrors)\n    var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\"\n    if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr\n    return this.parseSubscripts(expr, startPos, startLoc)\n  }\n\n  pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n    var this$1 = this;\n\n    for (;;) {\n      if (this$1.eat(tt.dot)) {\n        var node = this$1.startNodeAt(startPos, startLoc)\n        node.object = base\n        node.property = this$1.parseIdent(true)\n        node.computed = false\n        base = this$1.finishNode(node, \"MemberExpression\")\n      } else if (this$1.eat(tt.bracketL)) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.object = base\n        node$1.property = this$1.parseExpression()\n        node$1.computed = true\n        this$1.expect(tt.bracketR)\n        base = this$1.finishNode(node$1, \"MemberExpression\")\n      } else if (!noCalls && this$1.eat(tt.parenL)) {\n        var node$2 = this$1.startNodeAt(startPos, startLoc)\n        node$2.callee = base\n        node$2.arguments = this$1.parseExprList(tt.parenR, false)\n        base = this$1.finishNode(node$2, \"CallExpression\")\n      } else if (this$1.type === tt.backQuote) {\n        var node$3 = this$1.startNodeAt(startPos, startLoc)\n        node$3.tag = base\n        node$3.quasi = this$1.parseTemplate()\n        base = this$1.finishNode(node$3, \"TaggedTemplateExpression\")\n      } else {\n        return base\n      }\n    }\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  pp$3.parseExprAtom = function(refDestructuringErrors) {\n    var node, canBeArrow = this.potentialArrowAt == this.start\n    switch (this.type) {\n    case tt._super:\n      if (!this.inFunction)\n        this.raise(this.start, \"'super' outside of function or class\")\n\n    case tt._this:\n      var type = this.type === tt._this ? \"ThisExpression\" : \"Super\"\n      node = this.startNode()\n      this.next()\n      return this.finishNode(node, type)\n\n    case tt.name:\n      var startPos = this.start, startLoc = this.startLoc\n      var id = this.parseIdent(this.type !== tt.name)\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow))\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id])\n      return id\n\n    case tt.regexp:\n      var value = this.value\n      node = this.parseLiteral(value.value)\n      node.regex = {pattern: value.pattern, flags: value.flags}\n      return node\n\n    case tt.num: case tt.string:\n      return this.parseLiteral(this.value)\n\n    case tt._null: case tt._true: case tt._false:\n      node = this.startNode()\n      node.value = this.type === tt._null ? null : this.type === tt._true\n      node.raw = this.type.keyword\n      this.next()\n      return this.finishNode(node, \"Literal\")\n\n    case tt.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow)\n\n    case tt.bracketL:\n      node = this.startNode()\n      this.next()\n      node.elements = this.parseExprList(tt.bracketR, true, true, refDestructuringErrors)\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case tt.braceL:\n      return this.parseObj(false, refDestructuringErrors)\n\n    case tt._function:\n      node = this.startNode()\n      this.next()\n      return this.parseFunction(node, false)\n\n    case tt._class:\n      return this.parseClass(this.startNode(), false)\n\n    case tt._new:\n      return this.parseNew()\n\n    case tt.backQuote:\n      return this.parseTemplate()\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$3.parseLiteral = function(value) {\n    var node = this.startNode()\n    node.value = value\n    node.raw = this.input.slice(this.start, this.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n  }\n\n  pp$3.parseParenExpression = function() {\n    this.expect(tt.parenL)\n    var val = this.parseExpression()\n    this.expect(tt.parenR)\n    return val\n  }\n\n  pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, val\n    if (this.options.ecmaVersion >= 6) {\n      this.next()\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc\n      var exprList = [], first = true\n      var refDestructuringErrors = new DestructuringErrors, spreadStart, innerParenStart\n      while (this.type !== tt.parenR) {\n        first ? first = false : this$1.expect(tt.comma)\n        if (this$1.type === tt.ellipsis) {\n          spreadStart = this$1.start\n          exprList.push(this$1.parseParenItem(this$1.parseRest()))\n          break\n        } else {\n          if (this$1.type === tt.parenL && !innerParenStart) {\n            innerParenStart = this$1.start\n          }\n          exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem))\n        }\n      }\n      var innerEndPos = this.start, innerEndLoc = this.startLoc\n      this.expect(tt.parenR)\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, true)\n        if (innerParenStart) this.unexpected(innerParenStart)\n        return this.parseParenArrowList(startPos, startLoc, exprList)\n      }\n\n      if (!exprList.length) this.unexpected(this.lastTokStart)\n      if (spreadStart) this.unexpected(spreadStart)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc)\n        val.expressions = exprList\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc)\n      } else {\n        val = exprList[0]\n      }\n    } else {\n      val = this.parseParenExpression()\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc)\n      par.expression = val\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  }\n\n  pp$3.parseParenItem = function(item) {\n    return item\n  }\n\n  pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  var empty$1 = []\n\n  pp$3.parseNew = function() {\n    var node = this.startNode()\n    var meta = this.parseIdent(true)\n    if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n      node.meta = meta\n      node.property = this.parseIdent(true)\n      if (node.property.name !== \"target\")\n        this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\")\n      if (!this.inFunction)\n        this.raiseRecoverable(node.start, \"new.target can only be used in functions\")\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true)\n    if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, false)\n    else node.arguments = empty$1\n    return this.finishNode(node, \"NewExpression\")\n  }\n\n  // Parse template expression.\n\n  pp$3.parseTemplateElement = function() {\n    var elem = this.startNode()\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n      cooked: this.value\n    }\n    this.next()\n    elem.tail = this.type === tt.backQuote\n    return this.finishNode(elem, \"TemplateElement\")\n  }\n\n  pp$3.parseTemplate = function() {\n    var this$1 = this;\n\n    var node = this.startNode()\n    this.next()\n    node.expressions = []\n    var curElt = this.parseTemplateElement()\n    node.quasis = [curElt]\n    while (!curElt.tail) {\n      this$1.expect(tt.dollarBraceL)\n      node.expressions.push(this$1.parseExpression())\n      this$1.expect(tt.braceR)\n      node.quasis.push(curElt = this$1.parseTemplateElement())\n    }\n    this.next()\n    return this.finishNode(node, \"TemplateLiteral\")\n  }\n\n  // Parse an object literal or binding pattern.\n\n  pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, propHash = {}\n    node.properties = []\n    this.next()\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var prop = this$1.startNode(), isGenerator, startPos, startLoc\n      if (this$1.options.ecmaVersion >= 6) {\n        prop.method = false\n        prop.shorthand = false\n        if (isPattern || refDestructuringErrors) {\n          startPos = this$1.start\n          startLoc = this$1.startLoc\n        }\n        if (!isPattern)\n          isGenerator = this$1.eat(tt.star)\n      }\n      this$1.parsePropertyName(prop)\n      this$1.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors)\n      this$1.checkPropClash(prop, propHash)\n      node.properties.push(this$1.finishNode(prop, \"Property\"))\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  }\n\n  pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors)\n      prop.kind = \"init\"\n    } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {\n      if (isPattern) this.unexpected()\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this.parseMethod(isGenerator)\n    } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type != tt.comma && this.type != tt.braceR)) {\n      if (isGenerator || isPattern) this.unexpected()\n      prop.kind = prop.key.name\n      this.parsePropertyName(prop)\n      prop.value = this.parseMethod(false)\n      var paramCount = prop.kind === \"get\" ? 0 : 1\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start\n        if (prop.kind === \"get\")\n          this.raiseRecoverable(start, \"getter should have no params\")\n        else\n          this.raiseRecoverable(start, \"setter should have exactly one param\")\n      }\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\")\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (this.keywords.test(prop.key.name) ||\n          (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name) ||\n          (this.inGenerator && prop.key.name == \"yield\"))\n        this.raiseRecoverable(prop.key.start, \"'\" + prop.key.name + \"' can not be used as shorthand property\")\n      prop.kind = \"init\"\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else if (this.type === tt.eq && refDestructuringErrors) {\n        if (!refDestructuringErrors.shorthandAssign)\n          refDestructuringErrors.shorthandAssign = this.start\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else {\n        prop.value = prop.key\n      }\n      prop.shorthand = true\n    } else this.unexpected()\n  }\n\n  pp$3.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(tt.bracketL)) {\n        prop.computed = true\n        prop.key = this.parseMaybeAssign()\n        this.expect(tt.bracketR)\n        return prop.key\n      } else {\n        prop.computed = false\n      }\n    }\n    return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true)\n  }\n\n  // Initialize empty function node.\n\n  pp$3.initFunction = function(node) {\n    node.id = null\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = false\n      node.expression = false\n    }\n  }\n\n  // Parse object or class method.\n\n  pp$3.parseMethod = function(isGenerator) {\n    var node = this.startNode(), oldInGen = this.inGenerator\n    this.inGenerator = isGenerator\n    this.initFunction(node)\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, false)\n    if (this.options.ecmaVersion >= 6)\n      node.generator = isGenerator\n    this.parseFunctionBody(node, false)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, \"FunctionExpression\")\n  }\n\n  // Parse arrow function expression with given parameters.\n\n  pp$3.parseArrowExpression = function(node, params) {\n    var oldInGen = this.inGenerator\n    this.inGenerator = false\n    this.initFunction(node)\n    node.params = this.toAssignableList(params, true)\n    this.parseFunctionBody(node, true)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  }\n\n  // Parse function body and check parameters.\n\n  pp$3.parseFunctionBody = function(node, isArrowFunction) {\n    var isExpression = isArrowFunction && this.type !== tt.braceL\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign()\n      node.expression = true\n    } else {\n      // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n      var oldInFunc = this.inFunction, oldLabels = this.labels\n      this.inFunction = true; this.labels = []\n      node.body = this.parseBlock(true)\n      node.expression = false\n      this.inFunction = oldInFunc; this.labels = oldLabels\n    }\n\n    // If this is a strict mode function, verify that argument names\n    // are not repeated, and it does not try to bind the words `eval`\n    // or `arguments`.\n    var useStrict = (!isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) ? node.body.body[0] : null;\n    if (this.strict || useStrict) {\n      var oldStrict = this.strict\n      this.strict = true\n      if (node.id)\n        this.checkLVal(node.id, true)\n      this.checkParams(node, useStrict)\n      this.strict = oldStrict\n    } else if (isArrowFunction) {\n      this.checkParams(node, useStrict)\n    }\n  }\n\n  // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n  pp$3.checkParams = function(node, useStrict) {\n      var this$1 = this;\n\n      var nameHash = {}\n      for (var i = 0; i < node.params.length; i++) {\n        if (useStrict && this$1.options.ecmaVersion >= 7 && node.params[i].type !== \"Identifier\")\n          this$1.raiseRecoverable(useStrict.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n        this$1.checkLVal(node.params[i], true, nameHash)\n      }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (allowTrailingComma && this$1.afterTrailingComma(close)) break\n      } else first = false\n\n      var elt\n      if (allowEmpty && this$1.type === tt.comma)\n        elt = null\n      else if (this$1.type === tt.ellipsis) {\n        elt = this$1.parseSpread(refDestructuringErrors)\n        if (this$1.type === tt.comma && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n          refDestructuringErrors.trailingComma = this$1.lastTokStart\n        }\n      } else\n        elt = this$1.parseMaybeAssign(false, refDestructuringErrors)\n      elts.push(elt)\n    }\n    return elts\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  pp$3.parseIdent = function(liberal) {\n    var node = this.startNode()\n    if (liberal && this.options.allowReserved == \"never\") liberal = false\n    if (this.type === tt.name) {\n      if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) &&\n          (this.options.ecmaVersion >= 6 ||\n           this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1))\n        this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\")\n      if (!liberal && this.inGenerator && this.value === \"yield\")\n        this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\")\n      node.name = this.value\n    } else if (liberal && this.type.keyword) {\n      node.name = this.type.keyword\n    } else {\n      this.unexpected()\n    }\n    this.next()\n    return this.finishNode(node, \"Identifier\")\n  }\n\n  // Parses yield expression inside generator.\n\n  pp$3.parseYield = function() {\n    var node = this.startNode()\n    this.next()\n    if (this.type == tt.semi || this.canInsertSemicolon() || (this.type != tt.star && !this.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tt.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  }\n\n  var pp$4 = Parser.prototype\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos)\n    message += \" (\" + loc.line + \":\" + loc.column + \")\"\n    var err = new SyntaxError(message)\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos\n    throw err\n  }\n\n  pp$4.raiseRecoverable = pp$4.raise\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  }\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\"\n    this.start = pos\n    this.end = 0\n    if (parser.options.locations)\n      this.loc = new SourceLocation(parser, loc)\n    if (parser.options.directSourceFile)\n      this.sourceFile = parser.options.directSourceFile\n    if (parser.options.ranges)\n      this.range = [pos, 0]\n  };\n\n  // Start an AST node, attaching a start offset.\n\n  var pp$5 = Parser.prototype\n\n  pp$5.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  }\n\n  pp$5.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type\n    node.end = pos\n    if (this.options.locations)\n      node.loc.end = loc\n    if (this.options.ranges)\n      node.range[1] = pos\n    return node\n  }\n\n  pp$5.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  }\n\n  // Finish node at given position\n\n  pp$5.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  }\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n    this.token = token\n    this.isExpr = !!isExpr\n    this.preserveSpace = !!preserveSpace\n    this.override = override\n  };\n\n  var types = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", true),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.readTmplToken(); }),\n    f_expr: new TokContext(\"function\", true)\n  }\n\n  var pp$6 = Parser.prototype\n\n  pp$6.initialContext = function() {\n    return [types.b_stat]\n  }\n\n  pp$6.braceIsBlock = function(prevType) {\n    if (prevType === tt.colon) {\n      var parent = this.curContext()\n      if (parent === types.b_stat || parent === types.b_expr)\n        return !parent.isExpr\n    }\n    if (prevType === tt._return)\n      return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n    if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)\n      return true\n    if (prevType == tt.braceL)\n      return this.curContext() === types.b_stat\n    return !this.exprAllowed\n  }\n\n  pp$6.updateContext = function(prevType) {\n    var update, type = this.type\n    if (type.keyword && prevType == tt.dot)\n      this.exprAllowed = false\n    else if (update = type.updateContext)\n      update.call(this, prevType)\n    else\n      this.exprAllowed = type.beforeExpr\n  }\n\n  // Token-specific context update code\n\n  tt.parenR.updateContext = tt.braceR.updateContext = function() {\n    if (this.context.length == 1) {\n      this.exprAllowed = true\n      return\n    }\n    var out = this.context.pop()\n    if (out === types.b_stat && this.curContext() === types.f_expr) {\n      this.context.pop()\n      this.exprAllowed = false\n    } else if (out === types.b_tmpl) {\n      this.exprAllowed = true\n    } else {\n      this.exprAllowed = !out.isExpr\n    }\n  }\n\n  tt.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)\n    this.exprAllowed = true\n  }\n\n  tt.dollarBraceL.updateContext = function() {\n    this.context.push(types.b_tmpl)\n    this.exprAllowed = true\n  }\n\n  tt.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while\n    this.context.push(statementParens ? types.p_stat : types.p_expr)\n    this.exprAllowed = true\n  }\n\n  tt.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n  }\n\n  tt._function.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&\n        !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))\n      this.context.push(types.f_expr)\n    this.exprAllowed = false\n  }\n\n  tt.backQuote.updateContext = function() {\n    if (this.curContext() === types.q_tmpl)\n      this.context.pop()\n    else\n      this.context.push(types.q_tmpl)\n    this.exprAllowed = false\n  }\n\n  // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n  var Token = function Token(p) {\n    this.type = p.type\n    this.value = p.value\n    this.start = p.start\n    this.end = p.end\n    if (p.options.locations)\n      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n    if (p.options.ranges)\n      this.range = [p.start, p.end]\n  };\n\n  // ## Tokenizer\n\n  var pp$7 = Parser.prototype\n\n  // Are we running under Rhino?\n  var isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"\n\n  // Move to the next token\n\n  pp$7.next = function() {\n    if (this.options.onToken)\n      this.options.onToken(new Token(this))\n\n    this.lastTokEnd = this.end\n    this.lastTokStart = this.start\n    this.lastTokEndLoc = this.endLoc\n    this.lastTokStartLoc = this.startLoc\n    this.nextToken()\n  }\n\n  pp$7.getToken = function() {\n    this.next()\n    return new Token(this)\n  }\n\n  // If we're in an ES6 environment, make parsers iterable\n  if (typeof Symbol !== \"undefined\")\n    pp$7[Symbol.iterator] = function () {\n      var self = this\n      return {next: function () {\n        var token = self.getToken()\n        return {\n          done: token.type === tt.eof,\n          value: token\n        }\n      }}\n    }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  pp$7.setStrict = function(strict) {\n    var this$1 = this;\n\n    this.strict = strict\n    if (this.type !== tt.num && this.type !== tt.string) return\n    this.pos = this.start\n    if (this.options.locations) {\n      while (this.pos < this.lineStart) {\n        this$1.lineStart = this$1.input.lastIndexOf(\"\\n\", this$1.lineStart - 2) + 1\n        --this$1.curLine\n      }\n    }\n    this.nextToken()\n  }\n\n  pp$7.curContext = function() {\n    return this.context[this.context.length - 1]\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  pp$7.nextToken = function() {\n    var curContext = this.curContext()\n    if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\n    this.start = this.pos\n    if (this.options.locations) this.startLoc = this.curPosition()\n    if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\n    if (curContext.override) return curContext.override(this)\n    else this.readToken(this.fullCharCodeAtPos())\n  }\n\n  pp$7.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n      return this.readWord()\n\n    return this.getTokenFromCode(code)\n  }\n\n  pp$7.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos)\n    if (code <= 0xd7ff || code >= 0xe000) return code\n    var next = this.input.charCodeAt(this.pos + 1)\n    return (code << 10) + next - 0x35fdc00\n  }\n\n  pp$7.skipBlockComment = function() {\n    var this$1 = this;\n\n    var startLoc = this.options.onComment && this.curPosition()\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n    if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n    this.pos = end + 2\n    if (this.options.locations) {\n      lineBreakG.lastIndex = start\n      var match\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n        ++this$1.curLine\n        this$1.lineStart = match.index + match[0].length\n      }\n    }\n    if (this.options.onComment)\n      this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  pp$7.skipLineComment = function(startSkip) {\n    var this$1 = this;\n\n    var start = this.pos\n    var startLoc = this.options.onComment && this.curPosition()\n    var ch = this.input.charCodeAt(this.pos+=startSkip)\n    while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n      ++this$1.pos\n      ch = this$1.input.charCodeAt(this$1.pos)\n    }\n    if (this.options.onComment)\n      this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  pp$7.skipSpace = function() {\n    var this$1 = this;\n\n    loop: while (this.pos < this.input.length) {\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      switch (ch) {\n        case 32: case 160: // ' '\n          ++this$1.pos\n          break\n        case 13:\n          if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n            ++this$1.pos\n          }\n        case 10: case 8232: case 8233:\n          ++this$1.pos\n          if (this$1.options.locations) {\n            ++this$1.curLine\n            this$1.lineStart = this$1.pos\n          }\n          break\n        case 47: // '/'\n          switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n            case 42: // '*'\n              this$1.skipBlockComment()\n              break\n            case 47:\n              this$1.skipLineComment(2)\n              break\n            default:\n              break loop\n          }\n          break\n        default:\n          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n            ++this$1.pos\n          } else {\n            break loop\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  pp$7.finishToken = function(type, val) {\n    this.end = this.pos\n    if (this.options.locations) this.endLoc = this.curPosition()\n    var prevType = this.type\n    this.type = type\n    this.value = val\n\n    this.updateContext(prevType)\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  pp$7.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next >= 48 && next <= 57) return this.readNumber(true)\n    var next2 = this.input.charCodeAt(this.pos + 2)\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n      this.pos += 3\n      return this.finishToken(tt.ellipsis)\n    } else {\n      ++this.pos\n      return this.finishToken(tt.dot)\n    }\n  }\n\n  pp$7.readToken_slash = function() { // '/'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (this.exprAllowed) {++this.pos; return this.readRegexp()}\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.slash, 1)\n  }\n\n  pp$7.readToken_mult_modulo_exp = function(code) { // '%*'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    var tokentype = code === 42 ? tt.star : tt.modulo\n\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && next === 42) {\n      ++size\n      tokentype = tt.starstar\n      next = this.input.charCodeAt(this.pos + 2)\n    }\n\n    if (next === 61) return this.finishOp(tt.assign, size + 1)\n    return this.finishOp(tokentype, size)\n  }\n\n  pp$7.readToken_pipe_amp = function(code) { // '|&'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n  }\n\n  pp$7.readToken_caret = function() { // '^'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.bitwiseXOR, 1)\n  }\n\n  pp$7.readToken_plus_min = function(code) { // '+-'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) {\n      if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n          lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n        // A `-->` line comment\n        this.skipLineComment(3)\n        this.skipSpace()\n        return this.nextToken()\n      }\n      return this.finishOp(tt.incDec, 2)\n    }\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.plusMin, 1)\n  }\n\n  pp$7.readToken_lt_gt = function(code) { // '<>'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n      if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n      return this.finishOp(tt.bitShift, size)\n    }\n    if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n        this.input.charCodeAt(this.pos + 3) == 45) {\n      if (this.inModule) this.unexpected()\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4)\n      this.skipSpace()\n      return this.nextToken()\n    }\n    if (next === 61) size = 2\n    return this.finishOp(tt.relational, size)\n  }\n\n  pp$7.readToken_eq_excl = function(code) { // '=!'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n      this.pos += 2\n      return this.finishToken(tt.arrow)\n    }\n    return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n  }\n\n  pp$7.getTokenFromCode = function(code) {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n    case 46: // '.'\n      return this.readToken_dot()\n\n      // Punctuation tokens.\n    case 40: ++this.pos; return this.finishToken(tt.parenL)\n    case 41: ++this.pos; return this.finishToken(tt.parenR)\n    case 59: ++this.pos; return this.finishToken(tt.semi)\n    case 44: ++this.pos; return this.finishToken(tt.comma)\n    case 91: ++this.pos; return this.finishToken(tt.bracketL)\n    case 93: ++this.pos; return this.finishToken(tt.bracketR)\n    case 123: ++this.pos; return this.finishToken(tt.braceL)\n    case 125: ++this.pos; return this.finishToken(tt.braceR)\n    case 58: ++this.pos; return this.finishToken(tt.colon)\n    case 63: ++this.pos; return this.finishToken(tt.question)\n\n    case 96: // '`'\n      if (this.options.ecmaVersion < 6) break\n      ++this.pos\n      return this.finishToken(tt.backQuote)\n\n    case 48: // '0'\n      var next = this.input.charCodeAt(this.pos + 1)\n      if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return this.readNumber(false)\n\n      // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return this.readString(code)\n\n      // Operators are parsed inline in tiny state machines. '=' (61) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n    case 47: // '/'\n      return this.readToken_slash()\n\n    case 37: case 42: // '%*'\n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: // '|&'\n      return this.readToken_pipe_amp(code)\n\n    case 94: // '^'\n      return this.readToken_caret()\n\n    case 43: case 45: // '+-'\n      return this.readToken_plus_min(code)\n\n    case 60: case 62: // '<>'\n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: // '=!'\n      return this.readToken_eq_excl(code)\n\n    case 126: // '~'\n      return this.finishOp(tt.prefix, 1)\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n  }\n\n  pp$7.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size)\n    this.pos += size\n    return this.finishToken(type, str)\n  }\n\n  // Parse a regular expression. Some context-awareness is necessary,\n  // since a '/' inside a '[]' set does not end the expression.\n\n  function tryCreateRegexp(src, flags, throwErrorAt, parser) {\n    try {\n      return new RegExp(src, flags)\n    } catch (e) {\n      if (throwErrorAt !== undefined) {\n        if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message)\n        throw e\n      }\n    }\n  }\n\n  var regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\")\n\n  pp$7.readRegexp = function() {\n    var this$1 = this;\n\n    var escaped, inClass, start = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(start, \"Unterminated regular expression\")\n      var ch = this$1.input.charAt(this$1.pos)\n      if (lineBreak.test(ch)) this$1.raise(start, \"Unterminated regular expression\")\n      if (!escaped) {\n        if (ch === \"[\") inClass = true\n        else if (ch === \"]\" && inClass) inClass = false\n        else if (ch === \"/\" && !inClass) break\n        escaped = ch === \"\\\\\"\n      } else escaped = false\n      ++this$1.pos\n    }\n    var content = this.input.slice(start, this.pos)\n    ++this.pos\n    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n    // here (don't ask).\n    var mods = this.readWord1()\n    var tmp = content, tmpFlags = \"\"\n    if (mods) {\n      var validFlags = /^[gim]*$/\n      if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/\n      if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n      if (mods.indexOf(\"u\") >= 0) {\n        if (regexpUnicodeSupport) {\n          tmpFlags = \"u\"\n        } else {\n          // Replace each astral symbol and every Unicode escape sequence that\n          // possibly represents an astral symbol or a paired surrogate with a\n          // single ASCII symbol to avoid throwing on regular expressions that\n          // are only valid in combination with the `/u` flag.\n          // Note: replacing with the ASCII symbol `x` might cause false\n          // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n          // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n          // be replaced by `[x-b]` which throws an error.\n          tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n            code = Number(\"0x\" + code)\n            if (code > 0x10FFFF) this$1.raise(start + offset + 3, \"Code point out of bounds\")\n            return \"x\"\n          })\n          tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n          tmpFlags = tmpFlags.replace(\"u\", \"\")\n        }\n      }\n    }\n    // Detect invalid regular expressions.\n    var value = null\n    // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n    // so don't do detection if we are running under Rhino\n    if (!isRhino) {\n      tryCreateRegexp(tmp, tmpFlags, start, this)\n      // Get a regular expression object for this pattern-flag pair, or `null` in\n      // case the current environment doesn't support the flags it uses.\n      value = tryCreateRegexp(content, mods)\n    }\n    return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  pp$7.readInt = function(radix, len) {\n    var this$1 = this;\n\n    var start = this.pos, total = 0\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this$1.input.charCodeAt(this$1.pos), val\n      if (code >= 97) val = code - 97 + 10 // a\n      else if (code >= 65) val = code - 65 + 10 // A\n      else if (code >= 48 && code <= 57) val = code - 48 // 0-9\n      else val = Infinity\n      if (val >= radix) break\n      ++this$1.pos\n      total = total * radix + val\n    }\n    if (this.pos === start || len != null && this.pos - start !== len) return null\n\n    return total\n  }\n\n  pp$7.readRadixNumber = function(radix) {\n    this.pos += 2 // 0x\n    var val = this.readInt(radix)\n    if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  pp$7.readNumber = function(startsWithDot) {\n    var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n    if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n    var next = this.input.charCodeAt(this.pos)\n    if (next === 46) { // '.'\n      ++this.pos\n      this.readInt(10)\n      isFloat = true\n      next = this.input.charCodeAt(this.pos)\n    }\n    if (next === 69 || next === 101) { // 'eE'\n      next = this.input.charCodeAt(++this.pos)\n      if (next === 43 || next === 45) ++this.pos // '+-'\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n      isFloat = true\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\n    var str = this.input.slice(start, this.pos), val\n    if (isFloat) val = parseFloat(str)\n    else if (!octal || str.length === 1) val = parseInt(str, 10)\n    else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n    else val = parseInt(str, 8)\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  pp$7.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code\n\n    if (ch === 123) {\n      if (this.options.ecmaVersion < 6) this.unexpected()\n      var codePos = ++this.pos\n      code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)\n      ++this.pos\n      if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\")\n    } else {\n      code = this.readHexChar(4)\n    }\n    return code\n  }\n\n  function codePointToString(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) return String.fromCharCode(code)\n    code -= 0x10000\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  pp$7.readString = function(quote) {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = ++this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated string constant\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === quote) break\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(false)\n        chunkStart = this$1.pos\n      } else {\n        if (isNewLine(ch)) this$1.raise(this$1.start, \"Unterminated string constant\")\n        ++this$1.pos\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++)\n    return this.finishToken(tt.string, out)\n  }\n\n  // Reads template string tokens.\n\n  pp$7.readTmplToken = function() {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated template\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n        if (this$1.pos === this$1.start && this$1.type === tt.template) {\n          if (ch === 36) {\n            this$1.pos += 2\n            return this$1.finishToken(tt.dollarBraceL)\n          } else {\n            ++this$1.pos\n            return this$1.finishToken(tt.backQuote)\n          }\n        }\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        return this$1.finishToken(tt.template, out)\n      }\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(true)\n        chunkStart = this$1.pos\n      } else if (isNewLine(ch)) {\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        ++this$1.pos\n        switch (ch) {\n          case 13:\n            if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos\n          case 10:\n            out += \"\\n\"\n            break\n          default:\n            out += String.fromCharCode(ch)\n            break\n        }\n        if (this$1.options.locations) {\n          ++this$1.curLine\n          this$1.lineStart = this$1.pos\n        }\n        chunkStart = this$1.pos\n      } else {\n        ++this$1.pos\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  pp$7.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos)\n    ++this.pos\n    switch (ch) {\n    case 110: return \"\\n\" // 'n' -> '\\n'\n    case 114: return \"\\r\" // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n    case 117: return codePointToString(this.readCodePoint()) // 'u'\n    case 116: return \"\\t\" // 't' -> '\\t'\n    case 98: return \"\\b\" // 'b' -> '\\b'\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n    case 102: return \"\\f\" // 'f' -> '\\f'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n      return \"\"\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]\n        var octal = parseInt(octalStr, 8)\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1)\n          octal = parseInt(octalStr, 8)\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\")\n        }\n        this.pos += octalStr.length - 1\n        return String.fromCharCode(octal)\n      }\n      return String.fromCharCode(ch)\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  pp$7.readHexChar = function(len) {\n    var codePos = this.pos\n    var n = this.readInt(16, len)\n    if (n === null) this.raise(codePos, \"Bad character escape sequence\")\n    return n\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  pp$7.readWord1 = function() {\n    var this$1 = this;\n\n    this.containsEsc = false\n    var word = \"\", first = true, chunkStart = this.pos\n    var astral = this.options.ecmaVersion >= 6\n    while (this.pos < this.input.length) {\n      var ch = this$1.fullCharCodeAtPos()\n      if (isIdentifierChar(ch, astral)) {\n        this$1.pos += ch <= 0xffff ? 1 : 2\n      } else if (ch === 92) { // \"\\\"\n        this$1.containsEsc = true\n        word += this$1.input.slice(chunkStart, this$1.pos)\n        var escStart = this$1.pos\n        if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n          this$1.raise(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n        ++this$1.pos\n        var esc = this$1.readCodePoint()\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          this$1.raise(escStart, \"Invalid Unicode escape\")\n        word += codePointToString(esc)\n        chunkStart = this$1.pos\n      } else {\n        break\n      }\n      first = false\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  pp$7.readWord = function() {\n    var word = this.readWord1()\n    var type = tt.name\n    if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))\n      type = keywordTypes[word]\n    return this.finishToken(type, word)\n  }\n\n  var version = \"3.3.0\"\n\n  // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and\n  // returns an abstract syntax tree as specified by [Mozilla parser\n  // API][api].\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n  function parse(input, options) {\n    return new Parser(options, input).parse()\n  }\n\n  // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n  function parseExpressionAt(input, pos, options) {\n    var p = new Parser(options, input, pos)\n    p.nextToken()\n    return p.parseExpression()\n  }\n\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n  function tokenizer(input, options) {\n    return new Parser(options, input)\n  }\n\n  exports.version = version;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokenizer = tokenizer;\n  exports.Parser = Parser;\n  exports.plugins = plugins;\n  exports.defaultOptions = defaultOptions;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.getLineInfo = getLineInfo;\n  exports.Node = Node;\n  exports.TokenType = TokenType;\n  exports.tokTypes = tt;\n  exports.TokContext = TokContext;\n  exports.tokContexts = types;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.Token = Token;\n  exports.isNewLine = isNewLine;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n//# sourceURL=webpack:///./node_modules/acorn/dist/acorn.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = ((uint8[i] << 16) & 0xFF0000) + ((uint8[i + 1] << 8) & 0xFF00) + (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/buffer/node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/buffer/node_modules/isarray/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/buffer/node_modules/isarray/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/buffer/node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/electron/index.js":
/*!****************************************!*\
  !*** ./node_modules/electron/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__dirname) {var fs = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\")\nvar path = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\")\n\nvar pathFile = path.join(__dirname, 'path.txt')\n\nif (fs.existsSync(pathFile)) {\n  module.exports = path.join(__dirname, fs.readFileSync(pathFile, 'utf-8'))\n} else {\n  throw new Error('Electron failed to install correctly, please delete node_modules/electron and try installing again')\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, \"/\"))\n\n//# sourceURL=webpack:///./node_modules/electron/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack:///./node_modules/node-libs-browser/mock/empty.js?");

/***/ }),

/***/ "./node_modules/paper/dist/paper-full.js":
/*!***********************************************!*\
  !*** ./node_modules/paper/dist/paper-full.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Paper.js v0.11.5 - The Swiss Army Knife of Vector Graphics Scripting.\n * http://paperjs.org/\n *\n * Copyright (c) 2011 - 2016, Juerg Lehni & Jonathan Puckey\n * http://scratchdisk.com/ & http://jonathanpuckey.com/\n *\n * Distributed under the MIT license. See LICENSE file for details.\n *\n * All rights reserved.\n *\n * Date: Thu Oct 5 16:16:29 2017 +0200\n *\n ***\n *\n * Straps.js - Class inheritance library with support for bean-style accessors\n *\n * Copyright (c) 2006 - 2016 Juerg Lehni\n * http://scratchdisk.com/\n *\n * Distributed under the MIT license.\n *\n ***\n *\n * Acorn.js\n * http://marijnhaverbeke.nl/acorn/\n *\n * Acorn is a tiny, fast JavaScript parser written in JavaScript,\n * created by Marijn Haverbeke and released under an MIT license.\n *\n */\n\nvar paper = function(self, undefined) {\n\nself = self || __webpack_require__(/*! ./node/self.js */ 0);\nvar window = self.window,\n\tdocument = self.document;\n\nvar Base = new function() {\n\tvar hidden = /^(statics|enumerable|beans|preserve)$/,\n\t\tarray = [],\n\t\tslice = array.slice,\n\t\tcreate = Object.create,\n\t\tdescribe = Object.getOwnPropertyDescriptor,\n\t\tdefine = Object.defineProperty,\n\n\t\tforEach = array.forEach || function(iter, bind) {\n\t\t\tfor (var i = 0, l = this.length; i < l; i++) {\n\t\t\t\titer.call(bind, this[i], i, this);\n\t\t\t}\n\t\t},\n\n\t\tforIn = function(iter, bind) {\n\t\t\tfor (var i in this) {\n\t\t\t\tif (this.hasOwnProperty(i))\n\t\t\t\t\titer.call(bind, this[i], i, this);\n\t\t\t}\n\t\t},\n\n\t\tset = Object.assign || function(dst) {\n\t\t\tfor (var i = 1, l = arguments.length; i < l; i++) {\n\t\t\t\tvar src = arguments[i];\n\t\t\t\tfor (var key in src) {\n\t\t\t\t\tif (src.hasOwnProperty(key))\n\t\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn dst;\n\t\t},\n\n\t\teach = function(obj, iter, bind) {\n\t\t\tif (obj) {\n\t\t\t\tvar desc = describe(obj, 'length');\n\t\t\t\t(desc && typeof desc.value === 'number' ? forEach : forIn)\n\t\t\t\t\t.call(obj, iter, bind = bind || obj);\n\t\t\t}\n\t\t\treturn bind;\n\t\t};\n\n\tfunction inject(dest, src, enumerable, beans, preserve) {\n\t\tvar beansNames = {};\n\n\t\tfunction field(name, val) {\n\t\t\tval = val || (val = describe(src, name))\n\t\t\t\t\t&& (val.get ? val : val.value);\n\t\t\tif (typeof val === 'string' && val[0] === '#')\n\t\t\t\tval = dest[val.substring(1)] || val;\n\t\t\tvar isFunc = typeof val === 'function',\n\t\t\t\tres = val,\n\t\t\t\tprev = preserve || isFunc && !val.base\n\t\t\t\t\t\t? (val && val.get ? name in dest : dest[name])\n\t\t\t\t\t\t: null,\n\t\t\t\tbean;\n\t\t\tif (!preserve || !prev) {\n\t\t\t\tif (isFunc && prev)\n\t\t\t\t\tval.base = prev;\n\t\t\t\tif (isFunc && beans !== false\n\t\t\t\t\t\t&& (bean = name.match(/^([gs]et|is)(([A-Z])(.*))$/)))\n\t\t\t\t\tbeansNames[bean[3].toLowerCase() + bean[4]] = bean[2];\n\t\t\t\tif (!res || isFunc || !res.get || typeof res.get !== 'function'\n\t\t\t\t\t\t|| !Base.isPlainObject(res)) {\n\t\t\t\t\tres = { value: res, writable: true };\n\t\t\t\t}\n\t\t\t\tif ((describe(dest, name)\n\t\t\t\t\t\t|| { configurable: true }).configurable) {\n\t\t\t\t\tres.configurable = true;\n\t\t\t\t\tres.enumerable = enumerable != null ? enumerable : !bean;\n\t\t\t\t}\n\t\t\t\tdefine(dest, name, res);\n\t\t\t}\n\t\t}\n\t\tif (src) {\n\t\t\tfor (var name in src) {\n\t\t\t\tif (src.hasOwnProperty(name) && !hidden.test(name))\n\t\t\t\t\tfield(name);\n\t\t\t}\n\t\t\tfor (var name in beansNames) {\n\t\t\t\tvar part = beansNames[name],\n\t\t\t\t\tset = dest['set' + part],\n\t\t\t\t\tget = dest['get' + part] || set && dest['is' + part];\n\t\t\t\tif (get && (beans === true || get.length === 0))\n\t\t\t\t\tfield(name, { get: get, set: set });\n\t\t\t}\n\t\t}\n\t\treturn dest;\n\t}\n\n\tfunction Base() {\n\t\tfor (var i = 0, l = arguments.length; i < l; i++) {\n\t\t\tvar src = arguments[i];\n\t\t\tif (src)\n\t\t\t\tset(this, src);\n\t\t}\n\t\treturn this;\n\t}\n\n\treturn inject(Base, {\n\t\tinject: function(src) {\n\t\t\tif (src) {\n\t\t\t\tvar statics = src.statics === true ? src : src.statics,\n\t\t\t\t\tbeans = src.beans,\n\t\t\t\t\tpreserve = src.preserve;\n\t\t\t\tif (statics !== src)\n\t\t\t\t\tinject(this.prototype, src, src.enumerable, beans, preserve);\n\t\t\t\tinject(this, statics, null, beans, preserve);\n\t\t\t}\n\t\t\tfor (var i = 1, l = arguments.length; i < l; i++)\n\t\t\t\tthis.inject(arguments[i]);\n\t\t\treturn this;\n\t\t},\n\n\t\textend: function() {\n\t\t\tvar base = this,\n\t\t\t\tctor,\n\t\t\t\tproto;\n\t\t\tfor (var i = 0, obj, l = arguments.length;\n\t\t\t\t\ti < l && !(ctor && proto); i++) {\n\t\t\t\tobj = arguments[i];\n\t\t\t\tctor = ctor || obj.initialize;\n\t\t\t\tproto = proto || obj.prototype;\n\t\t\t}\n\t\t\tctor = ctor || function() {\n\t\t\t\tbase.apply(this, arguments);\n\t\t\t};\n\t\t\tproto = ctor.prototype = proto || create(this.prototype);\n\t\t\tdefine(proto, 'constructor',\n\t\t\t\t\t{ value: ctor, writable: true, configurable: true });\n\t\t\tinject(ctor, this);\n\t\t\tif (arguments.length)\n\t\t\t\tthis.inject.apply(ctor, arguments);\n\t\t\tctor.base = base;\n\t\t\treturn ctor;\n\t\t}\n\t}).inject({\n\t\tenumerable: false,\n\n\t\tinitialize: Base,\n\n\t\tset: Base,\n\n\t\tinject: function() {\n\t\t\tfor (var i = 0, l = arguments.length; i < l; i++) {\n\t\t\t\tvar src = arguments[i];\n\t\t\t\tif (src) {\n\t\t\t\t\tinject(this, src, src.enumerable, src.beans, src.preserve);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\n\t\textend: function() {\n\t\t\tvar res = create(this);\n\t\t\treturn res.inject.apply(res, arguments);\n\t\t},\n\n\t\teach: function(iter, bind) {\n\t\t\treturn each(this, iter, bind);\n\t\t},\n\n\t\tclone: function() {\n\t\t\treturn new this.constructor(this);\n\t\t},\n\n\t\tstatics: {\n\t\t\tset: set,\n\t\t\teach: each,\n\t\t\tcreate: create,\n\t\t\tdefine: define,\n\t\t\tdescribe: describe,\n\n\t\t\tclone: function(obj) {\n\t\t\t\treturn set(new obj.constructor(), obj);\n\t\t\t},\n\n\t\t\tisPlainObject: function(obj) {\n\t\t\t\tvar ctor = obj != null && obj.constructor;\n\t\t\t\treturn ctor && (ctor === Object || ctor === Base\n\t\t\t\t\t\t|| ctor.name === 'Object');\n\t\t\t},\n\n\t\t\tpick: function(a, b) {\n\t\t\t\treturn a !== undefined ? a : b;\n\t\t\t},\n\n\t\t\tslice: function(list, begin, end) {\n\t\t\t\treturn slice.call(list, begin, end);\n\t\t\t}\n\t\t}\n\t});\n};\n\nif (true)\n\tmodule.exports = Base;\n\nBase.inject({\n\tenumerable: false,\n\n\ttoString: function() {\n\t\treturn this._id != null\n\t\t\t?  (this._class || 'Object') + (this._name\n\t\t\t\t? \" '\" + this._name + \"'\"\n\t\t\t\t: ' @' + this._id)\n\t\t\t: '{ ' + Base.each(this, function(value, key) {\n\t\t\t\tif (!/^_/.test(key)) {\n\t\t\t\t\tvar type = typeof value;\n\t\t\t\t\tthis.push(key + ': ' + (type === 'number'\n\t\t\t\t\t\t\t? Formatter.instance.number(value)\n\t\t\t\t\t\t\t: type === 'string' ? \"'\" + value + \"'\" : value));\n\t\t\t\t}\n\t\t\t}, []).join(', ') + ' }';\n\t},\n\n\tgetClassName: function() {\n\t\treturn this._class || '';\n\t},\n\n\timportJSON: function(json) {\n\t\treturn Base.importJSON(json, this);\n\t},\n\n\texportJSON: function(options) {\n\t\treturn Base.exportJSON(this, options);\n\t},\n\n\ttoJSON: function() {\n\t\treturn Base.serialize(this);\n\t},\n\n\tset: function(props, exclude) {\n\t\tif (props)\n\t\t\tBase.filter(this, props, exclude, this._prioritize);\n\t\treturn this;\n\t}\n}, {\n\nbeans: false,\nstatics: {\n\texports: {},\n\n\textend: function extend() {\n\t\tvar res = extend.base.apply(this, arguments),\n\t\t\tname = res.prototype._class;\n\t\tif (name && !Base.exports[name])\n\t\t\tBase.exports[name] = res;\n\t\treturn res;\n\t},\n\n\tequals: function(obj1, obj2) {\n\t\tif (obj1 === obj2)\n\t\t\treturn true;\n\t\tif (obj1 && obj1.equals)\n\t\t\treturn obj1.equals(obj2);\n\t\tif (obj2 && obj2.equals)\n\t\t\treturn obj2.equals(obj1);\n\t\tif (obj1 && obj2\n\t\t\t\t&& typeof obj1 === 'object' && typeof obj2 === 'object') {\n\t\t\tif (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\t\t\tvar length = obj1.length;\n\t\t\t\tif (length !== obj2.length)\n\t\t\t\t\treturn false;\n\t\t\t\twhile (length--) {\n\t\t\t\t\tif (!Base.equals(obj1[length], obj2[length]))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar keys = Object.keys(obj1),\n\t\t\t\t\tlength = keys.length;\n\t\t\t\tif (length !== Object.keys(obj2).length)\n\t\t\t\t\treturn false;\n\t\t\t\twhile (length--) {\n\t\t\t\t\tvar key = keys[length];\n\t\t\t\t\tif (!(obj2.hasOwnProperty(key)\n\t\t\t\t\t\t\t&& Base.equals(obj1[key], obj2[key])))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tread: function(list, start, options, amount) {\n\t\tif (this === Base) {\n\t\t\tvar value = this.peek(list, start);\n\t\t\tlist.__index++;\n\t\t\treturn value;\n\t\t}\n\t\tvar proto = this.prototype,\n\t\t\treadIndex = proto._readIndex,\n\t\t\tbegin = start || readIndex && list.__index || 0,\n\t\t\tlength = list.length,\n\t\t\tobj = list[begin];\n\t\tamount = amount || length - begin;\n\t\tif (obj instanceof this\n\t\t\t|| options && options.readNull && obj == null && amount <= 1) {\n\t\t\tif (readIndex)\n\t\t\t\tlist.__index = begin + 1;\n\t\t\treturn obj && options && options.clone ? obj.clone() : obj;\n\t\t}\n\t\tobj = Base.create(proto);\n\t\tif (readIndex)\n\t\t\tobj.__read = true;\n\t\tobj = obj.initialize.apply(obj, begin > 0 || begin + amount < length\n\t\t\t\t? Base.slice(list, begin, begin + amount)\n\t\t\t\t: list) || obj;\n\t\tif (readIndex) {\n\t\t\tlist.__index = begin + obj.__read;\n\t\t\tvar filtered = obj.__filtered;\n\t\t\tif (filtered) {\n\t\t\t\tlist.__filtered = filtered;\n\t\t\t\tobj.__filtered = undefined;\n\t\t\t}\n\t\t\tobj.__read = undefined;\n\t\t}\n\t\treturn obj;\n\t},\n\n\tpeek: function(list, start) {\n\t\treturn list[list.__index = start || list.__index || 0];\n\t},\n\n\tremain: function(list) {\n\t\treturn list.length - (list.__index || 0);\n\t},\n\n\treadList: function(list, start, options, amount) {\n\t\tvar res = [],\n\t\t\tentry,\n\t\t\tbegin = start || 0,\n\t\t\tend = amount ? begin + amount : list.length;\n\t\tfor (var i = begin; i < end; i++) {\n\t\t\tres.push(Array.isArray(entry = list[i])\n\t\t\t\t\t? this.read(entry, 0, options)\n\t\t\t\t\t: this.read(list, i, options, 1));\n\t\t}\n\t\treturn res;\n\t},\n\n\treadNamed: function(list, name, start, options, amount) {\n\t\tvar value = this.getNamed(list, name),\n\t\t\thasObject = value !== undefined;\n\t\tif (hasObject) {\n\t\t\tvar filtered = list.__filtered;\n\t\t\tif (!filtered) {\n\t\t\t\tfiltered = list.__filtered = Base.create(list[0]);\n\t\t\t\tfiltered.__unfiltered = list[0];\n\t\t\t}\n\t\t\tfiltered[name] = undefined;\n\t\t}\n\t\tvar l = hasObject ? [value] : list,\n\t\t\tres = this.read(l, start, options, amount);\n\t\treturn res;\n\t},\n\n\tgetNamed: function(list, name) {\n\t\tvar arg = list[0];\n\t\tif (list._hasObject === undefined)\n\t\t\tlist._hasObject = list.length === 1 && Base.isPlainObject(arg);\n\t\tif (list._hasObject)\n\t\t\treturn name ? arg[name] : list.__filtered || arg;\n\t},\n\n\thasNamed: function(list, name) {\n\t\treturn !!this.getNamed(list, name);\n\t},\n\n\tfilter: function(dest, source, exclude, prioritize) {\n\t\tvar processed;\n\n\t\tfunction handleKey(key) {\n\t\t\tif (!(exclude && key in exclude) &&\n\t\t\t\t!(processed && key in processed)) {\n\t\t\t\tvar value = source[key];\n\t\t\t\tif (value !== undefined)\n\t\t\t\t\tdest[key] = value;\n\t\t\t}\n\t\t}\n\n\t\tif (prioritize) {\n\t\t\tvar keys = {};\n\t\t\tfor (var i = 0, key, l = prioritize.length; i < l; i++) {\n\t\t\t\tif ((key = prioritize[i]) in source) {\n\t\t\t\t\thandleKey(key);\n\t\t\t\t\tkeys[key] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprocessed = keys;\n\t\t}\n\n\t\tObject.keys(source.__unfiltered || source).forEach(handleKey);\n\t\treturn dest;\n\t},\n\n\tisPlainValue: function(obj, asString) {\n\t\treturn Base.isPlainObject(obj) || Array.isArray(obj)\n\t\t\t\t|| asString && typeof obj === 'string';\n\t},\n\n\tserialize: function(obj, options, compact, dictionary) {\n\t\toptions = options || {};\n\n\t\tvar isRoot = !dictionary,\n\t\t\tres;\n\t\tif (isRoot) {\n\t\t\toptions.formatter = new Formatter(options.precision);\n\t\t\tdictionary = {\n\t\t\t\tlength: 0,\n\t\t\t\tdefinitions: {},\n\t\t\t\treferences: {},\n\t\t\t\tadd: function(item, create) {\n\t\t\t\t\tvar id = '#' + item._id,\n\t\t\t\t\t\tref = this.references[id];\n\t\t\t\t\tif (!ref) {\n\t\t\t\t\t\tthis.length++;\n\t\t\t\t\t\tvar res = create.call(item),\n\t\t\t\t\t\t\tname = item._class;\n\t\t\t\t\t\tif (name && res[0] !== name)\n\t\t\t\t\t\t\tres.unshift(name);\n\t\t\t\t\t\tthis.definitions[id] = res;\n\t\t\t\t\t\tref = this.references[id] = [id];\n\t\t\t\t\t}\n\t\t\t\t\treturn ref;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tif (obj && obj._serialize) {\n\t\t\tres = obj._serialize(options, dictionary);\n\t\t\tvar name = obj._class;\n\t\t\tif (name && !obj._compactSerialize && (isRoot || !compact)\n\t\t\t\t\t&& res[0] !== name) {\n\t\t\t\tres.unshift(name);\n\t\t\t}\n\t\t} else if (Array.isArray(obj)) {\n\t\t\tres = [];\n\t\t\tfor (var i = 0, l = obj.length; i < l; i++)\n\t\t\t\tres[i] = Base.serialize(obj[i], options, compact, dictionary);\n\t\t} else if (Base.isPlainObject(obj)) {\n\t\t\tres = {};\n\t\t\tvar keys = Object.keys(obj);\n\t\t\tfor (var i = 0, l = keys.length; i < l; i++) {\n\t\t\t\tvar key = keys[i];\n\t\t\t\tres[key] = Base.serialize(obj[key], options, compact,\n\t\t\t\t\t\tdictionary);\n\t\t\t}\n\t\t} else if (typeof obj === 'number') {\n\t\t\tres = options.formatter.number(obj, options.precision);\n\t\t} else {\n\t\t\tres = obj;\n\t\t}\n\t\treturn isRoot && dictionary.length > 0\n\t\t\t\t? [['dictionary', dictionary.definitions], res]\n\t\t\t\t: res;\n\t},\n\n\tdeserialize: function(json, create, _data, _setDictionary, _isRoot) {\n\t\tvar res = json,\n\t\t\tisFirst = !_data,\n\t\t\thasDictionary = isFirst && json && json.length\n\t\t\t\t&& json[0][0] === 'dictionary';\n\t\t_data = _data || {};\n\t\tif (Array.isArray(json)) {\n\t\t\tvar type = json[0],\n\t\t\t\tisDictionary = type === 'dictionary';\n\t\t\tif (json.length == 1 && /^#/.test(type)) {\n\t\t\t\treturn _data.dictionary[type];\n\t\t\t}\n\t\t\ttype = Base.exports[type];\n\t\t\tres = [];\n\t\t\tfor (var i = type ? 1 : 0, l = json.length; i < l; i++) {\n\t\t\t\tres.push(Base.deserialize(json[i], create, _data,\n\t\t\t\t\t\tisDictionary, hasDictionary));\n\t\t\t}\n\t\t\tif (type) {\n\t\t\t\tvar args = res;\n\t\t\t\tif (create) {\n\t\t\t\t\tres = create(type, args, isFirst || _isRoot);\n\t\t\t\t} else {\n\t\t\t\t\tres = Base.create(type.prototype);\n\t\t\t\t\ttype.apply(res, args);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (Base.isPlainObject(json)) {\n\t\t\tres = {};\n\t\t\tif (_setDictionary)\n\t\t\t\t_data.dictionary = res;\n\t\t\tfor (var key in json)\n\t\t\t\tres[key] = Base.deserialize(json[key], create, _data);\n\t\t}\n\t\treturn hasDictionary ? res[1] : res;\n\t},\n\n\texportJSON: function(obj, options) {\n\t\tvar json = Base.serialize(obj, options);\n\t\treturn options && options.asString == false\n\t\t\t\t? json\n\t\t\t\t: JSON.stringify(json);\n\t},\n\n\timportJSON: function(json, target) {\n\t\treturn Base.deserialize(\n\t\t\t\ttypeof json === 'string' ? JSON.parse(json) : json,\n\t\t\t\tfunction(ctor, args, isRoot) {\n\t\t\t\t\tvar useTarget = isRoot && target\n\t\t\t\t\t\t\t&& target.constructor === ctor,\n\t\t\t\t\t\tobj = useTarget ? target\n\t\t\t\t\t\t\t: Base.create(ctor.prototype);\n\t\t\t\t\tif (args.length === 1 && obj instanceof Item\n\t\t\t\t\t\t\t&& (useTarget || !(obj instanceof Layer))) {\n\t\t\t\t\t\tvar arg = args[0];\n\t\t\t\t\t\tif (Base.isPlainObject(arg))\n\t\t\t\t\t\t\targ.insert = false;\n\t\t\t\t\t}\n\t\t\t\t\t(useTarget ? obj.set : ctor).apply(obj, args);\n\t\t\t\t\tif (useTarget)\n\t\t\t\t\t\ttarget = null;\n\t\t\t\t\treturn obj;\n\t\t\t\t});\n\t},\n\n\tsplice: function(list, items, index, remove) {\n\t\tvar amount = items && items.length,\n\t\t\tappend = index === undefined;\n\t\tindex = append ? list.length : index;\n\t\tif (index > list.length)\n\t\t\tindex = list.length;\n\t\tfor (var i = 0; i < amount; i++)\n\t\t\titems[i]._index = index + i;\n\t\tif (append) {\n\t\t\tlist.push.apply(list, items);\n\t\t\treturn [];\n\t\t} else {\n\t\t\tvar args = [index, remove];\n\t\t\tif (items)\n\t\t\t\targs.push.apply(args, items);\n\t\t\tvar removed = list.splice.apply(list, args);\n\t\t\tfor (var i = 0, l = removed.length; i < l; i++)\n\t\t\t\tremoved[i]._index = undefined;\n\t\t\tfor (var i = index + amount, l = list.length; i < l; i++)\n\t\t\t\tlist[i]._index = i;\n\t\t\treturn removed;\n\t\t}\n\t},\n\n\tcapitalize: function(str) {\n\t\treturn str.replace(/\\b[a-z]/g, function(match) {\n\t\t\treturn match.toUpperCase();\n\t\t});\n\t},\n\n\tcamelize: function(str) {\n\t\treturn str.replace(/-(.)/g, function(match, chr) {\n\t\t\treturn chr.toUpperCase();\n\t\t});\n\t},\n\n\thyphenate: function(str) {\n\t\treturn str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\t}\n}});\n\nvar Emitter = {\n\ton: function(type, func) {\n\t\tif (typeof type !== 'string') {\n\t\t\tBase.each(type, function(value, key) {\n\t\t\t\tthis.on(key, value);\n\t\t\t}, this);\n\t\t} else {\n\t\t\tvar types = this._eventTypes,\n\t\t\t\tentry = types && types[type],\n\t\t\t\thandlers = this._callbacks = this._callbacks || {};\n\t\t\thandlers = handlers[type] = handlers[type] || [];\n\t\t\tif (handlers.indexOf(func) === -1) {\n\t\t\t\thandlers.push(func);\n\t\t\t\tif (entry && entry.install && handlers.length === 1)\n\t\t\t\t\tentry.install.call(this, type);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\toff: function(type, func) {\n\t\tif (typeof type !== 'string') {\n\t\t\tBase.each(type, function(value, key) {\n\t\t\t\tthis.off(key, value);\n\t\t\t}, this);\n\t\t\treturn;\n\t\t}\n\t\tvar types = this._eventTypes,\n\t\t\tentry = types && types[type],\n\t\t\thandlers = this._callbacks && this._callbacks[type],\n\t\t\tindex;\n\t\tif (handlers) {\n\t\t\tif (!func || (index = handlers.indexOf(func)) !== -1\n\t\t\t\t\t&& handlers.length === 1) {\n\t\t\t\tif (entry && entry.uninstall)\n\t\t\t\t\tentry.uninstall.call(this, type);\n\t\t\t\tdelete this._callbacks[type];\n\t\t\t} else if (index !== -1) {\n\t\t\t\thandlers.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\tonce: function(type, func) {\n\t\treturn this.on(type, function() {\n\t\t\tfunc.apply(this, arguments);\n\t\t\tthis.off(type, func);\n\t\t});\n\t},\n\n\temit: function(type, event) {\n\t\tvar handlers = this._callbacks && this._callbacks[type];\n\t\tif (!handlers)\n\t\t\treturn false;\n\t\tvar args = Base.slice(arguments, 1),\n\t\t\tsetTarget = event && event.target && !event.currentTarget;\n\t\thandlers = handlers.slice();\n\t\tif (setTarget)\n\t\t\tevent.currentTarget = this;\n\t\tfor (var i = 0, l = handlers.length; i < l; i++) {\n\t\t\tif (handlers[i].apply(this, args) == false) {\n\t\t\t\tif (event && event.stop)\n\t\t\t\t\tevent.stop();\n\t\t\t\tbreak;\n\t\t   }\n\t\t}\n\t\tif (setTarget)\n\t\t\tdelete event.currentTarget;\n\t\treturn true;\n\t},\n\n\tresponds: function(type) {\n\t\treturn !!(this._callbacks && this._callbacks[type]);\n\t},\n\n\tattach: '#on',\n\tdetach: '#off',\n\tfire: '#emit',\n\n\t_installEvents: function(install) {\n\t\tvar types = this._eventTypes,\n\t\t\thandlers = this._callbacks,\n\t\t\tkey = install ? 'install' : 'uninstall';\n\t\tif (types) {\n\t\t\tfor (var type in handlers) {\n\t\t\t\tif (handlers[type].length > 0) {\n\t\t\t\t\tvar entry = types[type],\n\t\t\t\t\t\tfunc = entry && entry[key];\n\t\t\t\t\tif (func)\n\t\t\t\t\t\tfunc.call(this, type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tstatics: {\n\t\tinject: function inject(src) {\n\t\t\tvar events = src._events;\n\t\t\tif (events) {\n\t\t\t\tvar types = {};\n\t\t\t\tBase.each(events, function(entry, key) {\n\t\t\t\t\tvar isString = typeof entry === 'string',\n\t\t\t\t\t\tname = isString ? entry : key,\n\t\t\t\t\t\tpart = Base.capitalize(name),\n\t\t\t\t\t\ttype = name.substring(2).toLowerCase();\n\t\t\t\t\ttypes[type] = isString ? {} : entry;\n\t\t\t\t\tname = '_' + name;\n\t\t\t\t\tsrc['get' + part] = function() {\n\t\t\t\t\t\treturn this[name];\n\t\t\t\t\t};\n\t\t\t\t\tsrc['set' + part] = function(func) {\n\t\t\t\t\t\tvar prev = this[name];\n\t\t\t\t\t\tif (prev)\n\t\t\t\t\t\t\tthis.off(type, prev);\n\t\t\t\t\t\tif (func)\n\t\t\t\t\t\t\tthis.on(type, func);\n\t\t\t\t\t\tthis[name] = func;\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tsrc._eventTypes = types;\n\t\t\t}\n\t\t\treturn inject.base.apply(this, arguments);\n\t\t}\n\t}\n};\n\nvar PaperScope = Base.extend({\n\t_class: 'PaperScope',\n\n\tinitialize: function PaperScope() {\n\t\tpaper = this;\n\t\tthis.settings = new Base({\n\t\t\tapplyMatrix: true,\n\t\t\tinsertItems: true,\n\t\t\thandleSize: 4,\n\t\t\thitTolerance: 0\n\t\t});\n\t\tthis.project = null;\n\t\tthis.projects = [];\n\t\tthis.tools = [];\n\t\tthis._id = PaperScope._id++;\n\t\tPaperScope._scopes[this._id] = this;\n\t\tvar proto = PaperScope.prototype;\n\t\tif (!this.support) {\n\t\t\tvar ctx = CanvasProvider.getContext(1, 1) || {};\n\t\t\tproto.support = {\n\t\t\t\tnativeDash: 'setLineDash' in ctx || 'mozDash' in ctx,\n\t\t\t\tnativeBlendModes: BlendMode.nativeModes\n\t\t\t};\n\t\t\tCanvasProvider.release(ctx);\n\t\t}\n\t\tif (!this.agent) {\n\t\t\tvar user = self.navigator.userAgent.toLowerCase(),\n\t\t\t\tos = (/(darwin|win|mac|linux|freebsd|sunos)/.exec(user)||[])[0],\n\t\t\t\tplatform = os === 'darwin' ? 'mac' : os,\n\t\t\t\tagent = proto.agent = proto.browser = { platform: platform };\n\t\t\tif (platform)\n\t\t\t\tagent[platform] = true;\n\t\t\tuser.replace(\n\t\t\t\t/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node)\\/?\\s*([.\\d]+)(?:.*version\\/([.\\d]+))?(?:.*rv\\:v?([.\\d]+))?/g,\n\t\t\t\tfunction(match, n, v1, v2, rv) {\n\t\t\t\t\tif (!agent.chrome) {\n\t\t\t\t\t\tvar v = n === 'opera' ? v2 :\n\t\t\t\t\t\t\t\t/^(node|trident)$/.test(n) ? rv : v1;\n\t\t\t\t\t\tagent.version = v;\n\t\t\t\t\t\tagent.versionNumber = parseFloat(v);\n\t\t\t\t\t\tn = n === 'trident' ? 'msie' : n;\n\t\t\t\t\t\tagent.name = n;\n\t\t\t\t\t\tagent[n] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (agent.chrome)\n\t\t\t\tdelete agent.webkit;\n\t\t\tif (agent.atom)\n\t\t\t\tdelete agent.chrome;\n\t\t}\n\t},\n\n\tversion: \"0.11.5\",\n\n\tgetView: function() {\n\t\tvar project = this.project;\n\t\treturn project && project._view;\n\t},\n\n\tgetPaper: function() {\n\t\treturn this;\n\t},\n\n\texecute: function(code, options) {\n\t\tpaper.PaperScript.execute(code, this, options);\n\t\tView.updateFocus();\n\t},\n\n\tinstall: function(scope) {\n\t\tvar that = this;\n\t\tBase.each(['project', 'view', 'tool'], function(key) {\n\t\t\tBase.define(scope, key, {\n\t\t\t\tconfigurable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn that[key];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tfor (var key in this)\n\t\t\tif (!/^_/.test(key) && this[key])\n\t\t\t\tscope[key] = this[key];\n\t},\n\n\tsetup: function(element) {\n\t\tpaper = this;\n\t\tthis.project = new Project(element);\n\t\treturn this;\n\t},\n\n\tcreateCanvas: function(width, height) {\n\t\treturn CanvasProvider.getCanvas(width, height);\n\t},\n\n\tactivate: function() {\n\t\tpaper = this;\n\t},\n\n\tclear: function() {\n\t\tvar projects = this.projects,\n\t\t\ttools = this.tools;\n\t\tfor (var i = projects.length - 1; i >= 0; i--)\n\t\t\tprojects[i].remove();\n\t\tfor (var i = tools.length - 1; i >= 0; i--)\n\t\t\ttools[i].remove();\n\t},\n\n\tremove: function() {\n\t\tthis.clear();\n\t\tdelete PaperScope._scopes[this._id];\n\t},\n\n\tstatics: new function() {\n\t\tfunction handleAttribute(name) {\n\t\t\tname += 'Attribute';\n\t\t\treturn function(el, attr) {\n\t\t\t\treturn el[name](attr) || el[name]('data-paper-' + attr);\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\t_scopes: {},\n\t\t\t_id: 0,\n\n\t\t\tget: function(id) {\n\t\t\t\treturn this._scopes[id] || null;\n\t\t\t},\n\n\t\t\tgetAttribute: handleAttribute('get'),\n\t\t\thasAttribute: handleAttribute('has')\n\t\t};\n\t}\n});\n\nvar PaperScopeItem = Base.extend(Emitter, {\n\n\tinitialize: function(activate) {\n\t\tthis._scope = paper;\n\t\tthis._index = this._scope[this._list].push(this) - 1;\n\t\tif (activate || !this._scope[this._reference])\n\t\t\tthis.activate();\n\t},\n\n\tactivate: function() {\n\t\tif (!this._scope)\n\t\t\treturn false;\n\t\tvar prev = this._scope[this._reference];\n\t\tif (prev && prev !== this)\n\t\t\tprev.emit('deactivate');\n\t\tthis._scope[this._reference] = this;\n\t\tthis.emit('activate', prev);\n\t\treturn true;\n\t},\n\n\tisActive: function() {\n\t\treturn this._scope[this._reference] === this;\n\t},\n\n\tremove: function() {\n\t\tif (this._index == null)\n\t\t\treturn false;\n\t\tBase.splice(this._scope[this._list], null, this._index, 1);\n\t\tif (this._scope[this._reference] == this)\n\t\t\tthis._scope[this._reference] = null;\n\t\tthis._scope = null;\n\t\treturn true;\n\t},\n\n\tgetView: function() {\n\t\treturn this._scope.getView();\n\t}\n});\n\nvar Formatter = Base.extend({\n\tinitialize: function(precision) {\n\t\tthis.precision = Base.pick(precision, 5);\n\t\tthis.multiplier = Math.pow(10, this.precision);\n\t},\n\n\tnumber: function(val) {\n\t\treturn this.precision < 16\n\t\t\t\t? Math.round(val * this.multiplier) / this.multiplier : val;\n\t},\n\n\tpair: function(val1, val2, separator) {\n\t\treturn this.number(val1) + (separator || ',') + this.number(val2);\n\t},\n\n\tpoint: function(val, separator) {\n\t\treturn this.number(val.x) + (separator || ',') + this.number(val.y);\n\t},\n\n\tsize: function(val, separator) {\n\t\treturn this.number(val.width) + (separator || ',')\n\t\t\t\t+ this.number(val.height);\n\t},\n\n\trectangle: function(val, separator) {\n\t\treturn this.point(val, separator) + (separator || ',')\n\t\t\t\t+ this.size(val, separator);\n\t}\n});\n\nFormatter.instance = new Formatter();\n\nvar Numerical = new function() {\n\n\tvar abscissas = [\n\t\t[  0.5773502691896257645091488],\n\t\t[0,0.7745966692414833770358531],\n\t\t[  0.3399810435848562648026658,0.8611363115940525752239465],\n\t\t[0,0.5384693101056830910363144,0.9061798459386639927976269],\n\t\t[  0.2386191860831969086305017,0.6612093864662645136613996,0.9324695142031520278123016],\n\t\t[0,0.4058451513773971669066064,0.7415311855993944398638648,0.9491079123427585245261897],\n\t\t[  0.1834346424956498049394761,0.5255324099163289858177390,0.7966664774136267395915539,0.9602898564975362316835609],\n\t\t[0,0.3242534234038089290385380,0.6133714327005903973087020,0.8360311073266357942994298,0.9681602395076260898355762],\n\t\t[  0.1488743389816312108848260,0.4333953941292471907992659,0.6794095682990244062343274,0.8650633666889845107320967,0.9739065285171717200779640],\n\t\t[0,0.2695431559523449723315320,0.5190961292068118159257257,0.7301520055740493240934163,0.8870625997680952990751578,0.9782286581460569928039380],\n\t\t[  0.1252334085114689154724414,0.3678314989981801937526915,0.5873179542866174472967024,0.7699026741943046870368938,0.9041172563704748566784659,0.9815606342467192506905491],\n\t\t[0,0.2304583159551347940655281,0.4484927510364468528779129,0.6423493394403402206439846,0.8015780907333099127942065,0.9175983992229779652065478,0.9841830547185881494728294],\n\t\t[  0.1080549487073436620662447,0.3191123689278897604356718,0.5152486363581540919652907,0.6872929048116854701480198,0.8272013150697649931897947,0.9284348836635735173363911,0.9862838086968123388415973],\n\t\t[0,0.2011940939974345223006283,0.3941513470775633698972074,0.5709721726085388475372267,0.7244177313601700474161861,0.8482065834104272162006483,0.9372733924007059043077589,0.9879925180204854284895657],\n\t\t[  0.0950125098376374401853193,0.2816035507792589132304605,0.4580167776572273863424194,0.6178762444026437484466718,0.7554044083550030338951012,0.8656312023878317438804679,0.9445750230732325760779884,0.9894009349916499325961542]\n\t];\n\n\tvar weights = [\n\t\t[1],\n\t\t[0.8888888888888888888888889,0.5555555555555555555555556],\n\t\t[0.6521451548625461426269361,0.3478548451374538573730639],\n\t\t[0.5688888888888888888888889,0.4786286704993664680412915,0.2369268850561890875142640],\n\t\t[0.4679139345726910473898703,0.3607615730481386075698335,0.1713244923791703450402961],\n\t\t[0.4179591836734693877551020,0.3818300505051189449503698,0.2797053914892766679014678,0.1294849661688696932706114],\n\t\t[0.3626837833783619829651504,0.3137066458778872873379622,0.2223810344533744705443560,0.1012285362903762591525314],\n\t\t[0.3302393550012597631645251,0.3123470770400028400686304,0.2606106964029354623187429,0.1806481606948574040584720,0.0812743883615744119718922],\n\t\t[0.2955242247147528701738930,0.2692667193099963550912269,0.2190863625159820439955349,0.1494513491505805931457763,0.0666713443086881375935688],\n\t\t[0.2729250867779006307144835,0.2628045445102466621806889,0.2331937645919904799185237,0.1862902109277342514260976,0.1255803694649046246346943,0.0556685671161736664827537],\n\t\t[0.2491470458134027850005624,0.2334925365383548087608499,0.2031674267230659217490645,0.1600783285433462263346525,0.1069393259953184309602547,0.0471753363865118271946160],\n\t\t[0.2325515532308739101945895,0.2262831802628972384120902,0.2078160475368885023125232,0.1781459807619457382800467,0.1388735102197872384636018,0.0921214998377284479144218,0.0404840047653158795200216],\n\t\t[0.2152638534631577901958764,0.2051984637212956039659241,0.1855383974779378137417166,0.1572031671581935345696019,0.1215185706879031846894148,0.0801580871597602098056333,0.0351194603317518630318329],\n\t\t[0.2025782419255612728806202,0.1984314853271115764561183,0.1861610000155622110268006,0.1662692058169939335532009,0.1395706779261543144478048,0.1071592204671719350118695,0.0703660474881081247092674,0.0307532419961172683546284],\n\t\t[0.1894506104550684962853967,0.1826034150449235888667637,0.1691565193950025381893121,0.1495959888165767320815017,0.1246289712555338720524763,0.0951585116824927848099251,0.0622535239386478928628438,0.0271524594117540948517806]\n\t];\n\n\tvar abs = Math.abs,\n\t\tsqrt = Math.sqrt,\n\t\tpow = Math.pow,\n\t\tlog2 = Math.log2 || function(x) {\n\t\t\treturn Math.log(x) * Math.LOG2E;\n\t\t},\n\t\tEPSILON = 1e-12,\n\t\tMACHINE_EPSILON = 1.12e-16;\n\n\tfunction clamp(value, min, max) {\n\t\treturn value < min ? min : value > max ? max : value;\n\t}\n\n\tfunction getDiscriminant(a, b, c) {\n\t\tfunction split(v) {\n\t\t\tvar x = v * 134217729,\n\t\t\t\ty = v - x,\n\t\t\t\thi = y + x,\n\t\t\t\tlo = v - hi;\n\t\t\treturn [hi, lo];\n\t\t}\n\n\t\tvar D = b * b - a * c,\n\t\t\tE = b * b + a * c;\n\t\tif (abs(D) * 3 < E) {\n\t\t\tvar ad = split(a),\n\t\t\t\tbd = split(b),\n\t\t\t\tcd = split(c),\n\t\t\t\tp = b * b,\n\t\t\t\tdp = (bd[0] * bd[0] - p + 2 * bd[0] * bd[1]) + bd[1] * bd[1],\n\t\t\t\tq = a * c,\n\t\t\t\tdq = (ad[0] * cd[0] - q + ad[0] * cd[1] + ad[1] * cd[0])\n\t\t\t\t\t\t+ ad[1] * cd[1];\n\t\t\tD = (p - q) + (dp - dq);\n\t\t}\n\t\treturn D;\n\t}\n\n\tfunction getNormalizationFactor() {\n\t\tvar norm = Math.max.apply(Math, arguments);\n\t\treturn norm && (norm < 1e-8 || norm > 1e8)\n\t\t\t\t? pow(2, -Math.round(log2(norm)))\n\t\t\t\t: 0;\n\t}\n\n\treturn {\n\t\tEPSILON: EPSILON,\n\t\tMACHINE_EPSILON: MACHINE_EPSILON,\n\t\tCURVETIME_EPSILON: 1e-8,\n\t\tGEOMETRIC_EPSILON: 1e-7,\n\t\tTRIGONOMETRIC_EPSILON: 1e-8,\n\t\tKAPPA: 4 * (sqrt(2) - 1) / 3,\n\n\t\tisZero: function(val) {\n\t\t\treturn val >= -EPSILON && val <= EPSILON;\n\t\t},\n\n\t\tclamp: clamp,\n\n\t\tintegrate: function(f, a, b, n) {\n\t\t\tvar x = abscissas[n - 2],\n\t\t\t\tw = weights[n - 2],\n\t\t\t\tA = (b - a) * 0.5,\n\t\t\t\tB = A + a,\n\t\t\t\ti = 0,\n\t\t\t\tm = (n + 1) >> 1,\n\t\t\t\tsum = n & 1 ? w[i++] * f(B) : 0;\n\t\t\twhile (i < m) {\n\t\t\t\tvar Ax = A * x[i];\n\t\t\t\tsum += w[i++] * (f(B + Ax) + f(B - Ax));\n\t\t\t}\n\t\t\treturn A * sum;\n\t\t},\n\n\t\tfindRoot: function(f, df, x, a, b, n, tolerance) {\n\t\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tvar fx = f(x),\n\t\t\t\t\tdx = fx / df(x),\n\t\t\t\t\tnx = x - dx;\n\t\t\t\tif (abs(dx) < tolerance) {\n\t\t\t\t\tx = nx;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (fx > 0) {\n\t\t\t\t\tb = x;\n\t\t\t\t\tx = nx <= a ? (a + b) * 0.5 : nx;\n\t\t\t\t} else {\n\t\t\t\t\ta = x;\n\t\t\t\t\tx = nx >= b ? (a + b) * 0.5 : nx;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn clamp(x, a, b);\n\t\t},\n\n\t\tsolveQuadratic: function(a, b, c, roots, min, max) {\n\t\t\tvar x1, x2 = Infinity;\n\t\t\tif (abs(a) < EPSILON) {\n\t\t\t\tif (abs(b) < EPSILON)\n\t\t\t\t\treturn abs(c) < EPSILON ? -1 : 0;\n\t\t\t\tx1 = -c / b;\n\t\t\t} else {\n\t\t\t\tb *= -0.5;\n\t\t\t\tvar D = getDiscriminant(a, b, c);\n\t\t\t\tif (D && abs(D) < MACHINE_EPSILON) {\n\t\t\t\t\tvar f = getNormalizationFactor(abs(a), abs(b), abs(c));\n\t\t\t\t\tif (f) {\n\t\t\t\t\t\ta *= f;\n\t\t\t\t\t\tb *= f;\n\t\t\t\t\t\tc *= f;\n\t\t\t\t\t\tD = getDiscriminant(a, b, c);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (D >= -MACHINE_EPSILON) {\n\t\t\t\t\tvar Q = D < 0 ? 0 : sqrt(D),\n\t\t\t\t\t\tR = b + (b < 0 ? -Q : Q);\n\t\t\t\t\tif (R === 0) {\n\t\t\t\t\t\tx1 = c / a;\n\t\t\t\t\t\tx2 = -x1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx1 = R / a;\n\t\t\t\t\t\tx2 = c / R;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar count = 0,\n\t\t\t\tboundless = min == null,\n\t\t\t\tminB = min - EPSILON,\n\t\t\t\tmaxB = max + EPSILON;\n\t\t\tif (isFinite(x1) && (boundless || x1 > minB && x1 < maxB))\n\t\t\t\troots[count++] = boundless ? x1 : clamp(x1, min, max);\n\t\t\tif (x2 !== x1\n\t\t\t\t\t&& isFinite(x2) && (boundless || x2 > minB && x2 < maxB))\n\t\t\t\troots[count++] = boundless ? x2 : clamp(x2, min, max);\n\t\t\treturn count;\n\t\t},\n\n\t\tsolveCubic: function(a, b, c, d, roots, min, max) {\n\t\t\tvar f = getNormalizationFactor(abs(a), abs(b), abs(c), abs(d)),\n\t\t\t\tx, b1, c2, qd, q;\n\t\t\tif (f) {\n\t\t\t\ta *= f;\n\t\t\t\tb *= f;\n\t\t\t\tc *= f;\n\t\t\t\td *= f;\n\t\t\t}\n\n\t\t\tfunction evaluate(x0) {\n\t\t\t\tx = x0;\n\t\t\t\tvar tmp = a * x;\n\t\t\t\tb1 = tmp + b;\n\t\t\t\tc2 = b1 * x + c;\n\t\t\t\tqd = (tmp + b1) * x + c2;\n\t\t\t\tq = c2 * x + d;\n\t\t\t}\n\n\t\t\tif (abs(a) < EPSILON) {\n\t\t\t\ta = b;\n\t\t\t\tb1 = c;\n\t\t\t\tc2 = d;\n\t\t\t\tx = Infinity;\n\t\t\t} else if (abs(d) < EPSILON) {\n\t\t\t\tb1 = b;\n\t\t\t\tc2 = c;\n\t\t\t\tx = 0;\n\t\t\t} else {\n\t\t\t\tevaluate(-(b / a) / 3);\n\t\t\t\tvar t = q / a,\n\t\t\t\t\tr = pow(abs(t), 1/3),\n\t\t\t\t\ts = t < 0 ? -1 : 1,\n\t\t\t\t\ttd = -qd / a,\n\t\t\t\t\trd = td > 0 ? 1.324717957244746 * Math.max(r, sqrt(td)) : r,\n\t\t\t\t\tx0 = x - s * rd;\n\t\t\t\tif (x0 !== x) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tevaluate(x0);\n\t\t\t\t\t\tx0 = qd === 0 ? x : x - q / qd / (1 + MACHINE_EPSILON);\n\t\t\t\t\t} while (s * x0 > s * x);\n\t\t\t\t\tif (abs(a) * x * x > abs(d / x)) {\n\t\t\t\t\t\tc2 = -d / x;\n\t\t\t\t\t\tb1 = (c2 - c) / x;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar count = Numerical.solveQuadratic(a, b1, c2, roots, min, max),\n\t\t\t\tboundless = min == null;\n\t\t\tif (isFinite(x) && (count === 0\n\t\t\t\t\t|| count > 0 && x !== roots[0] && x !== roots[1])\n\t\t\t\t\t&& (boundless || x > min - EPSILON && x < max + EPSILON))\n\t\t\t\troots[count++] = boundless ? x : clamp(x, min, max);\n\t\t\treturn count;\n\t\t}\n\t};\n};\n\nvar UID = {\n\t_id: 1,\n\t_pools: {},\n\n\tget: function(name) {\n\t\tif (name) {\n\t\t\tvar pool = this._pools[name];\n\t\t\tif (!pool)\n\t\t\t\tpool = this._pools[name] = { _id: 1 };\n\t\t\treturn pool._id++;\n\t\t} else {\n\t\t\treturn this._id++;\n\t\t}\n\t}\n};\n\nvar Point = Base.extend({\n\t_class: 'Point',\n\t_readIndex: true,\n\n\tinitialize: function Point(arg0, arg1) {\n\t\tvar type = typeof arg0,\n\t\t\treading = this.__read,\n\t\t\tread = 0;\n\t\tif (type === 'number') {\n\t\t\tvar hasY = typeof arg1 === 'number';\n\t\t\tthis._set(arg0, hasY ? arg1 : arg0);\n\t\t\tif (reading)\n\t\t\t\tread = hasY ? 2 : 1;\n\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\tthis._set(0, 0);\n\t\t\tif (reading)\n\t\t\t\tread = arg0 === null ? 1 : 0;\n\t\t} else {\n\t\t\tvar obj = type === 'string' ? arg0.split(/[\\s,]+/) || [] : arg0;\n\t\t\tread = 1;\n\t\t\tif (Array.isArray(obj)) {\n\t\t\t\tthis._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));\n\t\t\t} else if ('x' in obj) {\n\t\t\t\tthis._set(obj.x || 0, obj.y || 0);\n\t\t\t} else if ('width' in obj) {\n\t\t\t\tthis._set(obj.width || 0, obj.height || 0);\n\t\t\t} else if ('angle' in obj) {\n\t\t\t\tthis._set(obj.length || 0, 0);\n\t\t\t\tthis.setAngle(obj.angle || 0);\n\t\t\t} else {\n\t\t\t\tthis._set(0, 0);\n\t\t\t\tread = 0;\n\t\t\t}\n\t\t}\n\t\tif (reading)\n\t\t\tthis.__read = read;\n\t\treturn this;\n\t},\n\n\tset: '#initialize',\n\n\t_set: function(x, y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t},\n\n\tequals: function(point) {\n\t\treturn this === point || point\n\t\t\t\t&& (this.x === point.x && this.y === point.y\n\t\t\t\t\t|| Array.isArray(point)\n\t\t\t\t\t\t&& this.x === point[0] && this.y === point[1])\n\t\t\t\t|| false;\n\t},\n\n\tclone: function() {\n\t\treturn new Point(this.x, this.y);\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '{ x: ' + f.number(this.x) + ', y: ' + f.number(this.y) + ' }';\n\t},\n\n\t_serialize: function(options) {\n\t\tvar f = options.formatter;\n\t\treturn [f.number(this.x), f.number(this.y)];\n\t},\n\n\tgetLength: function() {\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t},\n\n\tsetLength: function(length) {\n\t\tif (this.isZero()) {\n\t\t\tvar angle = this._angle || 0;\n\t\t\tthis._set(\n\t\t\t\tMath.cos(angle) * length,\n\t\t\t\tMath.sin(angle) * length\n\t\t\t);\n\t\t} else {\n\t\t\tvar scale = length / this.getLength();\n\t\t\tif (Numerical.isZero(scale))\n\t\t\t\tthis.getAngle();\n\t\t\tthis._set(\n\t\t\t\tthis.x * scale,\n\t\t\t\tthis.y * scale\n\t\t\t);\n\t\t}\n\t},\n\tgetAngle: function() {\n\t\treturn this.getAngleInRadians.apply(this, arguments) * 180 / Math.PI;\n\t},\n\n\tsetAngle: function(angle) {\n\t\tthis.setAngleInRadians.call(this, angle * Math.PI / 180);\n\t},\n\n\tgetAngleInDegrees: '#getAngle',\n\tsetAngleInDegrees: '#setAngle',\n\n\tgetAngleInRadians: function() {\n\t\tif (!arguments.length) {\n\t\t\treturn this.isZero()\n\t\t\t\t\t? this._angle || 0\n\t\t\t\t\t: this._angle = Math.atan2(this.y, this.x);\n\t\t} else {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\tdiv = this.getLength() * point.getLength();\n\t\t\tif (Numerical.isZero(div)) {\n\t\t\t\treturn NaN;\n\t\t\t} else {\n\t\t\t\tvar a = this.dot(point) / div;\n\t\t\t\treturn Math.acos(a < -1 ? -1 : a > 1 ? 1 : a);\n\t\t\t}\n\t\t}\n\t},\n\n\tsetAngleInRadians: function(angle) {\n\t\tthis._angle = angle;\n\t\tif (!this.isZero()) {\n\t\t\tvar length = this.getLength();\n\t\t\tthis._set(\n\t\t\t\tMath.cos(angle) * length,\n\t\t\t\tMath.sin(angle) * length\n\t\t\t);\n\t\t}\n\t},\n\n\tgetQuadrant: function() {\n\t\treturn this.x >= 0 ? this.y >= 0 ? 1 : 4 : this.y >= 0 ? 2 : 3;\n\t}\n}, {\n\tbeans: false,\n\n\tgetDirectedAngle: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn Math.atan2(this.cross(point), this.dot(point)) * 180 / Math.PI;\n\t},\n\n\tgetDistance: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tx = point.x - this.x,\n\t\t\ty = point.y - this.y,\n\t\t\td = x * x + y * y,\n\t\t\tsquared = Base.read(arguments);\n\t\treturn squared ? d : Math.sqrt(d);\n\t},\n\n\tnormalize: function(length) {\n\t\tif (length === undefined)\n\t\t\tlength = 1;\n\t\tvar current = this.getLength(),\n\t\t\tscale = current !== 0 ? length / current : 0,\n\t\t\tpoint = new Point(this.x * scale, this.y * scale);\n\t\tif (scale >= 0)\n\t\t\tpoint._angle = this._angle;\n\t\treturn point;\n\t},\n\n\trotate: function(angle, center) {\n\t\tif (angle === 0)\n\t\t\treturn this.clone();\n\t\tangle = angle * Math.PI / 180;\n\t\tvar point = center ? this.subtract(center) : this,\n\t\t\tsin = Math.sin(angle),\n\t\t\tcos = Math.cos(angle);\n\t\tpoint = new Point(\n\t\t\tpoint.x * cos - point.y * sin,\n\t\t\tpoint.x * sin + point.y * cos\n\t\t);\n\t\treturn center ? point.add(center) : point;\n\t},\n\n\ttransform: function(matrix) {\n\t\treturn matrix ? matrix._transformPoint(this) : this;\n\t},\n\n\tadd: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x + point.x, this.y + point.y);\n\t},\n\n\tsubtract: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x - point.x, this.y - point.y);\n\t},\n\n\tmultiply: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x * point.x, this.y * point.y);\n\t},\n\n\tdivide: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x / point.x, this.y / point.y);\n\t},\n\n\tmodulo: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x % point.x, this.y % point.y);\n\t},\n\n\tnegate: function() {\n\t\treturn new Point(-this.x, -this.y);\n\t},\n\n\tisInside: function() {\n\t\treturn Rectangle.read(arguments).contains(this);\n\t},\n\n\tisClose: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\ttolerance = Base.read(arguments);\n\t\treturn this.getDistance(point) <= tolerance;\n\t},\n\n\tisCollinear: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn Point.isCollinear(this.x, this.y, point.x, point.y);\n\t},\n\n\tisColinear: '#isCollinear',\n\n\tisOrthogonal: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn Point.isOrthogonal(this.x, this.y, point.x, point.y);\n\t},\n\n\tisZero: function() {\n\t\tvar isZero = Numerical.isZero;\n\t\treturn isZero(this.x) && isZero(this.y);\n\t},\n\n\tisNaN: function() {\n\t\treturn isNaN(this.x) || isNaN(this.y);\n\t},\n\n\tisInQuadrant: function(q) {\n\t\treturn this.x * (q > 1 && q < 4 ? -1 : 1) >= 0\n\t\t\t&& this.y * (q > 2 ? -1 : 1) >= 0;\n\t},\n\n\tdot: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn this.x * point.x + this.y * point.y;\n\t},\n\n\tcross: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn this.x * point.y - this.y * point.x;\n\t},\n\n\tproject: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tscale = point.isZero() ? 0 : this.dot(point) / point.dot(point);\n\t\treturn new Point(\n\t\t\tpoint.x * scale,\n\t\t\tpoint.y * scale\n\t\t);\n\t},\n\n\tstatics: {\n\t\tmin: function() {\n\t\t\tvar point1 = Point.read(arguments),\n\t\t\t\tpoint2 = Point.read(arguments);\n\t\t\treturn new Point(\n\t\t\t\tMath.min(point1.x, point2.x),\n\t\t\t\tMath.min(point1.y, point2.y)\n\t\t\t);\n\t\t},\n\n\t\tmax: function() {\n\t\t\tvar point1 = Point.read(arguments),\n\t\t\t\tpoint2 = Point.read(arguments);\n\t\t\treturn new Point(\n\t\t\t\tMath.max(point1.x, point2.x),\n\t\t\t\tMath.max(point1.y, point2.y)\n\t\t\t);\n\t\t},\n\n\t\trandom: function() {\n\t\t\treturn new Point(Math.random(), Math.random());\n\t\t},\n\n\t\tisCollinear: function(x1, y1, x2, y2) {\n\t\t\treturn Math.abs(x1 * y2 - y1 * x2)\n\t\t\t\t\t<= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2))\n\t\t\t\t\t\t* 1e-8;\n\t\t},\n\n\t\tisOrthogonal: function(x1, y1, x2, y2) {\n\t\t\treturn Math.abs(x1 * x2 + y1 * y2)\n\t\t\t\t\t<= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2))\n\t\t\t\t\t\t* 1e-8;\n\t\t}\n\t}\n}, Base.each(['round', 'ceil', 'floor', 'abs'], function(key) {\n\tvar op = Math[key];\n\tthis[key] = function() {\n\t\treturn new Point(op(this.x), op(this.y));\n\t};\n}, {}));\n\nvar LinkedPoint = Point.extend({\n\tinitialize: function Point(x, y, owner, setter) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._owner = owner;\n\t\tthis._setter = setter;\n\t},\n\n\t_set: function(x, y, _dontNotify) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tif (!_dontNotify)\n\t\t\tthis._owner[this._setter](this);\n\t\treturn this;\n\t},\n\n\tgetX: function() {\n\t\treturn this._x;\n\t},\n\n\tsetX: function(x) {\n\t\tthis._x = x;\n\t\tthis._owner[this._setter](this);\n\t},\n\n\tgetY: function() {\n\t\treturn this._y;\n\t},\n\n\tsetY: function(y) {\n\t\tthis._y = y;\n\t\tthis._owner[this._setter](this);\n\t},\n\n\tisSelected: function() {\n\t\treturn !!(this._owner._selection & this._getSelection());\n\t},\n\n\tsetSelected: function(selected) {\n\t\tthis._owner._changeSelection(this._getSelection(), selected);\n\t},\n\n\t_getSelection: function() {\n\t\treturn this._setter === 'setPosition' ? 4 : 0;\n\t}\n});\n\nvar Size = Base.extend({\n\t_class: 'Size',\n\t_readIndex: true,\n\n\tinitialize: function Size(arg0, arg1) {\n\t\tvar type = typeof arg0,\n\t\t\treading = this.__read,\n\t\t\tread = 0;\n\t\tif (type === 'number') {\n\t\t\tvar hasHeight = typeof arg1 === 'number';\n\t\t\tthis._set(arg0, hasHeight ? arg1 : arg0);\n\t\t\tif (reading)\n\t\t\t\tread = hasHeight ? 2 : 1;\n\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\tthis._set(0, 0);\n\t\t\tif (reading)\n\t\t\t\tread = arg0 === null ? 1 : 0;\n\t\t} else {\n\t\t\tvar obj = type === 'string' ? arg0.split(/[\\s,]+/) || [] : arg0;\n\t\t\tread = 1;\n\t\t\tif (Array.isArray(obj)) {\n\t\t\t\tthis._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));\n\t\t\t} else if ('width' in obj) {\n\t\t\t\tthis._set(obj.width || 0, obj.height || 0);\n\t\t\t} else if ('x' in obj) {\n\t\t\t\tthis._set(obj.x || 0, obj.y || 0);\n\t\t\t} else {\n\t\t\t\tthis._set(0, 0);\n\t\t\t\tread = 0;\n\t\t\t}\n\t\t}\n\t\tif (reading)\n\t\t\tthis.__read = read;\n\t\treturn this;\n\t},\n\n\tset: '#initialize',\n\n\t_set: function(width, height) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\treturn this;\n\t},\n\n\tequals: function(size) {\n\t\treturn size === this || size && (this.width === size.width\n\t\t\t\t&& this.height === size.height\n\t\t\t\t|| Array.isArray(size) && this.width === size[0]\n\t\t\t\t\t&& this.height === size[1]) || false;\n\t},\n\n\tclone: function() {\n\t\treturn new Size(this.width, this.height);\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '{ width: ' + f.number(this.width)\n\t\t\t\t+ ', height: ' + f.number(this.height) + ' }';\n\t},\n\n\t_serialize: function(options) {\n\t\tvar f = options.formatter;\n\t\treturn [f.number(this.width),\n\t\t\t\tf.number(this.height)];\n\t},\n\n\tadd: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width + size.width, this.height + size.height);\n\t},\n\n\tsubtract: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width - size.width, this.height - size.height);\n\t},\n\n\tmultiply: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width * size.width, this.height * size.height);\n\t},\n\n\tdivide: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width / size.width, this.height / size.height);\n\t},\n\n\tmodulo: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width % size.width, this.height % size.height);\n\t},\n\n\tnegate: function() {\n\t\treturn new Size(-this.width, -this.height);\n\t},\n\n\tisZero: function() {\n\t\tvar isZero = Numerical.isZero;\n\t\treturn isZero(this.width) && isZero(this.height);\n\t},\n\n\tisNaN: function() {\n\t\treturn isNaN(this.width) || isNaN(this.height);\n\t},\n\n\tstatics: {\n\t\tmin: function(size1, size2) {\n\t\t\treturn new Size(\n\t\t\t\tMath.min(size1.width, size2.width),\n\t\t\t\tMath.min(size1.height, size2.height));\n\t\t},\n\n\t\tmax: function(size1, size2) {\n\t\t\treturn new Size(\n\t\t\t\tMath.max(size1.width, size2.width),\n\t\t\t\tMath.max(size1.height, size2.height));\n\t\t},\n\n\t\trandom: function() {\n\t\t\treturn new Size(Math.random(), Math.random());\n\t\t}\n\t}\n}, Base.each(['round', 'ceil', 'floor', 'abs'], function(key) {\n\tvar op = Math[key];\n\tthis[key] = function() {\n\t\treturn new Size(op(this.width), op(this.height));\n\t};\n}, {}));\n\nvar LinkedSize = Size.extend({\n\tinitialize: function Size(width, height, owner, setter) {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._owner = owner;\n\t\tthis._setter = setter;\n\t},\n\n\t_set: function(width, height, _dontNotify) {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tif (!_dontNotify)\n\t\t\tthis._owner[this._setter](this);\n\t\treturn this;\n\t},\n\n\tgetWidth: function() {\n\t\treturn this._width;\n\t},\n\n\tsetWidth: function(width) {\n\t\tthis._width = width;\n\t\tthis._owner[this._setter](this);\n\t},\n\n\tgetHeight: function() {\n\t\treturn this._height;\n\t},\n\n\tsetHeight: function(height) {\n\t\tthis._height = height;\n\t\tthis._owner[this._setter](this);\n\t}\n});\n\nvar Rectangle = Base.extend({\n\t_class: 'Rectangle',\n\t_readIndex: true,\n\tbeans: true,\n\n\tinitialize: function Rectangle(arg0, arg1, arg2, arg3) {\n\t\tvar type = typeof arg0,\n\t\t\tread;\n\t\tif (type === 'number') {\n\t\t\tthis._set(arg0, arg1, arg2, arg3);\n\t\t\tread = 4;\n\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\tthis._set(0, 0, 0, 0);\n\t\t\tread = arg0 === null ? 1 : 0;\n\t\t} else if (arguments.length === 1) {\n\t\t\tif (Array.isArray(arg0)) {\n\t\t\t\tthis._set.apply(this, arg0);\n\t\t\t\tread = 1;\n\t\t\t} else if (arg0.x !== undefined || arg0.width !== undefined) {\n\t\t\t\tthis._set(arg0.x || 0, arg0.y || 0,\n\t\t\t\t\t\targ0.width || 0, arg0.height || 0);\n\t\t\t\tread = 1;\n\t\t\t} else if (arg0.from === undefined && arg0.to === undefined) {\n\t\t\t\tthis._set(0, 0, 0, 0);\n\t\t\t\tBase.filter(this, arg0);\n\t\t\t\tread = 1;\n\t\t\t}\n\t\t}\n\t\tif (read === undefined) {\n\t\t\tvar frm = Point.readNamed(arguments, 'from'),\n\t\t\t\tnext = Base.peek(arguments),\n\t\t\t\tx = frm.x,\n\t\t\t\ty = frm.y,\n\t\t\t\twidth,\n\t\t\t\theight;\n\t\t\tif (next && next.x !== undefined\n\t\t\t\t\t|| Base.hasNamed(arguments, 'to')) {\n\t\t\t\tvar to = Point.readNamed(arguments, 'to');\n\t\t\t\twidth = to.x - x;\n\t\t\t\theight = to.y - y;\n\t\t\t\tif (width < 0) {\n\t\t\t\t\tx = to.x;\n\t\t\t\t\twidth = -width;\n\t\t\t\t}\n\t\t\t\tif (height < 0) {\n\t\t\t\t\ty = to.y;\n\t\t\t\t\theight = -height;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar size = Size.read(arguments);\n\t\t\t\twidth = size.width;\n\t\t\t\theight = size.height;\n\t\t\t}\n\t\t\tthis._set(x, y, width, height);\n\t\t\tread = arguments.__index;\n\t\t\tvar filtered = arguments.__filtered;\n\t\t\tif (filtered)\n\t\t\t\tthis.__filtered = filtered;\n\t\t}\n\t\tif (this.__read)\n\t\t\tthis.__read = read;\n\t\treturn this;\n\t},\n\n\tset: '#initialize',\n\n\t_set: function(x, y, width, height) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\treturn this;\n\t},\n\n\tclone: function() {\n\t\treturn new Rectangle(this.x, this.y, this.width, this.height);\n\t},\n\n\tequals: function(rect) {\n\t\tvar rt = Base.isPlainValue(rect)\n\t\t\t\t? Rectangle.read(arguments)\n\t\t\t\t: rect;\n\t\treturn rt === this\n\t\t\t\t|| rt && this.x === rt.x && this.y === rt.y\n\t\t\t\t\t&& this.width === rt.width && this.height === rt.height\n\t\t\t\t|| false;\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '{ x: ' + f.number(this.x)\n\t\t\t\t+ ', y: ' + f.number(this.y)\n\t\t\t\t+ ', width: ' + f.number(this.width)\n\t\t\t\t+ ', height: ' + f.number(this.height)\n\t\t\t\t+ ' }';\n\t},\n\n\t_serialize: function(options) {\n\t\tvar f = options.formatter;\n\t\treturn [f.number(this.x),\n\t\t\t\tf.number(this.y),\n\t\t\t\tf.number(this.width),\n\t\t\t\tf.number(this.height)];\n\t},\n\n\tgetPoint: function(_dontLink) {\n\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\treturn new ctor(this.x, this.y, this, 'setPoint');\n\t},\n\n\tsetPoint: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis.x = point.x;\n\t\tthis.y = point.y;\n\t},\n\n\tgetSize: function(_dontLink) {\n\t\tvar ctor = _dontLink ? Size : LinkedSize;\n\t\treturn new ctor(this.width, this.height, this, 'setSize');\n\t},\n\n\t_fw: 1,\n\t_fh: 1,\n\n\tsetSize: function() {\n\t\tvar size = Size.read(arguments),\n\t\t\tsx = this._sx,\n\t\t\tsy = this._sy,\n\t\t\tw = size.width,\n\t\t\th = size.height;\n\t\tif (sx) {\n\t\t\tthis.x += (this.width - w) * sx;\n\t\t}\n\t\tif (sy) {\n\t\t\tthis.y += (this.height - h) * sy;\n\t\t}\n\t\tthis.width = w;\n\t\tthis.height = h;\n\t\tthis._fw = this._fh = 1;\n\t},\n\n\tgetLeft: function() {\n\t\treturn this.x;\n\t},\n\n\tsetLeft: function(left) {\n\t\tif (!this._fw) {\n\t\t\tvar amount = left - this.x;\n\t\t\tthis.width -= this._sx === 0.5 ? amount * 2 : amount;\n\t\t}\n\t\tthis.x = left;\n\t\tthis._sx = this._fw = 0;\n\t},\n\n\tgetTop: function() {\n\t\treturn this.y;\n\t},\n\n\tsetTop: function(top) {\n\t\tif (!this._fh) {\n\t\t\tvar amount = top - this.y;\n\t\t\tthis.height -= this._sy === 0.5 ? amount * 2 : amount;\n\t\t}\n\t\tthis.y = top;\n\t\tthis._sy = this._fh = 0;\n\t},\n\n\tgetRight: function() {\n\t\treturn this.x + this.width;\n\t},\n\n\tsetRight: function(right) {\n\t\tif (!this._fw) {\n\t\t\tvar amount = right - this.x;\n\t\t\tthis.width = this._sx === 0.5 ? amount * 2 : amount;\n\t\t}\n\t\tthis.x = right - this.width;\n\t\tthis._sx = 1;\n\t\tthis._fw = 0;\n\t},\n\n\tgetBottom: function() {\n\t\treturn this.y + this.height;\n\t},\n\n\tsetBottom: function(bottom) {\n\t\tif (!this._fh) {\n\t\t\tvar amount = bottom - this.y;\n\t\t\tthis.height = this._sy === 0.5 ? amount * 2 : amount;\n\t\t}\n\t\tthis.y = bottom - this.height;\n\t\tthis._sy = 1;\n\t\tthis._fh = 0;\n\t},\n\n\tgetCenterX: function() {\n\t\treturn this.x + this.width / 2;\n\t},\n\n\tsetCenterX: function(x) {\n\t\tif (this._fw || this._sx === 0.5) {\n\t\t\tthis.x = x - this.width / 2;\n\t\t} else {\n\t\t\tif (this._sx) {\n\t\t\t\tthis.x += (x - this.x) * 2 * this._sx;\n\t\t\t}\n\t\t\tthis.width = (x - this.x) * 2;\n\t\t}\n\t\tthis._sx = 0.5;\n\t\tthis._fw = 0;\n\t},\n\n\tgetCenterY: function() {\n\t\treturn this.y + this.height / 2;\n\t},\n\n\tsetCenterY: function(y) {\n\t\tif (this._fh || this._sy === 0.5) {\n\t\t\tthis.y = y - this.height / 2;\n\t\t} else {\n\t\t\tif (this._sy) {\n\t\t\t\tthis.y += (y - this.y) * 2 * this._sy;\n\t\t\t}\n\t\t\tthis.height = (y - this.y) * 2;\n\t\t}\n\t\tthis._sy = 0.5;\n\t\tthis._fh = 0;\n\t},\n\n\tgetCenter: function(_dontLink) {\n\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\treturn new ctor(this.getCenterX(), this.getCenterY(), this, 'setCenter');\n\t},\n\n\tsetCenter: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis.setCenterX(point.x);\n\t\tthis.setCenterY(point.y);\n\t\treturn this;\n\t},\n\n\tgetArea: function() {\n\t\treturn this.width * this.height;\n\t},\n\n\tisEmpty: function() {\n\t\treturn this.width === 0 || this.height === 0;\n\t},\n\n\tcontains: function(arg) {\n\t\treturn arg && arg.width !== undefined\n\t\t\t\t|| (Array.isArray(arg) ? arg : arguments).length === 4\n\t\t\t\t? this._containsRectangle(Rectangle.read(arguments))\n\t\t\t\t: this._containsPoint(Point.read(arguments));\n\t},\n\n\t_containsPoint: function(point) {\n\t\tvar x = point.x,\n\t\t\ty = point.y;\n\t\treturn x >= this.x && y >= this.y\n\t\t\t\t&& x <= this.x + this.width\n\t\t\t\t&& y <= this.y + this.height;\n\t},\n\n\t_containsRectangle: function(rect) {\n\t\tvar x = rect.x,\n\t\t\ty = rect.y;\n\t\treturn x >= this.x && y >= this.y\n\t\t\t\t&& x + rect.width <= this.x + this.width\n\t\t\t\t&& y + rect.height <= this.y + this.height;\n\t},\n\n\tintersects: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tepsilon = Base.read(arguments) || 0;\n\t\treturn rect.x + rect.width > this.x - epsilon\n\t\t\t\t&& rect.y + rect.height > this.y - epsilon\n\t\t\t\t&& rect.x < this.x + this.width + epsilon\n\t\t\t\t&& rect.y < this.y + this.height + epsilon;\n\t},\n\n\tintersect: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tx1 = Math.max(this.x, rect.x),\n\t\t\ty1 = Math.max(this.y, rect.y),\n\t\t\tx2 = Math.min(this.x + this.width, rect.x + rect.width),\n\t\t\ty2 = Math.min(this.y + this.height, rect.y + rect.height);\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t},\n\n\tunite: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tx1 = Math.min(this.x, rect.x),\n\t\t\ty1 = Math.min(this.y, rect.y),\n\t\t\tx2 = Math.max(this.x + this.width, rect.x + rect.width),\n\t\t\ty2 = Math.max(this.y + this.height, rect.y + rect.height);\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t},\n\n\tinclude: function() {\n\t\tvar point = Point.read(arguments);\n\t\tvar x1 = Math.min(this.x, point.x),\n\t\t\ty1 = Math.min(this.y, point.y),\n\t\t\tx2 = Math.max(this.x + this.width, point.x),\n\t\t\ty2 = Math.max(this.y + this.height, point.y);\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t},\n\n\texpand: function() {\n\t\tvar amount = Size.read(arguments),\n\t\t\thor = amount.width,\n\t\t\tver = amount.height;\n\t\treturn new Rectangle(this.x - hor / 2, this.y - ver / 2,\n\t\t\t\tthis.width + hor, this.height + ver);\n\t},\n\n\tscale: function(hor, ver) {\n\t\treturn this.expand(this.width * hor - this.width,\n\t\t\t\tthis.height * (ver === undefined ? hor : ver) - this.height);\n\t}\n}, Base.each([\n\t\t['Top', 'Left'], ['Top', 'Right'],\n\t\t['Bottom', 'Left'], ['Bottom', 'Right'],\n\t\t['Left', 'Center'], ['Top', 'Center'],\n\t\t['Right', 'Center'], ['Bottom', 'Center']\n\t],\n\tfunction(parts, index) {\n\t\tvar part = parts.join(''),\n\t\t\txFirst = /^[RL]/.test(part);\n\t\tif (index >= 4)\n\t\t\tparts[1] += xFirst ? 'Y' : 'X';\n\t\tvar x = parts[xFirst ? 0 : 1],\n\t\t\ty = parts[xFirst ? 1 : 0],\n\t\t\tgetX = 'get' + x,\n\t\t\tgetY = 'get' + y,\n\t\t\tsetX = 'set' + x,\n\t\t\tsetY = 'set' + y,\n\t\t\tget = 'get' + part,\n\t\t\tset = 'set' + part;\n\t\tthis[get] = function(_dontLink) {\n\t\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\t\treturn new ctor(this[getX](), this[getY](), this, set);\n\t\t};\n\t\tthis[set] = function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\tthis[setX](point.x);\n\t\t\tthis[setY](point.y);\n\t\t};\n\t}, {\n\t\tbeans: true\n\t}\n));\n\nvar LinkedRectangle = Rectangle.extend({\n\tinitialize: function Rectangle(x, y, width, height, owner, setter) {\n\t\tthis._set(x, y, width, height, true);\n\t\tthis._owner = owner;\n\t\tthis._setter = setter;\n\t},\n\n\t_set: function(x, y, width, height, _dontNotify) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tif (!_dontNotify)\n\t\t\tthis._owner[this._setter](this);\n\t\treturn this;\n\t}\n},\nnew function() {\n\tvar proto = Rectangle.prototype;\n\n\treturn Base.each(['x', 'y', 'width', 'height'], function(key) {\n\t\tvar part = Base.capitalize(key),\n\t\t\tinternal = '_' + key;\n\t\tthis['get' + part] = function() {\n\t\t\treturn this[internal];\n\t\t};\n\n\t\tthis['set' + part] = function(value) {\n\t\t\tthis[internal] = value;\n\t\t\tif (!this._dontNotify)\n\t\t\t\tthis._owner[this._setter](this);\n\t\t};\n\t}, Base.each(['Point', 'Size', 'Center',\n\t\t\t'Left', 'Top', 'Right', 'Bottom', 'CenterX', 'CenterY',\n\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',\n\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'],\n\t\tfunction(key) {\n\t\t\tvar name = 'set' + key;\n\t\t\tthis[name] = function() {\n\t\t\t\tthis._dontNotify = true;\n\t\t\t\tproto[name].apply(this, arguments);\n\t\t\t\tthis._dontNotify = false;\n\t\t\t\tthis._owner[this._setter](this);\n\t\t\t};\n\t\t}, {\n\t\t\tisSelected: function() {\n\t\t\t\treturn !!(this._owner._selection & 2);\n\t\t\t},\n\n\t\t\tsetSelected: function(selected) {\n\t\t\t\tvar owner = this._owner;\n\t\t\t\tif (owner._changeSelection) {\n\t\t\t\t\towner._changeSelection(2, selected);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t);\n});\n\nvar Matrix = Base.extend({\n\t_class: 'Matrix',\n\n\tinitialize: function Matrix(arg, _dontNotify) {\n\t\tvar count = arguments.length,\n\t\t\tok = true;\n\t\tif (count >= 6) {\n\t\t\tthis._set.apply(this, arguments);\n\t\t} else if (count === 1 || count === 2) {\n\t\t\tif (arg instanceof Matrix) {\n\t\t\t\tthis._set(arg._a, arg._b, arg._c, arg._d, arg._tx, arg._ty,\n\t\t\t\t\t\t_dontNotify);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tthis._set.apply(this,\n\t\t\t\t\t\t_dontNotify ? arg.concat([_dontNotify]) : arg);\n\t\t\t} else {\n\t\t\t\tok = false;\n\t\t\t}\n\t\t} else if (!count) {\n\t\t\tthis.reset();\n\t\t} else {\n\t\t\tok = false;\n\t\t}\n\t\tif (!ok) {\n\t\t\tthrow new Error('Unsupported matrix parameters');\n\t\t}\n\t\treturn this;\n\t},\n\n\tset: '#initialize',\n\n\t_set: function(a, b, c, d, tx, ty, _dontNotify) {\n\t\tthis._a = a;\n\t\tthis._b = b;\n\t\tthis._c = c;\n\t\tthis._d = d;\n\t\tthis._tx = tx;\n\t\tthis._ty = ty;\n\t\tif (!_dontNotify)\n\t\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn Base.serialize(this.getValues(), options, true, dictionary);\n\t},\n\n\t_changed: function() {\n\t\tvar owner = this._owner;\n\t\tif (owner) {\n\t\t\tif (owner._applyMatrix) {\n\t\t\t\towner.transform(null, true);\n\t\t\t} else {\n\t\t\t\towner._changed(9);\n\t\t\t}\n\t\t}\n\t},\n\n\tclone: function() {\n\t\treturn new Matrix(this._a, this._b, this._c, this._d,\n\t\t\t\tthis._tx, this._ty);\n\t},\n\n\tequals: function(mx) {\n\t\treturn mx === this || mx && this._a === mx._a && this._b === mx._b\n\t\t\t\t&& this._c === mx._c && this._d === mx._d\n\t\t\t\t&& this._tx === mx._tx && this._ty === mx._ty;\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '[[' + [f.number(this._a), f.number(this._c),\n\t\t\t\t\tf.number(this._tx)].join(', ') + '], ['\n\t\t\t\t+ [f.number(this._b), f.number(this._d),\n\t\t\t\t\tf.number(this._ty)].join(', ') + ']]';\n\t},\n\n\treset: function(_dontNotify) {\n\t\tthis._a = this._d = 1;\n\t\tthis._b = this._c = this._tx = this._ty = 0;\n\t\tif (!_dontNotify)\n\t\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tapply: function(recursively, _setApplyMatrix) {\n\t\tvar owner = this._owner;\n\t\tif (owner) {\n\t\t\towner.transform(null, true, Base.pick(recursively, true),\n\t\t\t\t\t_setApplyMatrix);\n\t\t\treturn this.isIdentity();\n\t\t}\n\t\treturn false;\n\t},\n\n\ttranslate: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tx = point.x,\n\t\t\ty = point.y;\n\t\tthis._tx += x * this._a + y * this._c;\n\t\tthis._ty += x * this._b + y * this._d;\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tscale: function() {\n\t\tvar scale = Point.read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\tif (center)\n\t\t\tthis.translate(center);\n\t\tthis._a *= scale.x;\n\t\tthis._b *= scale.x;\n\t\tthis._c *= scale.y;\n\t\tthis._d *= scale.y;\n\t\tif (center)\n\t\t\tthis.translate(center.negate());\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\trotate: function(angle ) {\n\t\tangle *= Math.PI / 180;\n\t\tvar center = Point.read(arguments, 1),\n\t\t\tx = center.x,\n\t\t\ty = center.y,\n\t\t\tcos = Math.cos(angle),\n\t\t\tsin = Math.sin(angle),\n\t\t\ttx = x - x * cos + y * sin,\n\t\t\tty = y - x * sin - y * cos,\n\t\t\ta = this._a,\n\t\t\tb = this._b,\n\t\t\tc = this._c,\n\t\t\td = this._d;\n\t\tthis._a = cos * a + sin * c;\n\t\tthis._b = cos * b + sin * d;\n\t\tthis._c = -sin * a + cos * c;\n\t\tthis._d = -sin * b + cos * d;\n\t\tthis._tx += tx * a + ty * c;\n\t\tthis._ty += tx * b + ty * d;\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tshear: function() {\n\t\tvar shear = Point.read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\tif (center)\n\t\t\tthis.translate(center);\n\t\tvar a = this._a,\n\t\t\tb = this._b;\n\t\tthis._a += shear.y * this._c;\n\t\tthis._b += shear.y * this._d;\n\t\tthis._c += shear.x * a;\n\t\tthis._d += shear.x * b;\n\t\tif (center)\n\t\t\tthis.translate(center.negate());\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tskew: function() {\n\t\tvar skew = Point.read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true }),\n\t\t\ttoRadians = Math.PI / 180,\n\t\t\tshear = new Point(Math.tan(skew.x * toRadians),\n\t\t\t\tMath.tan(skew.y * toRadians));\n\t\treturn this.shear(shear, center);\n\t},\n\n\tappend: function(mx, _dontNotify) {\n\t\tif (mx) {\n\t\t\tvar a1 = this._a,\n\t\t\t\tb1 = this._b,\n\t\t\t\tc1 = this._c,\n\t\t\t\td1 = this._d,\n\t\t\t\ta2 = mx._a,\n\t\t\t\tb2 = mx._c,\n\t\t\t\tc2 = mx._b,\n\t\t\t\td2 = mx._d,\n\t\t\t\ttx2 = mx._tx,\n\t\t\t\tty2 = mx._ty;\n\t\t\tthis._a = a2 * a1 + c2 * c1;\n\t\t\tthis._c = b2 * a1 + d2 * c1;\n\t\t\tthis._b = a2 * b1 + c2 * d1;\n\t\t\tthis._d = b2 * b1 + d2 * d1;\n\t\t\tthis._tx += tx2 * a1 + ty2 * c1;\n\t\t\tthis._ty += tx2 * b1 + ty2 * d1;\n\t\t\tif (!_dontNotify)\n\t\t\t\tthis._changed();\n\t\t}\n\t\treturn this;\n\t},\n\n\tprepend: function(mx, _dontNotify) {\n\t\tif (mx) {\n\t\t\tvar a1 = this._a,\n\t\t\t\tb1 = this._b,\n\t\t\t\tc1 = this._c,\n\t\t\t\td1 = this._d,\n\t\t\t\ttx1 = this._tx,\n\t\t\t\tty1 = this._ty,\n\t\t\t\ta2 = mx._a,\n\t\t\t\tb2 = mx._c,\n\t\t\t\tc2 = mx._b,\n\t\t\t\td2 = mx._d,\n\t\t\t\ttx2 = mx._tx,\n\t\t\t\tty2 = mx._ty;\n\t\t\tthis._a = a2 * a1 + b2 * b1;\n\t\t\tthis._c = a2 * c1 + b2 * d1;\n\t\t\tthis._b = c2 * a1 + d2 * b1;\n\t\t\tthis._d = c2 * c1 + d2 * d1;\n\t\t\tthis._tx = a2 * tx1 + b2 * ty1 + tx2;\n\t\t\tthis._ty = c2 * tx1 + d2 * ty1 + ty2;\n\t\t\tif (!_dontNotify)\n\t\t\t\tthis._changed();\n\t\t}\n\t\treturn this;\n\t},\n\n\tappended: function(mx) {\n\t\treturn this.clone().append(mx);\n\t},\n\n\tprepended: function(mx) {\n\t\treturn this.clone().prepend(mx);\n\t},\n\n\tinvert: function() {\n\t\tvar a = this._a,\n\t\t\tb = this._b,\n\t\t\tc = this._c,\n\t\t\td = this._d,\n\t\t\ttx = this._tx,\n\t\t\tty = this._ty,\n\t\t\tdet = a * d - b * c,\n\t\t\tres = null;\n\t\tif (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {\n\t\t\tthis._a = d / det;\n\t\t\tthis._b = -b / det;\n\t\t\tthis._c = -c / det;\n\t\t\tthis._d = a / det;\n\t\t\tthis._tx = (c * ty - d * tx) / det;\n\t\t\tthis._ty = (b * tx - a * ty) / det;\n\t\t\tres = this;\n\t\t}\n\t\treturn res;\n\t},\n\n\tinverted: function() {\n\t\treturn this.clone().invert();\n\t},\n\n\tconcatenate: '#append',\n\tpreConcatenate: '#prepend',\n\tchain: '#appended',\n\n\t_shiftless: function() {\n\t\treturn new Matrix(this._a, this._b, this._c, this._d, 0, 0);\n\t},\n\n\t_orNullIfIdentity: function() {\n\t\treturn this.isIdentity() ? null : this;\n\t},\n\n\tisIdentity: function() {\n\t\treturn this._a === 1 && this._b === 0 && this._c === 0 && this._d === 1\n\t\t\t\t&& this._tx === 0 && this._ty === 0;\n\t},\n\n\tisInvertible: function() {\n\t\tvar det = this._a * this._d - this._c * this._b;\n\t\treturn det && !isNaN(det) && isFinite(this._tx) && isFinite(this._ty);\n\t},\n\n\tisSingular: function() {\n\t\treturn !this.isInvertible();\n\t},\n\n\ttransform: function( src, dst, count) {\n\t\treturn arguments.length < 3\n\t\t\t? this._transformPoint(Point.read(arguments))\n\t\t\t: this._transformCoordinates(src, dst, count);\n\t},\n\n\t_transformPoint: function(point, dest, _dontNotify) {\n\t\tvar x = point.x,\n\t\t\ty = point.y;\n\t\tif (!dest)\n\t\t\tdest = new Point();\n\t\treturn dest._set(\n\t\t\t\tx * this._a + y * this._c + this._tx,\n\t\t\t\tx * this._b + y * this._d + this._ty,\n\t\t\t\t_dontNotify);\n\t},\n\n\t_transformCoordinates: function(src, dst, count) {\n\t\tfor (var i = 0, max = 2 * count; i < max; i += 2) {\n\t\t\tvar x = src[i],\n\t\t\t\ty = src[i + 1];\n\t\t\tdst[i] = x * this._a + y * this._c + this._tx;\n\t\t\tdst[i + 1] = x * this._b + y * this._d + this._ty;\n\t\t}\n\t\treturn dst;\n\t},\n\n\t_transformCorners: function(rect) {\n\t\tvar x1 = rect.x,\n\t\t\ty1 = rect.y,\n\t\t\tx2 = x1 + rect.width,\n\t\t\ty2 = y1 + rect.height,\n\t\t\tcoords = [ x1, y1, x2, y1, x2, y2, x1, y2 ];\n\t\treturn this._transformCoordinates(coords, coords, 4);\n\t},\n\n\t_transformBounds: function(bounds, dest, _dontNotify) {\n\t\tvar coords = this._transformCorners(bounds),\n\t\t\tmin = coords.slice(0, 2),\n\t\t\tmax = min.slice();\n\t\tfor (var i = 2; i < 8; i++) {\n\t\t\tvar val = coords[i],\n\t\t\t\tj = i & 1;\n\t\t\tif (val < min[j]) {\n\t\t\t\tmin[j] = val;\n\t\t\t} else if (val > max[j]) {\n\t\t\t\tmax[j] = val;\n\t\t\t}\n\t\t}\n\t\tif (!dest)\n\t\t\tdest = new Rectangle();\n\t\treturn dest._set(min[0], min[1], max[0] - min[0], max[1] - min[1],\n\t\t\t\t_dontNotify);\n\t},\n\n\tinverseTransform: function() {\n\t\treturn this._inverseTransform(Point.read(arguments));\n\t},\n\n\t_inverseTransform: function(point, dest, _dontNotify) {\n\t\tvar a = this._a,\n\t\t\tb = this._b,\n\t\t\tc = this._c,\n\t\t\td = this._d,\n\t\t\ttx = this._tx,\n\t\t\tty = this._ty,\n\t\t\tdet = a * d - b * c,\n\t\t\tres = null;\n\t\tif (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {\n\t\t\tvar x = point.x - this._tx,\n\t\t\t\ty = point.y - this._ty;\n\t\t\tif (!dest)\n\t\t\t\tdest = new Point();\n\t\t\tres = dest._set(\n\t\t\t\t\t(x * d - y * c) / det,\n\t\t\t\t\t(y * a - x * b) / det,\n\t\t\t\t\t_dontNotify);\n\t\t}\n\t\treturn res;\n\t},\n\n\tdecompose: function() {\n\t\tvar a = this._a,\n\t\t\tb = this._b,\n\t\t\tc = this._c,\n\t\t\td = this._d,\n\t\t\tdet = a * d - b * c,\n\t\t\tsqrt = Math.sqrt,\n\t\t\tatan2 = Math.atan2,\n\t\t\tdegrees = 180 / Math.PI,\n\t\t\trotate,\n\t\t\tscale,\n\t\t\tskew;\n\t\tif (a !== 0 || b !== 0) {\n\t\t\tvar r = sqrt(a * a + b * b);\n\t\t\trotate = Math.acos(a / r) * (b > 0 ? 1 : -1);\n\t\t\tscale = [r, det / r];\n\t\t\tskew = [atan2(a * c + b * d, r * r), 0];\n\t\t} else if (c !== 0 || d !== 0) {\n\t\t\tvar s = sqrt(c * c + d * d);\n\t\t\trotate = Math.asin(c / s)  * (d > 0 ? 1 : -1);\n\t\t\tscale = [det / s, s];\n\t\t\tskew = [0, atan2(a * c + b * d, s * s)];\n\t\t} else {\n\t\t\trotate = 0;\n\t\t\tskew = scale = [0, 0];\n\t\t}\n\t\treturn {\n\t\t\ttranslation: this.getTranslation(),\n\t\t\trotation: rotate * degrees,\n\t\t\tscaling: new Point(scale),\n\t\t\tskewing: new Point(skew[0] * degrees, skew[1] * degrees)\n\t\t};\n\t},\n\n\tgetValues: function() {\n\t\treturn [ this._a, this._b, this._c, this._d, this._tx, this._ty ];\n\t},\n\n\tgetTranslation: function() {\n\t\treturn new Point(this._tx, this._ty);\n\t},\n\n\tgetScaling: function() {\n\t\treturn (this.decompose() || {}).scaling;\n\t},\n\n\tgetRotation: function() {\n\t\treturn (this.decompose() || {}).rotation;\n\t},\n\n\tapplyToContext: function(ctx) {\n\t\tif (!this.isIdentity()) {\n\t\t\tctx.transform(this._a, this._b, this._c, this._d,\n\t\t\t\t\tthis._tx, this._ty);\n\t\t}\n\t}\n}, Base.each(['a', 'b', 'c', 'd', 'tx', 'ty'], function(key) {\n\tvar part = Base.capitalize(key),\n\t\tprop = '_' + key;\n\tthis['get' + part] = function() {\n\t\treturn this[prop];\n\t};\n\tthis['set' + part] = function(value) {\n\t\tthis[prop] = value;\n\t\tthis._changed();\n\t};\n}, {}));\n\nvar Line = Base.extend({\n\t_class: 'Line',\n\n\tinitialize: function Line(arg0, arg1, arg2, arg3, arg4) {\n\t\tvar asVector = false;\n\t\tif (arguments.length >= 4) {\n\t\t\tthis._px = arg0;\n\t\t\tthis._py = arg1;\n\t\t\tthis._vx = arg2;\n\t\t\tthis._vy = arg3;\n\t\t\tasVector = arg4;\n\t\t} else {\n\t\t\tthis._px = arg0.x;\n\t\t\tthis._py = arg0.y;\n\t\t\tthis._vx = arg1.x;\n\t\t\tthis._vy = arg1.y;\n\t\t\tasVector = arg2;\n\t\t}\n\t\tif (!asVector) {\n\t\t\tthis._vx -= this._px;\n\t\t\tthis._vy -= this._py;\n\t\t}\n\t},\n\n\tgetPoint: function() {\n\t\treturn new Point(this._px, this._py);\n\t},\n\n\tgetVector: function() {\n\t\treturn new Point(this._vx, this._vy);\n\t},\n\n\tgetLength: function() {\n\t\treturn this.getVector().getLength();\n\t},\n\n\tintersect: function(line, isInfinite) {\n\t\treturn Line.intersect(\n\t\t\t\tthis._px, this._py, this._vx, this._vy,\n\t\t\t\tline._px, line._py, line._vx, line._vy,\n\t\t\t\ttrue, isInfinite);\n\t},\n\n\tgetSide: function(point, isInfinite) {\n\t\treturn Line.getSide(\n\t\t\t\tthis._px, this._py, this._vx, this._vy,\n\t\t\t\tpoint.x, point.y, true, isInfinite);\n\t},\n\n\tgetDistance: function(point) {\n\t\treturn Math.abs(this.getSignedDistance(point));\n\t},\n\n\tgetSignedDistance: function(point) {\n\t\treturn Line.getSignedDistance(this._px, this._py, this._vx, this._vy,\n\t\t\t\tpoint.x, point.y, true);\n\t},\n\n\tisCollinear: function(line) {\n\t\treturn Point.isCollinear(this._vx, this._vy, line._vx, line._vy);\n\t},\n\n\tisOrthogonal: function(line) {\n\t\treturn Point.isOrthogonal(this._vx, this._vy, line._vx, line._vy);\n\t},\n\n\tstatics: {\n\t\tintersect: function(p1x, p1y, v1x, v1y, p2x, p2y, v2x, v2y, asVector,\n\t\t\t\tisInfinite) {\n\t\t\tif (!asVector) {\n\t\t\t\tv1x -= p1x;\n\t\t\t\tv1y -= p1y;\n\t\t\t\tv2x -= p2x;\n\t\t\t\tv2y -= p2y;\n\t\t\t}\n\t\t\tvar cross = v1x * v2y - v1y * v2x;\n\t\t\tif (!Numerical.isZero(cross)) {\n\t\t\t\tvar dx = p1x - p2x,\n\t\t\t\t\tdy = p1y - p2y,\n\t\t\t\t\tu1 = (v2x * dy - v2y * dx) / cross,\n\t\t\t\t\tu2 = (v1x * dy - v1y * dx) / cross,\n\t\t\t\t\tepsilon = 1e-12,\n\t\t\t\t\tuMin = -epsilon,\n\t\t\t\t\tuMax = 1 + epsilon;\n\t\t\t\tif (isInfinite\n\t\t\t\t\t\t|| uMin < u1 && u1 < uMax && uMin < u2 && u2 < uMax) {\n\t\t\t\t\tif (!isInfinite) {\n\t\t\t\t\t\tu1 = u1 <= 0 ? 0 : u1 >= 1 ? 1 : u1;\n\t\t\t\t\t}\n\t\t\t\t\treturn new Point(\n\t\t\t\t\t\t\tp1x + u1 * v1x,\n\t\t\t\t\t\t\tp1y + u1 * v1y);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgetSide: function(px, py, vx, vy, x, y, asVector, isInfinite) {\n\t\t\tif (!asVector) {\n\t\t\t\tvx -= px;\n\t\t\t\tvy -= py;\n\t\t\t}\n\t\t\tvar v2x = x - px,\n\t\t\t\tv2y = y - py,\n\t\t\t\tccw = v2x * vy - v2y * vx;\n\t\t\tif (!isInfinite && Numerical.isZero(ccw)) {\n\t\t\t\tccw = (v2x * vx + v2x * vx) / (vx * vx + vy * vy);\n\t\t\t\tif (ccw >= 0 && ccw <= 1)\n\t\t\t\t\tccw = 0;\n\t\t\t}\n\t\t\treturn ccw < 0 ? -1 : ccw > 0 ? 1 : 0;\n\t\t},\n\n\t\tgetSignedDistance: function(px, py, vx, vy, x, y, asVector) {\n\t\t\tif (!asVector) {\n\t\t\t\tvx -= px;\n\t\t\t\tvy -= py;\n\t\t\t}\n\t\t\treturn vx === 0 ? vy > 0 ? x - px : px - x\n\t\t\t\t : vy === 0 ? vx < 0 ? y - py : py - y\n\t\t\t\t : ((x-px) * vy - (y-py) * vx) / Math.sqrt(vx * vx + vy * vy);\n\t\t},\n\n\t\tgetDistance: function(px, py, vx, vy, x, y, asVector) {\n\t\t\treturn Math.abs(\n\t\t\t\t\tLine.getSignedDistance(px, py, vx, vy, x, y, asVector));\n\t\t}\n\t}\n});\n\nvar Project = PaperScopeItem.extend({\n\t_class: 'Project',\n\t_list: 'projects',\n\t_reference: 'project',\n\t_compactSerialize: true,\n\n\tinitialize: function Project(element) {\n\t\tPaperScopeItem.call(this, true);\n\t\tthis._children = [];\n\t\tthis._namedChildren = {};\n\t\tthis._activeLayer = null;\n\t\tthis._currentStyle = new Style(null, null, this);\n\t\tthis._view = View.create(this,\n\t\t\t\telement || CanvasProvider.getCanvas(1, 1));\n\t\tthis._selectionItems = {};\n\t\tthis._selectionCount = 0;\n\t\tthis._updateVersion = 0;\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn Base.serialize(this._children, options, true, dictionary);\n\t},\n\n\t_changed: function(flags, item) {\n\t\tif (flags & 1) {\n\t\t\tvar view = this._view;\n\t\t\tif (view) {\n\t\t\t\tview._needsUpdate = true;\n\t\t\t\tif (!view._requested && view._autoUpdate)\n\t\t\t\t\tview.requestUpdate();\n\t\t\t}\n\t\t}\n\t\tvar changes = this._changes;\n\t\tif (changes && item) {\n\t\t\tvar changesById = this._changesById,\n\t\t\t\tid = item._id,\n\t\t\t\tentry = changesById[id];\n\t\t\tif (entry) {\n\t\t\t\tentry.flags |= flags;\n\t\t\t} else {\n\t\t\t\tchanges.push(changesById[id] = { item: item, flags: flags });\n\t\t\t}\n\t\t}\n\t},\n\n\tclear: function() {\n\t\tvar children = this._children;\n\t\tfor (var i = children.length - 1; i >= 0; i--)\n\t\t\tchildren[i].remove();\n\t},\n\n\tisEmpty: function() {\n\t\treturn !this._children.length;\n\t},\n\n\tremove: function remove() {\n\t\tif (!remove.base.call(this))\n\t\t\treturn false;\n\t\tif (this._view)\n\t\t\tthis._view.remove();\n\t\treturn true;\n\t},\n\n\tgetView: function() {\n\t\treturn this._view;\n\t},\n\n\tgetCurrentStyle: function() {\n\t\treturn this._currentStyle;\n\t},\n\n\tsetCurrentStyle: function(style) {\n\t\tthis._currentStyle.set(style);\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._index;\n\t},\n\n\tgetOptions: function() {\n\t\treturn this._scope.settings;\n\t},\n\n\tgetLayers: function() {\n\t\treturn this._children;\n\t},\n\n\tgetActiveLayer: function() {\n\t\treturn this._activeLayer || new Layer({ project: this, insert: true });\n\t},\n\n\tgetSymbolDefinitions: function() {\n\t\tvar definitions = [],\n\t\t\tids = {};\n\t\tthis.getItems({\n\t\t\tclass: SymbolItem,\n\t\t\tmatch: function(item) {\n\t\t\t\tvar definition = item._definition,\n\t\t\t\t\tid = definition._id;\n\t\t\t\tif (!ids[id]) {\n\t\t\t\t\tids[id] = true;\n\t\t\t\t\tdefinitions.push(definition);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t\treturn definitions;\n\t},\n\n\tgetSymbols: 'getSymbolDefinitions',\n\n\tgetSelectedItems: function() {\n\t\tvar selectionItems = this._selectionItems,\n\t\t\titems = [];\n\t\tfor (var id in selectionItems) {\n\t\t\tvar item = selectionItems[id],\n\t\t\t\tselection = item._selection;\n\t\t\tif ((selection & 1) && item.isInserted()) {\n\t\t\t\titems.push(item);\n\t\t\t} else if (!selection) {\n\t\t\t\tthis._updateSelection(item);\n\t\t\t}\n\t\t}\n\t\treturn items;\n\t},\n\n\t_updateSelection: function(item) {\n\t\tvar id = item._id,\n\t\t\tselectionItems = this._selectionItems;\n\t\tif (item._selection) {\n\t\t\tif (selectionItems[id] !== item) {\n\t\t\t\tthis._selectionCount++;\n\t\t\t\tselectionItems[id] = item;\n\t\t\t}\n\t\t} else if (selectionItems[id] === item) {\n\t\t\tthis._selectionCount--;\n\t\t\tdelete selectionItems[id];\n\t\t}\n\t},\n\n\tselectAll: function() {\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tchildren[i].setFullySelected(true);\n\t},\n\n\tdeselectAll: function() {\n\t\tvar selectionItems = this._selectionItems;\n\t\tfor (var i in selectionItems)\n\t\t\tselectionItems[i].setFullySelected(false);\n\t},\n\n\taddLayer: function(layer) {\n\t\treturn this.insertLayer(undefined, layer);\n\t},\n\n\tinsertLayer: function(index, layer) {\n\t\tif (layer instanceof Layer) {\n\t\t\tlayer._remove(false, true);\n\t\t\tBase.splice(this._children, [layer], index, 0);\n\t\t\tlayer._setProject(this, true);\n\t\t\tvar name = layer._name;\n\t\t\tif (name)\n\t\t\t\tlayer.setName(name);\n\t\t\tif (this._changes)\n\t\t\t\tlayer._changed(5);\n\t\t\tif (!this._activeLayer)\n\t\t\t\tthis._activeLayer = layer;\n\t\t} else {\n\t\t\tlayer = null;\n\t\t}\n\t\treturn layer;\n\t},\n\n\t_insertItem: function(index, item, _created) {\n\t\titem = this.insertLayer(index, item)\n\t\t\t\t|| (this._activeLayer || this._insertItem(undefined,\n\t\t\t\t\t\tnew Layer(Item.NO_INSERT), true))\n\t\t\t\t\t\t.insertChild(index, item);\n\t\tif (_created && item.activate)\n\t\t\titem.activate();\n\t\treturn item;\n\t},\n\n\tgetItems: function(options) {\n\t\treturn Item._getItems(this, options);\n\t},\n\n\tgetItem: function(options) {\n\t\treturn Item._getItems(this, options, null, null, true)[0] || null;\n\t},\n\n\timportJSON: function(json) {\n\t\tthis.activate();\n\t\tvar layer = this._activeLayer;\n\t\treturn Base.importJSON(json, layer && layer.isEmpty() && layer);\n\t},\n\n\tremoveOn: function(type) {\n\t\tvar sets = this._removeSets;\n\t\tif (sets) {\n\t\t\tif (type === 'mouseup')\n\t\t\t\tsets.mousedrag = null;\n\t\t\tvar set = sets[type];\n\t\t\tif (set) {\n\t\t\t\tfor (var id in set) {\n\t\t\t\t\tvar item = set[id];\n\t\t\t\t\tfor (var key in sets) {\n\t\t\t\t\t\tvar other = sets[key];\n\t\t\t\t\t\tif (other && other != set)\n\t\t\t\t\t\t\tdelete other[item._id];\n\t\t\t\t\t}\n\t\t\t\t\titem.remove();\n\t\t\t\t}\n\t\t\t\tsets[type] = null;\n\t\t\t}\n\t\t}\n\t},\n\n\tdraw: function(ctx, matrix, pixelRatio) {\n\t\tthis._updateVersion++;\n\t\tctx.save();\n\t\tmatrix.applyToContext(ctx);\n\t\tvar children = this._children,\n\t\t\tparam = new Base({\n\t\t\t\toffset: new Point(0, 0),\n\t\t\t\tpixelRatio: pixelRatio,\n\t\t\t\tviewMatrix: matrix.isIdentity() ? null : matrix,\n\t\t\t\tmatrices: [new Matrix()],\n\t\t\t\tupdateMatrix: true\n\t\t\t});\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tchildren[i].draw(ctx, param);\n\t\t}\n\t\tctx.restore();\n\n\t\tif (this._selectionCount > 0) {\n\t\t\tctx.save();\n\t\t\tctx.strokeWidth = 1;\n\t\t\tvar items = this._selectionItems,\n\t\t\t\tsize = this._scope.settings.handleSize,\n\t\t\t\tversion = this._updateVersion;\n\t\t\tfor (var id in items) {\n\t\t\t\titems[id]._drawSelection(ctx, matrix, size, items, version);\n\t\t\t}\n\t\t\tctx.restore();\n\t\t}\n\t}\n});\n\nvar Item = Base.extend(Emitter, {\n\tstatics: {\n\t\textend: function extend(src) {\n\t\t\tif (src._serializeFields)\n\t\t\t\tsrc._serializeFields = Base.set({},\n\t\t\t\t\tthis.prototype._serializeFields, src._serializeFields);\n\t\t\treturn extend.base.apply(this, arguments);\n\t\t},\n\n\t\tNO_INSERT: { insert: false }\n\t},\n\n\t_class: 'Item',\n\t_name: null,\n\t_applyMatrix: true,\n\t_canApplyMatrix: true,\n\t_canScaleStroke: false,\n\t_pivot: null,\n\t_visible: true,\n\t_blendMode: 'normal',\n\t_opacity: 1,\n\t_locked: false,\n\t_guide: false,\n\t_clipMask: false,\n\t_selection: 0,\n\t_selectBounds: true,\n\t_selectChildren: false,\n\t_serializeFields: {\n\t\tname: null,\n\t\tapplyMatrix: null,\n\t\tmatrix: new Matrix(),\n\t\tpivot: null,\n\t\tvisible: true,\n\t\tblendMode: 'normal',\n\t\topacity: 1,\n\t\tlocked: false,\n\t\tguide: false,\n\t\tclipMask: false,\n\t\tselected: false,\n\t\tdata: {}\n\t},\n\t_prioritize: ['applyMatrix']\n},\nnew function() {\n\tvar handlers = ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onClick',\n\t\t\t'onDoubleClick', 'onMouseMove', 'onMouseEnter', 'onMouseLeave'];\n\treturn Base.each(handlers,\n\t\tfunction(name) {\n\t\t\tthis._events[name] = {\n\t\t\t\tinstall: function(type) {\n\t\t\t\t\tthis.getView()._countItemEvent(type, 1);\n\t\t\t\t},\n\n\t\t\t\tuninstall: function(type) {\n\t\t\t\t\tthis.getView()._countItemEvent(type, -1);\n\t\t\t\t}\n\t\t\t};\n\t\t}, {\n\t\t\t_events: {\n\t\t\t\tonFrame: {\n\t\t\t\t\tinstall: function() {\n\t\t\t\t\t\tthis.getView()._animateItem(this, true);\n\t\t\t\t\t},\n\n\t\t\t\t\tuninstall: function() {\n\t\t\t\t\t\tthis.getView()._animateItem(this, false);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tonLoad: {},\n\t\t\t\tonError: {}\n\t\t\t},\n\t\t\tstatics: {\n\t\t\t\t_itemHandlers: handlers\n\t\t\t}\n\t\t}\n\t);\n}, {\n\tinitialize: function Item() {\n\t},\n\n\t_initialize: function(props, point) {\n\t\tvar hasProps = props && Base.isPlainObject(props),\n\t\t\tinternal = hasProps && props.internal === true,\n\t\t\tmatrix = this._matrix = new Matrix(),\n\t\t\tproject = hasProps && props.project || paper.project,\n\t\t\tsettings = paper.settings;\n\t\tthis._id = internal ? null : UID.get();\n\t\tthis._parent = this._index = null;\n\t\tthis._applyMatrix = this._canApplyMatrix && settings.applyMatrix;\n\t\tif (point)\n\t\t\tmatrix.translate(point);\n\t\tmatrix._owner = this;\n\t\tthis._style = new Style(project._currentStyle, this, project);\n\t\tif (internal || hasProps && props.insert == false\n\t\t\t|| !settings.insertItems && !(hasProps && props.insert === true)) {\n\t\t\tthis._setProject(project);\n\t\t} else {\n\t\t\t(hasProps && props.parent || project)\n\t\t\t\t\t._insertItem(undefined, this, true);\n\t\t}\n\t\tif (hasProps && props !== Item.NO_INSERT) {\n\t\t\tthis.set(props, {\n\t\t\t\tinternal: true, insert: true, project: true, parent: true\n\t\t\t});\n\t\t}\n\t\treturn hasProps;\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\tvar props = {},\n\t\t\tthat = this;\n\n\t\tfunction serialize(fields) {\n\t\t\tfor (var key in fields) {\n\t\t\t\tvar value = that[key];\n\t\t\t\tif (!Base.equals(value, key === 'leading'\n\t\t\t\t\t\t? fields.fontSize * 1.2 : fields[key])) {\n\t\t\t\t\tprops[key] = Base.serialize(value, options,\n\t\t\t\t\t\t\tkey !== 'data', dictionary);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tserialize(this._serializeFields);\n\t\tif (!(this instanceof Group))\n\t\t\tserialize(this._style._defaults);\n\t\treturn [ this._class, props ];\n\t},\n\n\t_changed: function(flags) {\n\t\tvar symbol = this._symbol,\n\t\t\tcacheParent = this._parent || symbol,\n\t\t\tproject = this._project;\n\t\tif (flags & 8) {\n\t\t\tthis._bounds = this._position = this._decomposed =\n\t\t\t\t\tthis._globalMatrix = undefined;\n\t\t}\n\t\tif (cacheParent\n\t\t\t\t&& (flags & 40)) {\n\t\t\tItem._clearBoundsCache(cacheParent);\n\t\t}\n\t\tif (flags & 2) {\n\t\t\tItem._clearBoundsCache(this);\n\t\t}\n\t\tif (project)\n\t\t\tproject._changed(flags, this);\n\t\tif (symbol)\n\t\t\tsymbol._changed(flags);\n\t},\n\n\tgetId: function() {\n\t\treturn this._id;\n\t},\n\n\tgetName: function() {\n\t\treturn this._name;\n\t},\n\n\tsetName: function(name) {\n\n\t\tif (this._name)\n\t\t\tthis._removeNamed();\n\t\tif (name === (+name) + '')\n\t\t\tthrow new Error(\n\t\t\t\t\t'Names consisting only of numbers are not supported.');\n\t\tvar owner = this._getOwner();\n\t\tif (name && owner) {\n\t\t\tvar children = owner._children,\n\t\t\t\tnamedChildren = owner._namedChildren;\n\t\t\t(namedChildren[name] = namedChildren[name] || []).push(this);\n\t\t\tif (!(name in children))\n\t\t\t\tchildren[name] = this;\n\t\t}\n\t\tthis._name = name || undefined;\n\t\tthis._changed(128);\n\t},\n\n\tgetStyle: function() {\n\t\treturn this._style;\n\t},\n\n\tsetStyle: function(style) {\n\t\tthis.getStyle().set(style);\n\t}\n}, Base.each(['locked', 'visible', 'blendMode', 'opacity', 'guide'],\n\tfunction(name) {\n\t\tvar part = Base.capitalize(name),\n\t\t\tkey = '_' + name,\n\t\t\tflags = {\n\t\t\t\tlocked: 128,\n\t\t\t\tvisible: 137\n\t\t\t};\n\t\tthis['get' + part] = function() {\n\t\t\treturn this[key];\n\t\t};\n\t\tthis['set' + part] = function(value) {\n\t\t\tif (value != this[key]) {\n\t\t\t\tthis[key] = value;\n\t\t\t\tthis._changed(flags[name] || 129);\n\t\t\t}\n\t\t};\n\t},\n{}), {\n\tbeans: true,\n\n\tgetSelection: function() {\n\t\treturn this._selection;\n\t},\n\n\tsetSelection: function(selection) {\n\t\tif (selection !== this._selection) {\n\t\t\tthis._selection = selection;\n\t\t\tvar project = this._project;\n\t\t\tif (project) {\n\t\t\t\tproject._updateSelection(this);\n\t\t\t\tthis._changed(129);\n\t\t\t}\n\t\t}\n\t},\n\n\t_changeSelection: function(flag, selected) {\n\t\tvar selection = this._selection;\n\t\tthis.setSelection(selected ? selection | flag : selection & ~flag);\n\t},\n\n\tisSelected: function() {\n\t\tif (this._selectChildren) {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tif (children[i].isSelected())\n\t\t\t\t\treturn true;\n\t\t}\n\t\treturn !!(this._selection & 1);\n\t},\n\n\tsetSelected: function(selected) {\n\t\tif (this._selectChildren) {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].setSelected(selected);\n\t\t}\n\t\tthis._changeSelection(1, selected);\n\t},\n\n\tisFullySelected: function() {\n\t\tvar children = this._children,\n\t\t\tselected = !!(this._selection & 1);\n\t\tif (children && selected) {\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tif (!children[i].isFullySelected())\n\t\t\t\t\treturn false;\n\t\t\treturn true;\n\t\t}\n\t\treturn selected;\n\t},\n\n\tsetFullySelected: function(selected) {\n\t\tvar children = this._children;\n\t\tif (children) {\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].setFullySelected(selected);\n\t\t}\n\t\tthis._changeSelection(1, selected);\n\t},\n\n\tisClipMask: function() {\n\t\treturn this._clipMask;\n\t},\n\n\tsetClipMask: function(clipMask) {\n\t\tif (this._clipMask != (clipMask = !!clipMask)) {\n\t\t\tthis._clipMask = clipMask;\n\t\t\tif (clipMask) {\n\t\t\t\tthis.setFillColor(null);\n\t\t\t\tthis.setStrokeColor(null);\n\t\t\t}\n\t\t\tthis._changed(129);\n\t\t\tif (this._parent)\n\t\t\t\tthis._parent._changed(1024);\n\t\t}\n\t},\n\n\tgetData: function() {\n\t\tif (!this._data)\n\t\t\tthis._data = {};\n\t\treturn this._data;\n\t},\n\n\tsetData: function(data) {\n\t\tthis._data = data;\n\t},\n\n\tgetPosition: function(_dontLink) {\n\t\tvar position = this._position,\n\t\t\tctor = _dontLink ? Point : LinkedPoint;\n\t\tif (!position) {\n\t\t\tvar pivot = this._pivot;\n\t\t\tposition = this._position = pivot\n\t\t\t\t\t? this._matrix._transformPoint(pivot)\n\t\t\t\t\t: this.getBounds().getCenter(true);\n\t\t}\n\t\treturn new ctor(position.x, position.y, this, 'setPosition');\n\t},\n\n\tsetPosition: function() {\n\t\tthis.translate(Point.read(arguments).subtract(this.getPosition(true)));\n\t},\n\n\tgetPivot: function() {\n\t\tvar pivot = this._pivot;\n\t\treturn pivot\n\t\t\t\t? new LinkedPoint(pivot.x, pivot.y, this, 'setPivot')\n\t\t\t\t: null;\n\t},\n\n\tsetPivot: function() {\n\t\tthis._pivot = Point.read(arguments, 0, { clone: true, readNull: true });\n\t\tthis._position = undefined;\n\t}\n}, Base.each({\n\t\tgetStrokeBounds: { stroke: true },\n\t\tgetHandleBounds: { handle: true },\n\t\tgetInternalBounds: { internal: true }\n\t},\n\tfunction(options, key) {\n\t\tthis[key] = function(matrix) {\n\t\t\treturn this.getBounds(matrix, options);\n\t\t};\n\t},\n{\n\tbeans: true,\n\n\tgetBounds: function(matrix, options) {\n\t\tvar hasMatrix = options || matrix instanceof Matrix,\n\t\t\topts = Base.set({}, hasMatrix ? options : matrix,\n\t\t\t\t\tthis._boundsOptions);\n\t\tif (!opts.stroke || this.getStrokeScaling())\n\t\t\topts.cacheItem = this;\n\t\tvar rect = this._getCachedBounds(hasMatrix && matrix, opts).rect;\n\t\treturn !arguments.length\n\t\t\t\t? new LinkedRectangle(rect.x, rect.y, rect.width, rect.height,\n\t\t\t\t\tthis, 'setBounds')\n\t\t\t\t: rect;\n\t},\n\n\tsetBounds: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tbounds = this.getBounds(),\n\t\t\t_matrix = this._matrix,\n\t\t\tmatrix = new Matrix(),\n\t\t\tcenter = rect.getCenter();\n\t\tmatrix.translate(center);\n\t\tif (rect.width != bounds.width || rect.height != bounds.height) {\n\t\t\tif (!_matrix.isInvertible()) {\n\t\t\t\t_matrix.set(_matrix._backup\n\t\t\t\t\t\t|| new Matrix().translate(_matrix.getTranslation()));\n\t\t\t\tbounds = this.getBounds();\n\t\t\t}\n\t\t\tmatrix.scale(\n\t\t\t\t\tbounds.width !== 0 ? rect.width / bounds.width : 0,\n\t\t\t\t\tbounds.height !== 0 ? rect.height / bounds.height : 0);\n\t\t}\n\t\tcenter = bounds.getCenter();\n\t\tmatrix.translate(-center.x, -center.y);\n\t\tthis.transform(matrix);\n\t},\n\n\t_getBounds: function(matrix, options) {\n\t\tvar children = this._children;\n\t\tif (!children || !children.length)\n\t\t\treturn new Rectangle();\n\t\tItem._updateBoundsCache(this, options.cacheItem);\n\t\treturn Item._getBounds(children, matrix, options);\n\t},\n\n\t_getBoundsCacheKey: function(options, internal) {\n\t\treturn [\n\t\t\toptions.stroke ? 1 : 0,\n\t\t\toptions.handle ? 1 : 0,\n\t\t\tinternal ? 1 : 0\n\t\t].join('');\n\t},\n\n\t_getCachedBounds: function(matrix, options, noInternal) {\n\t\tmatrix = matrix && matrix._orNullIfIdentity();\n\t\tvar internal = options.internal && !noInternal,\n\t\t\tcacheItem = options.cacheItem,\n\t\t\t_matrix = internal ? null : this._matrix._orNullIfIdentity(),\n\t\t\tcacheKey = cacheItem && (!matrix || matrix.equals(_matrix))\n\t\t\t\t&& this._getBoundsCacheKey(options, internal),\n\t\t\tbounds = this._bounds;\n\t\tItem._updateBoundsCache(this._parent || this._symbol, cacheItem);\n\t\tif (cacheKey && bounds && cacheKey in bounds) {\n\t\t\tvar cached = bounds[cacheKey];\n\t\t\treturn {\n\t\t\t\trect: cached.rect.clone(),\n\t\t\t\tnonscaling: cached.nonscaling\n\t\t\t};\n\t\t}\n\t\tvar res = this._getBounds(matrix || _matrix, options),\n\t\t\trect = res.rect || res,\n\t\t\tstyle = this._style,\n\t\t\tnonscaling = res.nonscaling || style.hasStroke()\n\t\t\t\t&& !style.getStrokeScaling();\n\t\tif (cacheKey) {\n\t\t\tif (!bounds) {\n\t\t\t\tthis._bounds = bounds = {};\n\t\t\t}\n\t\t\tvar cached = bounds[cacheKey] = {\n\t\t\t\trect: rect.clone(),\n\t\t\t\tnonscaling: nonscaling,\n\t\t\t\tinternal: internal\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\trect: rect,\n\t\t\tnonscaling: nonscaling\n\t\t};\n\t},\n\n\t_getStrokeMatrix: function(matrix, options) {\n\t\tvar parent = this.getStrokeScaling() ? null\n\t\t\t\t: options && options.internal ? this\n\t\t\t\t\t: this._parent || this._symbol && this._symbol._item,\n\t\t\tmx = parent ? parent.getViewMatrix().invert() : matrix;\n\t\treturn mx && mx._shiftless();\n\t},\n\n\tstatics: {\n\t\t_updateBoundsCache: function(parent, item) {\n\t\t\tif (parent && item) {\n\t\t\t\tvar id = item._id,\n\t\t\t\t\tref = parent._boundsCache = parent._boundsCache || {\n\t\t\t\t\t\tids: {},\n\t\t\t\t\t\tlist: []\n\t\t\t\t\t};\n\t\t\t\tif (!ref.ids[id]) {\n\t\t\t\t\tref.list.push(item);\n\t\t\t\t\tref.ids[id] = item;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_clearBoundsCache: function(item) {\n\t\t\tvar cache = item._boundsCache;\n\t\t\tif (cache) {\n\t\t\t\titem._bounds = item._position = item._boundsCache = undefined;\n\t\t\t\tfor (var i = 0, list = cache.list, l = list.length; i < l; i++){\n\t\t\t\t\tvar other = list[i];\n\t\t\t\t\tif (other !== item) {\n\t\t\t\t\t\tother._bounds = other._position = undefined;\n\t\t\t\t\t\tif (other._boundsCache)\n\t\t\t\t\t\t\tItem._clearBoundsCache(other);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_getBounds: function(items, matrix, options) {\n\t\t\tvar x1 = Infinity,\n\t\t\t\tx2 = -x1,\n\t\t\t\ty1 = x1,\n\t\t\t\ty2 = x2,\n\t\t\t\tnonscaling = false;\n\t\t\toptions = options || {};\n\t\t\tfor (var i = 0, l = items.length; i < l; i++) {\n\t\t\t\tvar item = items[i];\n\t\t\t\tif (item._visible && !item.isEmpty()) {\n\t\t\t\t\tvar bounds = item._getCachedBounds(\n\t\t\t\t\t\tmatrix && matrix.appended(item._matrix), options, true),\n\t\t\t\t\t\trect = bounds.rect;\n\t\t\t\t\tx1 = Math.min(rect.x, x1);\n\t\t\t\t\ty1 = Math.min(rect.y, y1);\n\t\t\t\t\tx2 = Math.max(rect.x + rect.width, x2);\n\t\t\t\t\ty2 = Math.max(rect.y + rect.height, y2);\n\t\t\t\t\tif (bounds.nonscaling)\n\t\t\t\t\t\tnonscaling = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\trect: isFinite(x1)\n\t\t\t\t\t? new Rectangle(x1, y1, x2 - x1, y2 - y1)\n\t\t\t\t\t: new Rectangle(),\n\t\t\t\tnonscaling: nonscaling\n\t\t\t};\n\t\t}\n\t}\n\n}), {\n\tbeans: true,\n\n\t_decompose: function() {\n\t\treturn this._applyMatrix\n\t\t\t? null\n\t\t\t: this._decomposed || (this._decomposed = this._matrix.decompose());\n\t},\n\n\tgetRotation: function() {\n\t\tvar decomposed = this._decompose();\n\t\treturn decomposed ? decomposed.rotation : 0;\n\t},\n\n\tsetRotation: function(rotation) {\n\t\tvar current = this.getRotation();\n\t\tif (current != null && rotation != null) {\n\t\t\tvar decomposed = this._decomposed;\n\t\t\tthis.rotate(rotation - current);\n\t\t\tif (decomposed) {\n\t\t\t\tdecomposed.rotation = rotation;\n\t\t\t\tthis._decomposed = decomposed;\n\t\t\t}\n\t\t}\n\t},\n\n\tgetScaling: function() {\n\t\tvar decomposed = this._decompose(),\n\t\t\ts = decomposed && decomposed.scaling;\n\t\treturn new LinkedPoint(s ? s.x : 1, s ? s.y : 1, this, 'setScaling');\n\t},\n\n\tsetScaling: function() {\n\t\tvar current = this.getScaling(),\n\t\t\tscaling = Point.read(arguments, 0, { clone: true, readNull: true });\n\t\tif (current && scaling && !current.equals(scaling)) {\n\t\t\tvar rotation = this.getRotation(),\n\t\t\t\tdecomposed = this._decomposed,\n\t\t\t\tmatrix = new Matrix(),\n\t\t\t\tcenter = this.getPosition(true);\n\t\t\tmatrix.translate(center);\n\t\t\tif (rotation)\n\t\t\t\tmatrix.rotate(rotation);\n\t\t\tmatrix.scale(scaling.x / current.x, scaling.y / current.y);\n\t\t\tif (rotation)\n\t\t\t\tmatrix.rotate(-rotation);\n\t\t\tmatrix.translate(center.negate());\n\t\t\tthis.transform(matrix);\n\t\t\tif (decomposed) {\n\t\t\t\tdecomposed.scaling = scaling;\n\t\t\t\tthis._decomposed = decomposed;\n\t\t\t}\n\t\t}\n\t},\n\n\tgetMatrix: function() {\n\t\treturn this._matrix;\n\t},\n\n\tsetMatrix: function() {\n\t\tvar matrix = this._matrix;\n\t\tmatrix.initialize.apply(matrix, arguments);\n\t},\n\n\tgetGlobalMatrix: function(_dontClone) {\n\t\tvar matrix = this._globalMatrix,\n\t\t\tupdateVersion = this._project._updateVersion;\n\t\tif (matrix && matrix._updateVersion !== updateVersion)\n\t\t\tmatrix = null;\n\t\tif (!matrix) {\n\t\t\tmatrix = this._globalMatrix = this._matrix.clone();\n\t\t\tvar parent = this._parent;\n\t\t\tif (parent)\n\t\t\t\tmatrix.prepend(parent.getGlobalMatrix(true));\n\t\t\tmatrix._updateVersion = updateVersion;\n\t\t}\n\t\treturn _dontClone ? matrix : matrix.clone();\n\t},\n\n\tgetViewMatrix: function() {\n\t\treturn this.getGlobalMatrix().prepend(this.getView()._matrix);\n\t},\n\n\tgetApplyMatrix: function() {\n\t\treturn this._applyMatrix;\n\t},\n\n\tsetApplyMatrix: function(apply) {\n\t\tif (this._applyMatrix = this._canApplyMatrix && !!apply)\n\t\t\tthis.transform(null, true);\n\t},\n\n\tgetTransformContent: '#getApplyMatrix',\n\tsetTransformContent: '#setApplyMatrix',\n}, {\n\tgetProject: function() {\n\t\treturn this._project;\n\t},\n\n\t_setProject: function(project, installEvents) {\n\t\tif (this._project !== project) {\n\t\t\tif (this._project)\n\t\t\t\tthis._installEvents(false);\n\t\t\tthis._project = project;\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children && children.length; i < l; i++)\n\t\t\t\tchildren[i]._setProject(project);\n\t\t\tinstallEvents = true;\n\t\t}\n\t\tif (installEvents)\n\t\t\tthis._installEvents(true);\n\t},\n\n\tgetView: function() {\n\t\treturn this._project._view;\n\t},\n\n\t_installEvents: function _installEvents(install) {\n\t\t_installEvents.base.call(this, install);\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children && children.length; i < l; i++)\n\t\t\tchildren[i]._installEvents(install);\n\t},\n\n\tgetLayer: function() {\n\t\tvar parent = this;\n\t\twhile (parent = parent._parent) {\n\t\t\tif (parent instanceof Layer)\n\t\t\t\treturn parent;\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetParent: function() {\n\t\treturn this._parent;\n\t},\n\n\tsetParent: function(item) {\n\t\treturn item.addChild(this);\n\t},\n\n\t_getOwner: '#getParent',\n\n\tgetChildren: function() {\n\t\treturn this._children;\n\t},\n\n\tsetChildren: function(items) {\n\t\tthis.removeChildren();\n\t\tthis.addChildren(items);\n\t},\n\n\tgetFirstChild: function() {\n\t\treturn this._children && this._children[0] || null;\n\t},\n\n\tgetLastChild: function() {\n\t\treturn this._children && this._children[this._children.length - 1]\n\t\t\t\t|| null;\n\t},\n\n\tgetNextSibling: function() {\n\t\tvar owner = this._getOwner();\n\t\treturn owner && owner._children[this._index + 1] || null;\n\t},\n\n\tgetPreviousSibling: function() {\n\t\tvar owner = this._getOwner();\n\t\treturn owner && owner._children[this._index - 1] || null;\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._index;\n\t},\n\n\tequals: function(item) {\n\t\treturn item === this || item && this._class === item._class\n\t\t\t\t&& this._style.equals(item._style)\n\t\t\t\t&& this._matrix.equals(item._matrix)\n\t\t\t\t&& this._locked === item._locked\n\t\t\t\t&& this._visible === item._visible\n\t\t\t\t&& this._blendMode === item._blendMode\n\t\t\t\t&& this._opacity === item._opacity\n\t\t\t\t&& this._clipMask === item._clipMask\n\t\t\t\t&& this._guide === item._guide\n\t\t\t\t&& this._equals(item)\n\t\t\t\t|| false;\n\t},\n\n\t_equals: function(item) {\n\t\treturn Base.equals(this._children, item._children);\n\t},\n\n\tclone: function(options) {\n\t\tvar copy = new this.constructor(Item.NO_INSERT),\n\t\t\tchildren = this._children,\n\t\t\tinsert = Base.pick(options ? options.insert : undefined,\n\t\t\t\t\toptions === undefined || options === true),\n\t\t\tdeep = Base.pick(options ? options.deep : undefined, true);\n\t\tif (children)\n\t\t\tcopy.copyAttributes(this);\n\t\tif (!children || deep)\n\t\t\tcopy.copyContent(this);\n\t\tif (!children)\n\t\t\tcopy.copyAttributes(this);\n\t\tif (insert)\n\t\t\tcopy.insertAbove(this);\n\t\tvar name = this._name,\n\t\t\tparent = this._parent;\n\t\tif (name && parent) {\n\t\t\tvar children = parent._children,\n\t\t\t\torig = name,\n\t\t\t\ti = 1;\n\t\t\twhile (children[name])\n\t\t\t\tname = orig + ' ' + (i++);\n\t\t\tif (name !== orig)\n\t\t\t\tcopy.setName(name);\n\t\t}\n\t\treturn copy;\n\t},\n\n\tcopyContent: function(source) {\n\t\tvar children = source._children;\n\t\tfor (var i = 0, l = children && children.length; i < l; i++) {\n\t\t\tthis.addChild(children[i].clone(false), true);\n\t\t}\n\t},\n\n\tcopyAttributes: function(source, excludeMatrix) {\n\t\tthis.setStyle(source._style);\n\t\tvar keys = ['_locked', '_visible', '_blendMode', '_opacity',\n\t\t\t\t'_clipMask', '_guide'];\n\t\tfor (var i = 0, l = keys.length; i < l; i++) {\n\t\t\tvar key = keys[i];\n\t\t\tif (source.hasOwnProperty(key))\n\t\t\t\tthis[key] = source[key];\n\t\t}\n\t\tif (!excludeMatrix)\n\t\t\tthis._matrix.set(source._matrix, true);\n\t\tthis.setApplyMatrix(source._applyMatrix);\n\t\tthis.setPivot(source._pivot);\n\t\tthis.setSelection(source._selection);\n\t\tvar data = source._data,\n\t\t\tname = source._name;\n\t\tthis._data = data ? Base.clone(data) : null;\n\t\tif (name)\n\t\t\tthis.setName(name);\n\t},\n\n\trasterize: function(resolution, insert) {\n\t\tvar bounds = this.getStrokeBounds(),\n\t\t\tscale = (resolution || this.getView().getResolution()) / 72,\n\t\t\ttopLeft = bounds.getTopLeft().floor(),\n\t\t\tbottomRight = bounds.getBottomRight().ceil(),\n\t\t\tsize = new Size(bottomRight.subtract(topLeft)),\n\t\t\traster = new Raster(Item.NO_INSERT);\n\t\tif (!size.isZero()) {\n\t\t\tvar canvas = CanvasProvider.getCanvas(size.multiply(scale)),\n\t\t\t\tctx = canvas.getContext('2d'),\n\t\t\t\tmatrix = new Matrix().scale(scale).translate(topLeft.negate());\n\t\t\tctx.save();\n\t\t\tmatrix.applyToContext(ctx);\n\t\t\tthis.draw(ctx, new Base({ matrices: [matrix] }));\n\t\t\tctx.restore();\n\t\t\traster.setCanvas(canvas);\n\t\t}\n\t\traster.transform(new Matrix().translate(topLeft.add(size.divide(2)))\n\t\t\t\t.scale(1 / scale));\n\t\tif (insert === undefined || insert)\n\t\t\traster.insertAbove(this);\n\t\treturn raster;\n\t},\n\n\tcontains: function() {\n\t\treturn !!this._contains(\n\t\t\t\tthis._matrix._inverseTransform(Point.read(arguments)));\n\t},\n\n\t_contains: function(point) {\n\t\tvar children = this._children;\n\t\tif (children) {\n\t\t\tfor (var i = children.length - 1; i >= 0; i--) {\n\t\t\t\tif (children[i].contains(point))\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn point.isInside(this.getInternalBounds());\n\t},\n\n\tisInside: function() {\n\t\treturn Rectangle.read(arguments).contains(this.getBounds());\n\t},\n\n\t_asPathItem: function() {\n\t\treturn new Path.Rectangle({\n\t\t\trectangle: this.getInternalBounds(),\n\t\t\tmatrix: this._matrix,\n\t\t\tinsert: false,\n\t\t});\n\t},\n\n\tintersects: function(item, _matrix) {\n\t\tif (!(item instanceof Item))\n\t\t\treturn false;\n\t\treturn this._asPathItem().getIntersections(item._asPathItem(), null,\n\t\t\t\t_matrix, true).length > 0;\n\t}\n},\nnew function() {\n\tfunction hitTest() {\n\t\treturn this._hitTest(\n\t\t\t\tPoint.read(arguments),\n\t\t\t\tHitResult.getOptions(arguments));\n\t}\n\n\tfunction hitTestAll() {\n\t\tvar point = Point.read(arguments),\n\t\t\toptions = HitResult.getOptions(arguments),\n\t\t\tall = [];\n\t\tthis._hitTest(point, Base.set({ all: all }, options));\n\t\treturn all;\n\t}\n\n\tfunction hitTestChildren(point, options, viewMatrix, _exclude) {\n\t\tvar children = this._children;\n\t\tif (children) {\n\t\t\tfor (var i = children.length - 1; i >= 0; i--) {\n\t\t\t\tvar child = children[i];\n\t\t\t\tvar res = child !== _exclude && child._hitTest(point, options,\n\t\t\t\t\t\tviewMatrix);\n\t\t\t\tif (res && !options.all)\n\t\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tProject.inject({\n\t\thitTest: hitTest,\n\t\thitTestAll: hitTestAll,\n\t\t_hitTest: hitTestChildren\n\t});\n\n\treturn {\n\t\thitTest: hitTest,\n\t\thitTestAll: hitTestAll,\n\t\t_hitTestChildren: hitTestChildren,\n\t};\n}, {\n\n\t_hitTest: function(point, options, parentViewMatrix) {\n\t\tif (this._locked || !this._visible || this._guide && !options.guides\n\t\t\t\t|| this.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar matrix = this._matrix,\n\t\t\tviewMatrix = parentViewMatrix\n\t\t\t\t\t? parentViewMatrix.appended(matrix)\n\t\t\t\t\t: this.getGlobalMatrix().prepend(this.getView()._matrix),\n\t\t\ttolerance = Math.max(options.tolerance, 1e-12),\n\t\t\ttolerancePadding = options._tolerancePadding = new Size(\n\t\t\t\t\tPath._getStrokePadding(tolerance,\n\t\t\t\t\t\tmatrix._shiftless().invert()));\n\t\tpoint = matrix._inverseTransform(point);\n\t\tif (!point || !this._children &&\n\t\t\t!this.getBounds({ internal: true, stroke: true, handle: true })\n\t\t\t\t.expand(tolerancePadding.multiply(2))._containsPoint(point)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar checkSelf = !(options.guides && !this._guide\n\t\t\t\t|| options.selected && !this.isSelected()\n\t\t\t\t|| options.type && options.type !== Base.hyphenate(this._class)\n\t\t\t\t|| options.class && !(this instanceof options.class)),\n\t\t\tmatch = options.match,\n\t\t\tthat = this,\n\t\t\tbounds,\n\t\t\tres;\n\n\t\tfunction filter(hit) {\n\t\t\tif (hit && match && !match(hit))\n\t\t\t\thit = null;\n\t\t\tif (hit && options.all)\n\t\t\t\toptions.all.push(hit);\n\t\t\treturn hit;\n\t\t}\n\n\t\tfunction checkPoint(type, part) {\n\t\t\tvar pt = part ? bounds['get' + part]() : that.getPosition();\n\t\t\tif (point.subtract(pt).divide(tolerancePadding).length <= 1) {\n\t\t\t\treturn new HitResult(type, that, {\n\t\t\t\t\tname: part ? Base.hyphenate(part) : type,\n\t\t\t\t\tpoint: pt\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tvar checkPosition = options.position,\n\t\t\tcheckCenter = options.center,\n\t\t\tcheckBounds = options.bounds;\n\t\tif (checkSelf && this._parent\n\t\t\t\t&& (checkPosition || checkCenter || checkBounds)) {\n\t\t\tif (checkCenter || checkBounds) {\n\t\t\t\tbounds = this.getInternalBounds();\n\t\t\t}\n\t\t\tres = checkPosition && checkPoint('position') ||\n\t\t\t\t\tcheckCenter && checkPoint('center', 'Center');\n\t\t\tif (!res && checkBounds) {\n\t\t\t\tvar points = [\n\t\t\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',\n\t\t\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'\n\t\t\t\t];\n\t\t\t\tfor (var i = 0; i < 8 && !res; i++) {\n\t\t\t\t\tres = checkPoint('bounds', points[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tres = filter(res);\n\t\t}\n\n\t\tif (!res) {\n\t\t\tres = this._hitTestChildren(point, options, viewMatrix)\n\t\t\t\t|| checkSelf\n\t\t\t\t\t&& filter(this._hitTestSelf(point, options, viewMatrix,\n\t\t\t\t\t\tthis.getStrokeScaling() ? null\n\t\t\t\t\t\t\t: viewMatrix._shiftless().invert()))\n\t\t\t\t|| null;\n\t\t}\n\t\tif (res && res.point) {\n\t\t\tres.point = matrix.transform(res.point);\n\t\t}\n\t\treturn res;\n\t},\n\n\t_hitTestSelf: function(point, options) {\n\t\tif (options.fill && this.hasFill() && this._contains(point))\n\t\t\treturn new HitResult('fill', this);\n\t},\n\n\tmatches: function(name, compare) {\n\t\tfunction matchObject(obj1, obj2) {\n\t\t\tfor (var i in obj1) {\n\t\t\t\tif (obj1.hasOwnProperty(i)) {\n\t\t\t\t\tvar val1 = obj1[i],\n\t\t\t\t\t\tval2 = obj2[i];\n\t\t\t\t\tif (Base.isPlainObject(val1) && Base.isPlainObject(val2)) {\n\t\t\t\t\t\tif (!matchObject(val1, val2))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (!Base.equals(val1, val2)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tvar type = typeof name;\n\t\tif (type === 'object') {\n\t\t\tfor (var key in name) {\n\t\t\t\tif (name.hasOwnProperty(key) && !this.matches(key, name[key]))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t} else if (type === 'function') {\n\t\t\treturn name(this);\n\t\t} else if (name === 'match') {\n\t\t\treturn compare(this);\n\t\t} else {\n\t\t\tvar value = /^(empty|editable)$/.test(name)\n\t\t\t\t\t? this['is' + Base.capitalize(name)]()\n\t\t\t\t\t: name === 'type'\n\t\t\t\t\t\t? Base.hyphenate(this._class)\n\t\t\t\t\t\t: this[name];\n\t\t\tif (name === 'class') {\n\t\t\t\tif (typeof compare === 'function')\n\t\t\t\t\treturn this instanceof compare;\n\t\t\t\tvalue = this._class;\n\t\t\t}\n\t\t\tif (typeof compare === 'function') {\n\t\t\t\treturn !!compare(value);\n\t\t\t} else if (compare) {\n\t\t\t\tif (compare.test) {\n\t\t\t\t\treturn compare.test(value);\n\t\t\t\t} else if (Base.isPlainObject(compare)) {\n\t\t\t\t\treturn matchObject(compare, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Base.equals(value, compare);\n\t\t}\n\t},\n\n\tgetItems: function(options) {\n\t\treturn Item._getItems(this, options, this._matrix);\n\t},\n\n\tgetItem: function(options) {\n\t\treturn Item._getItems(this, options, this._matrix, null, true)[0]\n\t\t\t\t|| null;\n\t},\n\n\tstatics: {\n\t\t_getItems: function _getItems(item, options, matrix, param, firstOnly) {\n\t\t\tif (!param) {\n\t\t\t\tvar obj = typeof options === 'object' && options,\n\t\t\t\t\toverlapping = obj && obj.overlapping,\n\t\t\t\t\tinside = obj && obj.inside,\n\t\t\t\t\tbounds = overlapping || inside,\n\t\t\t\t\trect = bounds && Rectangle.read([bounds]);\n\t\t\t\tparam = {\n\t\t\t\t\titems: [],\n\t\t\t\t\trecursive: obj && obj.recursive !== false,\n\t\t\t\t\tinside: !!inside,\n\t\t\t\t\toverlapping: !!overlapping,\n\t\t\t\t\trect: rect,\n\t\t\t\t\tpath: overlapping && new Path.Rectangle({\n\t\t\t\t\t\trectangle: rect,\n\t\t\t\t\t\tinsert: false\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t\tif (obj) {\n\t\t\t\t\toptions = Base.filter({}, options, {\n\t\t\t\t\t\trecursive: true, inside: true, overlapping: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar children = item._children,\n\t\t\t\titems = param.items,\n\t\t\t\trect = param.rect;\n\t\t\tmatrix = rect && (matrix || new Matrix());\n\t\t\tfor (var i = 0, l = children && children.length; i < l; i++) {\n\t\t\t\tvar child = children[i],\n\t\t\t\t\tchildMatrix = matrix && matrix.appended(child._matrix),\n\t\t\t\t\tadd = true;\n\t\t\t\tif (rect) {\n\t\t\t\t\tvar bounds = child.getBounds(childMatrix);\n\t\t\t\t\tif (!rect.intersects(bounds))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (!(rect.contains(bounds)\n\t\t\t\t\t\t\t|| param.overlapping && (bounds.contains(rect)\n\t\t\t\t\t\t\t\t|| param.path.intersects(child, childMatrix))))\n\t\t\t\t\t\tadd = false;\n\t\t\t\t}\n\t\t\t\tif (add && child.matches(options)) {\n\t\t\t\t\titems.push(child);\n\t\t\t\t\tif (firstOnly)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (param.recursive !== false) {\n\t\t\t\t\t_getItems(child, options, childMatrix, param, firstOnly);\n\t\t\t\t}\n\t\t\t\tif (firstOnly && items.length > 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn items;\n\t\t}\n\t}\n}, {\n\n\timportJSON: function(json) {\n\t\tvar res = Base.importJSON(json, this);\n\t\treturn res !== this ? this.addChild(res) : res;\n\t},\n\n\taddChild: function(item) {\n\t\treturn this.insertChild(undefined, item);\n\t},\n\n\tinsertChild: function(index, item) {\n\t\tvar res = item ? this.insertChildren(index, [item]) : null;\n\t\treturn res && res[0];\n\t},\n\n\taddChildren: function(items) {\n\t\treturn this.insertChildren(this._children.length, items);\n\t},\n\n\tinsertChildren: function(index, items) {\n\t\tvar children = this._children;\n\t\tif (children && items && items.length > 0) {\n\t\t\titems = Base.slice(items);\n\t\t\tvar inserted = {};\n\t\t\tfor (var i = items.length - 1; i >= 0; i--) {\n\t\t\t\tvar item = items[i],\n\t\t\t\t\tid = item && item._id;\n\t\t\t\tif (!item || inserted[id]) {\n\t\t\t\t\titems.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\titem._remove(false, true);\n\t\t\t\t\tinserted[id] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tBase.splice(children, items, index, 0);\n\t\t\tvar project = this._project,\n\t\t\t\tnotifySelf = project._changes;\n\t\t\tfor (var i = 0, l = items.length; i < l; i++) {\n\t\t\t\tvar item = items[i],\n\t\t\t\t\tname = item._name;\n\t\t\t\titem._parent = this;\n\t\t\t\titem._setProject(project, true);\n\t\t\t\tif (name)\n\t\t\t\t\titem.setName(name);\n\t\t\t\tif (notifySelf)\n\t\t\t\t\titem._changed(5);\n\t\t\t}\n\t\t\tthis._changed(11);\n\t\t} else {\n\t\t\titems = null;\n\t\t}\n\t\treturn items;\n\t},\n\n\t_insertItem: '#insertChild',\n\n\t_insertAt: function(item, offset) {\n\t\tvar owner = item && item._getOwner(),\n\t\t\tres = item !== this && owner ? this : null;\n\t\tif (res) {\n\t\t\tres._remove(false, true);\n\t\t\towner._insertItem(item._index + offset, res);\n\t\t}\n\t\treturn res;\n\t},\n\n\tinsertAbove: function(item) {\n\t\treturn this._insertAt(item, 1);\n\t},\n\n\tinsertBelow: function(item) {\n\t\treturn this._insertAt(item, 0);\n\t},\n\n\tsendToBack: function() {\n\t\tvar owner = this._getOwner();\n\t\treturn owner ? owner._insertItem(0, this) : null;\n\t},\n\n\tbringToFront: function() {\n\t\tvar owner = this._getOwner();\n\t\treturn owner ? owner._insertItem(undefined, this) : null;\n\t},\n\n\tappendTop: '#addChild',\n\n\tappendBottom: function(item) {\n\t\treturn this.insertChild(0, item);\n\t},\n\n\tmoveAbove: '#insertAbove',\n\n\tmoveBelow: '#insertBelow',\n\n\taddTo: function(owner) {\n\t\treturn owner._insertItem(undefined, this);\n\t},\n\n\tcopyTo: function(owner) {\n\t\treturn this.clone(false).addTo(owner);\n\t},\n\n\treduce: function(options) {\n\t\tvar children = this._children;\n\t\tif (children && children.length === 1) {\n\t\t\tvar child = children[0].reduce(options);\n\t\t\tif (this._parent) {\n\t\t\t\tchild.insertAbove(this);\n\t\t\t\tthis.remove();\n\t\t\t} else {\n\t\t\t\tchild.remove();\n\t\t\t}\n\t\t\treturn child;\n\t\t}\n\t\treturn this;\n\t},\n\n\t_removeNamed: function() {\n\t\tvar owner = this._getOwner();\n\t\tif (owner) {\n\t\t\tvar children = owner._children,\n\t\t\t\tnamedChildren = owner._namedChildren,\n\t\t\t\tname = this._name,\n\t\t\t\tnamedArray = namedChildren[name],\n\t\t\t\tindex = namedArray ? namedArray.indexOf(this) : -1;\n\t\t\tif (index !== -1) {\n\t\t\t\tif (children[name] == this)\n\t\t\t\t\tdelete children[name];\n\t\t\t\tnamedArray.splice(index, 1);\n\t\t\t\tif (namedArray.length) {\n\t\t\t\t\tchildren[name] = namedArray[0];\n\t\t\t\t} else {\n\t\t\t\t\tdelete namedChildren[name];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_remove: function(notifySelf, notifyParent) {\n\t\tvar owner = this._getOwner(),\n\t\t\tproject = this._project,\n\t\t\tindex = this._index;\n\t\tif (owner) {\n\t\t\tif (this._name)\n\t\t\t\tthis._removeNamed();\n\t\t\tif (index != null) {\n\t\t\t\tif (project._activeLayer === this)\n\t\t\t\t\tproject._activeLayer = this.getNextSibling()\n\t\t\t\t\t\t\t|| this.getPreviousSibling();\n\t\t\t\tBase.splice(owner._children, null, index, 1);\n\t\t\t}\n\t\t\tthis._installEvents(false);\n\t\t\tif (notifySelf && project._changes)\n\t\t\t\tthis._changed(5);\n\t\t\tif (notifyParent)\n\t\t\t\towner._changed(11, this);\n\t\t\tthis._parent = null;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tremove: function() {\n\t\treturn this._remove(true, true);\n\t},\n\n\treplaceWith: function(item) {\n\t\tvar ok = item && item.insertBelow(this);\n\t\tif (ok)\n\t\t\tthis.remove();\n\t\treturn ok;\n\t},\n\n\tremoveChildren: function(start, end) {\n\t\tif (!this._children)\n\t\t\treturn null;\n\t\tstart = start || 0;\n\t\tend = Base.pick(end, this._children.length);\n\t\tvar removed = Base.splice(this._children, null, start, end - start);\n\t\tfor (var i = removed.length - 1; i >= 0; i--) {\n\t\t\tremoved[i]._remove(true, false);\n\t\t}\n\t\tif (removed.length > 0)\n\t\t\tthis._changed(11);\n\t\treturn removed;\n\t},\n\n\tclear: '#removeChildren',\n\n\treverseChildren: function() {\n\t\tif (this._children) {\n\t\t\tthis._children.reverse();\n\t\t\tfor (var i = 0, l = this._children.length; i < l; i++)\n\t\t\t\tthis._children[i]._index = i;\n\t\t\tthis._changed(11);\n\t\t}\n\t},\n\n\tisEmpty: function() {\n\t\tvar children = this._children;\n\t\treturn !children || !children.length;\n\t},\n\n\tisEditable: function() {\n\t\tvar item = this;\n\t\twhile (item) {\n\t\t\tif (!item._visible || item._locked)\n\t\t\t\treturn false;\n\t\t\titem = item._parent;\n\t\t}\n\t\treturn true;\n\t},\n\n\thasFill: function() {\n\t\treturn this.getStyle().hasFill();\n\t},\n\n\thasStroke: function() {\n\t\treturn this.getStyle().hasStroke();\n\t},\n\n\thasShadow: function() {\n\t\treturn this.getStyle().hasShadow();\n\t},\n\n\t_getOrder: function(item) {\n\t\tfunction getList(item) {\n\t\t\tvar list = [];\n\t\t\tdo {\n\t\t\t\tlist.unshift(item);\n\t\t\t} while (item = item._parent);\n\t\t\treturn list;\n\t\t}\n\t\tvar list1 = getList(this),\n\t\t\tlist2 = getList(item);\n\t\tfor (var i = 0, l = Math.min(list1.length, list2.length); i < l; i++) {\n\t\t\tif (list1[i] != list2[i]) {\n\t\t\t\treturn list1[i]._index < list2[i]._index ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t},\n\n\thasChildren: function() {\n\t\treturn this._children && this._children.length > 0;\n\t},\n\n\tisInserted: function() {\n\t\treturn this._parent ? this._parent.isInserted() : false;\n\t},\n\n\tisAbove: function(item) {\n\t\treturn this._getOrder(item) === -1;\n\t},\n\n\tisBelow: function(item) {\n\t\treturn this._getOrder(item) === 1;\n\t},\n\n\tisParent: function(item) {\n\t\treturn this._parent === item;\n\t},\n\n\tisChild: function(item) {\n\t\treturn item && item._parent === this;\n\t},\n\n\tisDescendant: function(item) {\n\t\tvar parent = this;\n\t\twhile (parent = parent._parent) {\n\t\t\tif (parent === item)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tisAncestor: function(item) {\n\t\treturn item ? item.isDescendant(this) : false;\n\t},\n\n\tisSibling: function(item) {\n\t\treturn this._parent === item._parent;\n\t},\n\n\tisGroupedWith: function(item) {\n\t\tvar parent = this._parent;\n\t\twhile (parent) {\n\t\t\tif (parent._parent\n\t\t\t\t&& /^(Group|Layer|CompoundPath)$/.test(parent._class)\n\t\t\t\t&& item.isDescendant(parent))\n\t\t\t\t\treturn true;\n\t\t\tparent = parent._parent;\n\t\t}\n\t\treturn false;\n\t},\n\n}, Base.each(['rotate', 'scale', 'shear', 'skew'], function(key) {\n\tvar rotate = key === 'rotate';\n\tthis[key] = function() {\n\t\tvar value = (rotate ? Base : Point).read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\treturn this.transform(new Matrix()[key](value,\n\t\t\t\tcenter || this.getPosition(true)));\n\t};\n}, {\n\ttranslate: function() {\n\t\tvar mx = new Matrix();\n\t\treturn this.transform(mx.translate.apply(mx, arguments));\n\t},\n\n\ttransform: function(matrix, _applyMatrix, _applyRecursively,\n\t\t\t_setApplyMatrix) {\n\t\tvar _matrix = this._matrix,\n\t\t\ttransform = matrix && !matrix.isIdentity(),\n\t\t\tapplyMatrix = (_applyMatrix || this._applyMatrix)\n\t\t\t\t\t&& ((!_matrix.isIdentity() || transform)\n\t\t\t\t\t\t|| _applyMatrix && _applyRecursively && this._children);\n\t\tif (!transform && !applyMatrix)\n\t\t\treturn this;\n\t\tif (transform) {\n\t\t\tif (!matrix.isInvertible() && _matrix.isInvertible())\n\t\t\t\t_matrix._backup = _matrix.getValues();\n\t\t\t_matrix.prepend(matrix, true);\n\t\t\tvar style = this._style,\n\t\t\t\tfillColor = style.getFillColor(true),\n\t\t\t\tstrokeColor = style.getStrokeColor(true);\n\t\t\tif (fillColor)\n\t\t\t\tfillColor.transform(matrix);\n\t\t\tif (strokeColor)\n\t\t\t\tstrokeColor.transform(matrix);\n\t\t}\n\t\tif (applyMatrix && (applyMatrix = this._transformContent(_matrix,\n\t\t\t\t_applyRecursively, _setApplyMatrix))) {\n\t\t\tvar pivot = this._pivot;\n\t\t\tif (pivot)\n\t\t\t\t_matrix._transformPoint(pivot, pivot, true);\n\t\t\t_matrix.reset(true);\n\t\t\tif (_setApplyMatrix && this._canApplyMatrix)\n\t\t\t\tthis._applyMatrix = true;\n\t\t}\n\t\tvar bounds = this._bounds,\n\t\t\tposition = this._position;\n\t\tif (transform || applyMatrix) {\n\t\t\tthis._changed(9);\n\t\t}\n\t\tvar decomp = transform && bounds && matrix.decompose();\n\t\tif (decomp && decomp.skewing.isZero() && decomp.rotation % 90 === 0) {\n\t\t\tfor (var key in bounds) {\n\t\t\t\tvar cache = bounds[key];\n\t\t\t\tif (cache.nonscaling) {\n\t\t\t\t\tdelete bounds[key];\n\t\t\t\t} else if (applyMatrix || !cache.internal) {\n\t\t\t\t\tvar rect = cache.rect;\n\t\t\t\t\tmatrix._transformBounds(rect, rect);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._bounds = bounds;\n\t\t\tvar cached = bounds[this._getBoundsCacheKey(\n\t\t\t\t\tthis._boundsOptions || {})];\n\t\t\tif (cached) {\n\t\t\t\tthis._position = cached.rect.getCenter(true);\n\t\t\t}\n\t\t} else if (transform && position && this._pivot) {\n\t\t\tthis._position = matrix._transformPoint(position, position);\n\t\t}\n\t\treturn this;\n\t},\n\n\t_transformContent: function(matrix, applyRecursively, setApplyMatrix) {\n\t\tvar children = this._children;\n\t\tif (children) {\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].transform(matrix, true, applyRecursively,\n\t\t\t\t\t\tsetApplyMatrix);\n\t\t\treturn true;\n\t\t}\n\t},\n\n\tglobalToLocal: function() {\n\t\treturn this.getGlobalMatrix(true)._inverseTransform(\n\t\t\t\tPoint.read(arguments));\n\t},\n\n\tlocalToGlobal: function() {\n\t\treturn this.getGlobalMatrix(true)._transformPoint(\n\t\t\t\tPoint.read(arguments));\n\t},\n\n\tparentToLocal: function() {\n\t\treturn this._matrix._inverseTransform(Point.read(arguments));\n\t},\n\n\tlocalToParent: function() {\n\t\treturn this._matrix._transformPoint(Point.read(arguments));\n\t},\n\n\tfitBounds: function(rectangle, fill) {\n\t\trectangle = Rectangle.read(arguments);\n\t\tvar bounds = this.getBounds(),\n\t\t\titemRatio = bounds.height / bounds.width,\n\t\t\trectRatio = rectangle.height / rectangle.width,\n\t\t\tscale = (fill ? itemRatio > rectRatio : itemRatio < rectRatio)\n\t\t\t\t\t? rectangle.width / bounds.width\n\t\t\t\t\t: rectangle.height / bounds.height,\n\t\t\tnewBounds = new Rectangle(new Point(),\n\t\t\t\t\tnew Size(bounds.width * scale, bounds.height * scale));\n\t\tnewBounds.setCenter(rectangle.getCenter());\n\t\tthis.setBounds(newBounds);\n\t}\n}), {\n\n\t_setStyles: function(ctx, param, viewMatrix) {\n\t\tvar style = this._style,\n\t\t\tmatrix = this._matrix;\n\t\tif (style.hasFill()) {\n\t\t\tctx.fillStyle = style.getFillColor().toCanvasStyle(ctx, matrix);\n\t\t}\n\t\tif (style.hasStroke()) {\n\t\t\tctx.strokeStyle = style.getStrokeColor().toCanvasStyle(ctx, matrix);\n\t\t\tctx.lineWidth = style.getStrokeWidth();\n\t\t\tvar strokeJoin = style.getStrokeJoin(),\n\t\t\t\tstrokeCap = style.getStrokeCap(),\n\t\t\t\tmiterLimit = style.getMiterLimit();\n\t\t\tif (strokeJoin)\n\t\t\t\tctx.lineJoin = strokeJoin;\n\t\t\tif (strokeCap)\n\t\t\t\tctx.lineCap = strokeCap;\n\t\t\tif (miterLimit)\n\t\t\t\tctx.miterLimit = miterLimit;\n\t\t\tif (paper.support.nativeDash) {\n\t\t\t\tvar dashArray = style.getDashArray(),\n\t\t\t\t\tdashOffset = style.getDashOffset();\n\t\t\t\tif (dashArray && dashArray.length) {\n\t\t\t\t\tif ('setLineDash' in ctx) {\n\t\t\t\t\t\tctx.setLineDash(dashArray);\n\t\t\t\t\t\tctx.lineDashOffset = dashOffset;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.mozDash = dashArray;\n\t\t\t\t\t\tctx.mozDashOffset = dashOffset;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (style.hasShadow()) {\n\t\t\tvar pixelRatio = param.pixelRatio || 1,\n\t\t\t\tmx = viewMatrix._shiftless().prepend(\n\t\t\t\t\tnew Matrix().scale(pixelRatio, pixelRatio)),\n\t\t\t\tblur = mx.transform(new Point(style.getShadowBlur(), 0)),\n\t\t\t\toffset = mx.transform(this.getShadowOffset());\n\t\t\tctx.shadowColor = style.getShadowColor().toCanvasStyle(ctx);\n\t\t\tctx.shadowBlur = blur.getLength();\n\t\t\tctx.shadowOffsetX = offset.x;\n\t\t\tctx.shadowOffsetY = offset.y;\n\t\t}\n\t},\n\n\tdraw: function(ctx, param, parentStrokeMatrix) {\n\t\tvar updateVersion = this._updateVersion = this._project._updateVersion;\n\t\tif (!this._visible || this._opacity === 0)\n\t\t\treturn;\n\t\tvar matrices = param.matrices,\n\t\t\tviewMatrix = param.viewMatrix,\n\t\t\tmatrix = this._matrix,\n\t\t\tglobalMatrix = matrices[matrices.length - 1].appended(matrix);\n\t\tif (!globalMatrix.isInvertible())\n\t\t\treturn;\n\n\t\tviewMatrix = viewMatrix ? viewMatrix.appended(globalMatrix)\n\t\t\t\t: globalMatrix;\n\n\t\tmatrices.push(globalMatrix);\n\t\tif (param.updateMatrix) {\n\t\t\tglobalMatrix._updateVersion = updateVersion;\n\t\t\tthis._globalMatrix = globalMatrix;\n\t\t}\n\n\t\tvar blendMode = this._blendMode,\n\t\t\topacity = this._opacity,\n\t\t\tnormalBlend = blendMode === 'normal',\n\t\t\tnativeBlend = BlendMode.nativeModes[blendMode],\n\t\t\tdirect = normalBlend && opacity === 1\n\t\t\t\t\t|| param.dontStart\n\t\t\t\t\t|| param.clip\n\t\t\t\t\t|| (nativeBlend || normalBlend && opacity < 1)\n\t\t\t\t\t\t&& this._canComposite(),\n\t\t\tpixelRatio = param.pixelRatio || 1,\n\t\t\tmainCtx, itemOffset, prevOffset;\n\t\tif (!direct) {\n\t\t\tvar bounds = this.getStrokeBounds(viewMatrix);\n\t\t\tif (!bounds.width || !bounds.height)\n\t\t\t\treturn;\n\t\t\tprevOffset = param.offset;\n\t\t\titemOffset = param.offset = bounds.getTopLeft().floor();\n\t\t\tmainCtx = ctx;\n\t\t\tctx = CanvasProvider.getContext(bounds.getSize().ceil().add(1)\n\t\t\t\t\t.multiply(pixelRatio));\n\t\t\tif (pixelRatio !== 1)\n\t\t\t\tctx.scale(pixelRatio, pixelRatio);\n\t\t}\n\t\tctx.save();\n\t\tvar strokeMatrix = parentStrokeMatrix\n\t\t\t\t? parentStrokeMatrix.appended(matrix)\n\t\t\t\t: this._canScaleStroke && !this.getStrokeScaling(true)\n\t\t\t\t\t&& viewMatrix,\n\t\t\tclip = !direct && param.clipItem,\n\t\t\ttransform = !strokeMatrix || clip;\n\t\tif (direct) {\n\t\t\tctx.globalAlpha = opacity;\n\t\t\tif (nativeBlend)\n\t\t\t\tctx.globalCompositeOperation = blendMode;\n\t\t} else if (transform) {\n\t\t\tctx.translate(-itemOffset.x, -itemOffset.y);\n\t\t}\n\t\tif (transform) {\n\t\t\t(direct ? matrix : viewMatrix).applyToContext(ctx);\n\t\t}\n\t\tif (clip) {\n\t\t\tparam.clipItem.draw(ctx, param.extend({ clip: true }));\n\t\t}\n\t\tif (strokeMatrix) {\n\t\t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\t\t\tvar offset = param.offset;\n\t\t\tif (offset)\n\t\t\t\tctx.translate(-offset.x, -offset.y);\n\t\t}\n\t\tthis._draw(ctx, param, viewMatrix, strokeMatrix);\n\t\tctx.restore();\n\t\tmatrices.pop();\n\t\tif (param.clip && !param.dontFinish)\n\t\t\tctx.clip();\n\t\tif (!direct) {\n\t\t\tBlendMode.process(blendMode, ctx, mainCtx, opacity,\n\t\t\t\t\titemOffset.subtract(prevOffset).multiply(pixelRatio));\n\t\t\tCanvasProvider.release(ctx);\n\t\t\tparam.offset = prevOffset;\n\t\t}\n\t},\n\n\t_isUpdated: function(updateVersion) {\n\t\tvar parent = this._parent;\n\t\tif (parent instanceof CompoundPath)\n\t\t\treturn parent._isUpdated(updateVersion);\n\t\tvar updated = this._updateVersion === updateVersion;\n\t\tif (!updated && parent && parent._visible\n\t\t\t\t&& parent._isUpdated(updateVersion)) {\n\t\t\tthis._updateVersion = updateVersion;\n\t\t\tupdated = true;\n\t\t}\n\t\treturn updated;\n\t},\n\n\t_drawSelection: function(ctx, matrix, size, selectionItems, updateVersion) {\n\t\tvar selection = this._selection,\n\t\t\titemSelected = selection & 1,\n\t\t\tboundsSelected = selection & 2\n\t\t\t\t\t|| itemSelected && this._selectBounds,\n\t\t\tpositionSelected = selection & 4;\n\t\tif (!this._drawSelected)\n\t\t\titemSelected = false;\n\t\tif ((itemSelected || boundsSelected || positionSelected)\n\t\t\t\t&& this._isUpdated(updateVersion)) {\n\t\t\tvar layer,\n\t\t\t\tcolor = this.getSelectedColor(true) || (layer = this.getLayer())\n\t\t\t\t\t&& layer.getSelectedColor(true),\n\t\t\t\tmx = matrix.appended(this.getGlobalMatrix(true)),\n\t\t\t\thalf = size / 2;\n\t\t\tctx.strokeStyle = ctx.fillStyle = color\n\t\t\t\t\t? color.toCanvasStyle(ctx) : '#009dec';\n\t\t\tif (itemSelected)\n\t\t\t\tthis._drawSelected(ctx, mx, selectionItems);\n\t\t\tif (positionSelected) {\n\t\t\t\tvar point = this.getPosition(true),\n\t\t\t\t\tx = point.x,\n\t\t\t\t\ty = point.y;\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(x, y, half, 0, Math.PI * 2, true);\n\t\t\t\tctx.stroke();\n\t\t\t\tvar deltas = [[0, -1], [1, 0], [0, 1], [-1, 0]],\n\t\t\t\t\tstart = half,\n\t\t\t\t\tend = size + 1;\n\t\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\t\tvar delta = deltas[i],\n\t\t\t\t\t\tdx = delta[0],\n\t\t\t\t\t\tdy = delta[1];\n\t\t\t\t\tctx.moveTo(x + dx * start, y + dy * start);\n\t\t\t\t\tctx.lineTo(x + dx * end, y + dy * end);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (boundsSelected) {\n\t\t\t\tvar coords = mx._transformCorners(this.getInternalBounds());\n\t\t\t\tctx.beginPath();\n\t\t\t\tfor (var i = 0; i < 8; i++) {\n\t\t\t\t\tctx[!i ? 'moveTo' : 'lineTo'](coords[i], coords[++i]);\n\t\t\t\t}\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.stroke();\n\t\t\t\tfor (var i = 0; i < 8; i++) {\n\t\t\t\t\tctx.fillRect(coords[i] - half, coords[++i] - half,\n\t\t\t\t\t\t\tsize, size);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn false;\n\t}\n}, Base.each(['down', 'drag', 'up', 'move'], function(key) {\n\tthis['removeOn' + Base.capitalize(key)] = function() {\n\t\tvar hash = {};\n\t\thash[key] = true;\n\t\treturn this.removeOn(hash);\n\t};\n}, {\n\n\tremoveOn: function(obj) {\n\t\tfor (var name in obj) {\n\t\t\tif (obj[name]) {\n\t\t\t\tvar key = 'mouse' + name,\n\t\t\t\t\tproject = this._project,\n\t\t\t\t\tsets = project._removeSets = project._removeSets || {};\n\t\t\t\tsets[key] = sets[key] || {};\n\t\t\t\tsets[key][this._id] = this;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n}));\n\nvar Group = Item.extend({\n\t_class: 'Group',\n\t_selectBounds: false,\n\t_selectChildren: true,\n\t_serializeFields: {\n\t\tchildren: []\n\t},\n\n\tinitialize: function Group(arg) {\n\t\tthis._children = [];\n\t\tthis._namedChildren = {};\n\t\tif (!this._initialize(arg))\n\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);\n\t},\n\n\t_changed: function _changed(flags) {\n\t\t_changed.base.call(this, flags);\n\t\tif (flags & 1026) {\n\t\t\tthis._clipItem = undefined;\n\t\t}\n\t},\n\n\t_getClipItem: function() {\n\t\tvar clipItem = this._clipItem;\n\t\tif (clipItem === undefined) {\n\t\t\tclipItem = null;\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tif (children[i]._clipMask) {\n\t\t\t\t\tclipItem = children[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._clipItem = clipItem;\n\t\t}\n\t\treturn clipItem;\n\t},\n\n\tisClipped: function() {\n\t\treturn !!this._getClipItem();\n\t},\n\n\tsetClipped: function(clipped) {\n\t\tvar child = this.getFirstChild();\n\t\tif (child)\n\t\t\tchild.setClipMask(clipped);\n\t},\n\n\t_getBounds: function _getBounds(matrix, options) {\n\t\tvar clipItem = this._getClipItem();\n\t\treturn clipItem\n\t\t\t? clipItem._getCachedBounds(\n\t\t\t\tmatrix && matrix.appended(clipItem._matrix),\n\t\t\t\tBase.set({}, options, { stroke: false }))\n\t\t\t: _getBounds.base.call(this, matrix, options);\n\t},\n\n\t_hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {\n\t\tvar clipItem = this._getClipItem();\n\t\treturn (!clipItem || clipItem.contains(point))\n\t\t\t\t&& _hitTestChildren.base.call(this, point, options, viewMatrix,\n\t\t\t\t\tclipItem);\n\t},\n\n\t_draw: function(ctx, param) {\n\t\tvar clip = param.clip,\n\t\t\tclipItem = !clip && this._getClipItem();\n\t\tparam = param.extend({ clipItem: clipItem, clip: false });\n\t\tif (clip) {\n\t\t\tctx.beginPath();\n\t\t\tparam.dontStart = param.dontFinish = true;\n\t\t} else if (clipItem) {\n\t\t\tclipItem.draw(ctx, param.extend({ clip: true }));\n\t\t}\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar item = children[i];\n\t\t\tif (item !== clipItem)\n\t\t\t\titem.draw(ctx, param);\n\t\t}\n\t}\n});\n\nvar Layer = Group.extend({\n\t_class: 'Layer',\n\n\tinitialize: function Layer() {\n\t\tGroup.apply(this, arguments);\n\t},\n\n\t_getOwner: function() {\n\t\treturn this._parent || this._index != null && this._project;\n\t},\n\n\tisInserted: function isInserted() {\n\t\treturn this._parent ? isInserted.base.call(this) : this._index != null;\n\t},\n\n\tactivate: function() {\n\t\tthis._project._activeLayer = this;\n\t},\n\n\t_hitTestSelf: function() {\n\t}\n});\n\nvar Shape = Item.extend({\n\t_class: 'Shape',\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_canScaleStroke: true,\n\t_serializeFields: {\n\t\ttype: null,\n\t\tsize: null,\n\t\tradius: null\n\t},\n\n\tinitialize: function Shape(props, point) {\n\t\tthis._initialize(props, point);\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._type === item._type\n\t\t\t&& this._size.equals(item._size)\n\t\t\t&& Base.equals(this._radius, item._radius);\n\t},\n\n\tcopyContent: function(source) {\n\t\tthis.setType(source._type);\n\t\tthis.setSize(source._size);\n\t\tthis.setRadius(source._radius);\n\t},\n\n\tgetType: function() {\n\t\treturn this._type;\n\t},\n\n\tsetType: function(type) {\n\t\tthis._type = type;\n\t},\n\n\tgetShape: '#getType',\n\tsetShape: '#setType',\n\n\tgetSize: function() {\n\t\tvar size = this._size;\n\t\treturn new LinkedSize(size.width, size.height, this, 'setSize');\n\t},\n\n\tsetSize: function() {\n\t\tvar size = Size.read(arguments);\n\t\tif (!this._size) {\n\t\t\tthis._size = size.clone();\n\t\t} else if (!this._size.equals(size)) {\n\t\t\tvar type = this._type,\n\t\t\t\twidth = size.width,\n\t\t\t\theight = size.height;\n\t\t\tif (type === 'rectangle') {\n\t\t\t\tthis._radius.set(Size.min(this._radius, size.divide(2)));\n\t\t\t} else if (type === 'circle') {\n\t\t\t\twidth = height = (width + height) / 2;\n\t\t\t\tthis._radius = width / 2;\n\t\t\t} else if (type === 'ellipse') {\n\t\t\t\tthis._radius._set(width / 2, height / 2);\n\t\t\t}\n\t\t\tthis._size._set(width, height);\n\t\t\tthis._changed(9);\n\t\t}\n\t},\n\n\tgetRadius: function() {\n\t\tvar rad = this._radius;\n\t\treturn this._type === 'circle'\n\t\t\t\t? rad\n\t\t\t\t: new LinkedSize(rad.width, rad.height, this, 'setRadius');\n\t},\n\n\tsetRadius: function(radius) {\n\t\tvar type = this._type;\n\t\tif (type === 'circle') {\n\t\t\tif (radius === this._radius)\n\t\t\t\treturn;\n\t\t\tvar size = radius * 2;\n\t\t\tthis._radius = radius;\n\t\t\tthis._size._set(size, size);\n\t\t} else {\n\t\t\tradius = Size.read(arguments);\n\t\t\tif (!this._radius) {\n\t\t\t\tthis._radius = radius.clone();\n\t\t\t} else {\n\t\t\t\tif (this._radius.equals(radius))\n\t\t\t\t\treturn;\n\t\t\t\tthis._radius.set(radius);\n\t\t\t\tif (type === 'rectangle') {\n\t\t\t\t\tvar size = Size.max(this._size, radius.multiply(2));\n\t\t\t\t\tthis._size.set(size);\n\t\t\t\t} else if (type === 'ellipse') {\n\t\t\t\t\tthis._size._set(radius.width * 2, radius.height * 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._changed(9);\n\t},\n\n\tisEmpty: function() {\n\t\treturn false;\n\t},\n\n\ttoPath: function(insert) {\n\t\tvar path = new Path[Base.capitalize(this._type)]({\n\t\t\tcenter: new Point(),\n\t\t\tsize: this._size,\n\t\t\tradius: this._radius,\n\t\t\tinsert: false\n\t\t});\n\t\tpath.copyAttributes(this);\n\t\tif (paper.settings.applyMatrix)\n\t\t\tpath.setApplyMatrix(true);\n\t\tif (insert === undefined || insert)\n\t\t\tpath.insertAbove(this);\n\t\treturn path;\n\t},\n\n\ttoShape: '#clone',\n\n\t_asPathItem: function() {\n\t\treturn this.toPath(false);\n\t},\n\n\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {\n\t\tvar style = this._style,\n\t\t\thasFill = style.hasFill(),\n\t\t\thasStroke = style.hasStroke(),\n\t\t\tdontPaint = param.dontFinish || param.clip,\n\t\t\tuntransformed = !strokeMatrix;\n\t\tif (hasFill || hasStroke || dontPaint) {\n\t\t\tvar type = this._type,\n\t\t\t\tradius = this._radius,\n\t\t\t\tisCircle = type === 'circle';\n\t\t\tif (!param.dontStart)\n\t\t\t\tctx.beginPath();\n\t\t\tif (untransformed && isCircle) {\n\t\t\t\tctx.arc(0, 0, radius, 0, Math.PI * 2, true);\n\t\t\t} else {\n\t\t\t\tvar rx = isCircle ? radius : radius.width,\n\t\t\t\t\try = isCircle ? radius : radius.height,\n\t\t\t\t\tsize = this._size,\n\t\t\t\t\twidth = size.width,\n\t\t\t\t\theight = size.height;\n\t\t\t\tif (untransformed && type === 'rectangle' && rx === 0 && ry === 0) {\n\t\t\t\t\tctx.rect(-width / 2, -height / 2, width, height);\n\t\t\t\t} else {\n\t\t\t\t\tvar x = width / 2,\n\t\t\t\t\t\ty = height / 2,\n\t\t\t\t\t\tkappa = 1 - 0.5522847498307936,\n\t\t\t\t\t\tcx = rx * kappa,\n\t\t\t\t\t\tcy = ry * kappa,\n\t\t\t\t\t\tc = [\n\t\t\t\t\t\t\t-x, -y + ry,\n\t\t\t\t\t\t\t-x, -y + cy,\n\t\t\t\t\t\t\t-x + cx, -y,\n\t\t\t\t\t\t\t-x + rx, -y,\n\t\t\t\t\t\t\tx - rx, -y,\n\t\t\t\t\t\t\tx - cx, -y,\n\t\t\t\t\t\t\tx, -y + cy,\n\t\t\t\t\t\t\tx, -y + ry,\n\t\t\t\t\t\t\tx, y - ry,\n\t\t\t\t\t\t\tx, y - cy,\n\t\t\t\t\t\t\tx - cx, y,\n\t\t\t\t\t\t\tx - rx, y,\n\t\t\t\t\t\t\t-x + rx, y,\n\t\t\t\t\t\t\t-x + cx, y,\n\t\t\t\t\t\t\t-x, y - cy,\n\t\t\t\t\t\t\t-x, y - ry\n\t\t\t\t\t\t];\n\t\t\t\t\tif (strokeMatrix)\n\t\t\t\t\t\tstrokeMatrix.transform(c, c, 32);\n\t\t\t\t\tctx.moveTo(c[0], c[1]);\n\t\t\t\t\tctx.bezierCurveTo(c[2], c[3], c[4], c[5], c[6], c[7]);\n\t\t\t\t\tif (x !== rx)\n\t\t\t\t\t\tctx.lineTo(c[8], c[9]);\n\t\t\t\t\tctx.bezierCurveTo(c[10], c[11], c[12], c[13], c[14], c[15]);\n\t\t\t\t\tif (y !== ry)\n\t\t\t\t\t\tctx.lineTo(c[16], c[17]);\n\t\t\t\t\tctx.bezierCurveTo(c[18], c[19], c[20], c[21], c[22], c[23]);\n\t\t\t\t\tif (x !== rx)\n\t\t\t\t\t\tctx.lineTo(c[24], c[25]);\n\t\t\t\t\tctx.bezierCurveTo(c[26], c[27], c[28], c[29], c[30], c[31]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tctx.closePath();\n\t\t}\n\t\tif (!dontPaint && (hasFill || hasStroke)) {\n\t\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\t\tif (hasFill) {\n\t\t\t\tctx.fill(style.getFillRule());\n\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t}\n\t\t\tif (hasStroke)\n\t\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn !(this.hasFill() && this.hasStroke());\n\t},\n\n\t_getBounds: function(matrix, options) {\n\t\tvar rect = new Rectangle(this._size).setCenter(0, 0),\n\t\t\tstyle = this._style,\n\t\t\tstrokeWidth = options.stroke && style.hasStroke()\n\t\t\t\t\t&& style.getStrokeWidth();\n\t\tif (matrix)\n\t\t\trect = matrix._transformBounds(rect);\n\t\treturn strokeWidth\n\t\t\t\t? rect.expand(Path._getStrokePadding(strokeWidth,\n\t\t\t\t\tthis._getStrokeMatrix(matrix, options)))\n\t\t\t\t: rect;\n\t}\n},\nnew function() {\n\tfunction getCornerCenter(that, point, expand) {\n\t\tvar radius = that._radius;\n\t\tif (!radius.isZero()) {\n\t\t\tvar halfSize = that._size.divide(2);\n\t\t\tfor (var q = 1; q <= 4; q++) {\n\t\t\t\tvar dir = new Point(q > 1 && q < 4 ? -1 : 1, q > 2 ? -1 : 1),\n\t\t\t\t\tcorner = dir.multiply(halfSize),\n\t\t\t\t\tcenter = corner.subtract(dir.multiply(radius)),\n\t\t\t\t\trect = new Rectangle(\n\t\t\t\t\t\t\texpand ? corner.add(dir.multiply(expand)) : corner,\n\t\t\t\t\t\t\tcenter);\n\t\t\t\tif (rect.contains(point))\n\t\t\t\t\treturn { point: center, quadrant: q };\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction isOnEllipseStroke(point, radius, padding, quadrant) {\n\t\tvar vector = point.divide(radius);\n\t\treturn (!quadrant || vector.isInQuadrant(quadrant)) &&\n\t\t\t\tvector.subtract(vector.normalize()).multiply(radius)\n\t\t\t\t\t.divide(padding).length <= 1;\n\t}\n\n\treturn {\n\t\t_contains: function _contains(point) {\n\t\t\tif (this._type === 'rectangle') {\n\t\t\t\tvar center = getCornerCenter(this, point);\n\t\t\t\treturn center\n\t\t\t\t\t\t? point.subtract(center.point).divide(this._radius)\n\t\t\t\t\t\t\t.getLength() <= 1\n\t\t\t\t\t\t: _contains.base.call(this, point);\n\t\t\t} else {\n\t\t\t\treturn point.divide(this.size).getLength() <= 0.5;\n\t\t\t}\n\t\t},\n\n\t\t_hitTestSelf: function _hitTestSelf(point, options, viewMatrix,\n\t\t\t\tstrokeMatrix) {\n\t\t\tvar hit = false,\n\t\t\t\tstyle = this._style,\n\t\t\t\thitStroke = options.stroke && style.hasStroke(),\n\t\t\t\thitFill = options.fill && style.hasFill();\n\t\t\tif (hitStroke || hitFill) {\n\t\t\t\tvar type = this._type,\n\t\t\t\t\tradius = this._radius,\n\t\t\t\t\tstrokeRadius = hitStroke ? style.getStrokeWidth() / 2 : 0,\n\t\t\t\t\tstrokePadding = options._tolerancePadding.add(\n\t\t\t\t\t\tPath._getStrokePadding(strokeRadius,\n\t\t\t\t\t\t\t!style.getStrokeScaling() && strokeMatrix));\n\t\t\t\tif (type === 'rectangle') {\n\t\t\t\t\tvar padding = strokePadding.multiply(2),\n\t\t\t\t\t\tcenter = getCornerCenter(this, point, padding);\n\t\t\t\t\tif (center) {\n\t\t\t\t\t\thit = isOnEllipseStroke(point.subtract(center.point),\n\t\t\t\t\t\t\t\tradius, strokePadding, center.quadrant);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar rect = new Rectangle(this._size).setCenter(0, 0),\n\t\t\t\t\t\t\touter = rect.expand(padding),\n\t\t\t\t\t\t\tinner = rect.expand(padding.negate());\n\t\t\t\t\t\thit = outer._containsPoint(point)\n\t\t\t\t\t\t\t\t&& !inner._containsPoint(point);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thit = isOnEllipseStroke(point, radius, strokePadding);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn hit ? new HitResult(hitStroke ? 'stroke' : 'fill', this)\n\t\t\t\t\t: _hitTestSelf.base.apply(this, arguments);\n\t\t}\n\t};\n}, {\n\nstatics: new function() {\n\tfunction createShape(type, point, size, radius, args) {\n\t\tvar item = new Shape(Base.getNamed(args), point);\n\t\titem._type = type;\n\t\titem._size = size;\n\t\titem._radius = radius;\n\t\treturn item;\n\t}\n\n\treturn {\n\t\tCircle: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tradius = Base.readNamed(arguments, 'radius');\n\t\t\treturn createShape('circle', center, new Size(radius * 2), radius,\n\t\t\t\t\targuments);\n\t\t},\n\n\t\tRectangle: function() {\n\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),\n\t\t\t\tradius = Size.min(Size.readNamed(arguments, 'radius'),\n\t\t\t\t\t\trect.getSize(true).divide(2));\n\t\t\treturn createShape('rectangle', rect.getCenter(true),\n\t\t\t\t\trect.getSize(true), radius, arguments);\n\t\t},\n\n\t\tEllipse: function() {\n\t\t\tvar ellipse = Shape._readEllipse(arguments),\n\t\t\t\tradius = ellipse.radius;\n\t\t\treturn createShape('ellipse', ellipse.center, radius.multiply(2),\n\t\t\t\t\tradius, arguments);\n\t\t},\n\n\t\t_readEllipse: function(args) {\n\t\t\tvar center,\n\t\t\t\tradius;\n\t\t\tif (Base.hasNamed(args, 'radius')) {\n\t\t\t\tcenter = Point.readNamed(args, 'center');\n\t\t\t\tradius = Size.readNamed(args, 'radius');\n\t\t\t} else {\n\t\t\t\tvar rect = Rectangle.readNamed(args, 'rectangle');\n\t\t\t\tcenter = rect.getCenter(true);\n\t\t\t\tradius = rect.getSize(true).divide(2);\n\t\t\t}\n\t\t\treturn { center: center, radius: radius };\n\t\t}\n\t};\n}});\n\nvar Raster = Item.extend({\n\t_class: 'Raster',\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_boundsOptions: { stroke: false, handle: false },\n\t_serializeFields: {\n\t\tcrossOrigin: null,\n\t\tsource: null\n\t},\n\t_prioritize: ['crossOrigin'],\n\n\tinitialize: function Raster(object, position) {\n\t\tif (!this._initialize(object,\n\t\t\t\tposition !== undefined && Point.read(arguments, 1))) {\n\t\t\tvar image = typeof object === 'string'\n\t\t\t\t\t? document.getElementById(object) : object;\n\t\t\tif (image) {\n\t\t\t\tthis.setImage(image);\n\t\t\t} else {\n\t\t\t\tthis.setSource(object);\n\t\t\t}\n\t\t}\n\t\tif (!this._size) {\n\t\t\tthis._size = new Size();\n\t\t\tthis._loaded = false;\n\t\t}\n\t},\n\n\t_equals: function(item) {\n\t\treturn this.getSource() === item.getSource();\n\t},\n\n\tcopyContent: function(source) {\n\t\tvar image = source._image,\n\t\t\tcanvas = source._canvas;\n\t\tif (image) {\n\t\t\tthis._setImage(image);\n\t\t} else if (canvas) {\n\t\t\tvar copyCanvas = CanvasProvider.getCanvas(source._size);\n\t\t\tcopyCanvas.getContext('2d').drawImage(canvas, 0, 0);\n\t\t\tthis._setImage(copyCanvas);\n\t\t}\n\t\tthis._crossOrigin = source._crossOrigin;\n\t},\n\n\tgetSize: function() {\n\t\tvar size = this._size;\n\t\treturn new LinkedSize(size ? size.width : 0, size ? size.height : 0,\n\t\t\t\tthis, 'setSize');\n\t},\n\n\tsetSize: function() {\n\t\tvar size = Size.read(arguments);\n\t\tif (!size.equals(this._size)) {\n\t\t\tif (size.width > 0 && size.height > 0) {\n\t\t\t\tvar element = this.getElement();\n\t\t\t\tthis._setImage(CanvasProvider.getCanvas(size));\n\t\t\t\tif (element)\n\t\t\t\t\tthis.getContext(true).drawImage(element, 0, 0,\n\t\t\t\t\t\t\tsize.width, size.height);\n\t\t\t} else {\n\t\t\t\tif (this._canvas)\n\t\t\t\t\tCanvasProvider.release(this._canvas);\n\t\t\t\tthis._size = size.clone();\n\t\t\t}\n\t\t}\n\t},\n\n\tgetWidth: function() {\n\t\treturn this._size ? this._size.width : 0;\n\t},\n\n\tsetWidth: function(width) {\n\t\tthis.setSize(width, this.getHeight());\n\t},\n\n\tgetHeight: function() {\n\t\treturn this._size ? this._size.height : 0;\n\t},\n\n\tsetHeight: function(height) {\n\t\tthis.setSize(this.getWidth(), height);\n\t},\n\n\tgetLoaded: function() {\n\t\treturn this._loaded;\n\t},\n\n\tisEmpty: function() {\n\t\tvar size = this._size;\n\t\treturn !size || size.width === 0 && size.height === 0;\n\t},\n\n\tgetResolution: function() {\n\t\tvar matrix = this._matrix,\n\t\t\torig = new Point(0, 0).transform(matrix),\n\t\t\tu = new Point(1, 0).transform(matrix).subtract(orig),\n\t\t\tv = new Point(0, 1).transform(matrix).subtract(orig);\n\t\treturn new Size(\n\t\t\t72 / u.getLength(),\n\t\t\t72 / v.getLength()\n\t\t);\n\t},\n\n\tgetPpi: '#getResolution',\n\n\tgetImage: function() {\n\t\treturn this._image;\n\t},\n\n\tsetImage: function(image) {\n\t\tvar that = this;\n\n\t\tfunction emit(event) {\n\t\t\tvar view = that.getView(),\n\t\t\t\ttype = event && event.type || 'load';\n\t\t\tif (view && that.responds(type)) {\n\t\t\t\tpaper = view._scope;\n\t\t\t\tthat.emit(type, new Event(event));\n\t\t\t}\n\t\t}\n\n\t\tthis._setImage(image);\n\t\tif (this._loaded) {\n\t\t\tsetTimeout(emit, 0);\n\t\t} else if (image) {\n\t\t\tDomEvent.add(image, {\n\t\t\t\tload: function(event) {\n\t\t\t\t\tthat._setImage(image);\n\t\t\t\t\temit(event);\n\t\t\t\t},\n\t\t\t\terror: emit\n\t\t\t});\n\t\t}\n\t},\n\n\t_setImage: function(image) {\n\t\tif (this._canvas)\n\t\t\tCanvasProvider.release(this._canvas);\n\t\tif (image && image.getContext) {\n\t\t\tthis._image = null;\n\t\t\tthis._canvas = image;\n\t\t\tthis._loaded = true;\n\t\t} else {\n\t\t\tthis._image = image;\n\t\t\tthis._canvas = null;\n\t\t\tthis._loaded = !!(image && image.src && image.complete);\n\t\t}\n\t\tthis._size = new Size(\n\t\t\t\timage ? image.naturalWidth || image.width : 0,\n\t\t\t\timage ? image.naturalHeight || image.height : 0);\n\t\tthis._context = null;\n\t\tthis._changed(521);\n\t},\n\n\tgetCanvas: function() {\n\t\tif (!this._canvas) {\n\t\t\tvar ctx = CanvasProvider.getContext(this._size);\n\t\t\ttry {\n\t\t\t\tif (this._image)\n\t\t\t\t\tctx.drawImage(this._image, 0, 0);\n\t\t\t\tthis._canvas = ctx.canvas;\n\t\t\t} catch (e) {\n\t\t\t\tCanvasProvider.release(ctx);\n\t\t\t}\n\t\t}\n\t\treturn this._canvas;\n\t},\n\n\tsetCanvas: '#setImage',\n\n\tgetContext: function(modify) {\n\t\tif (!this._context)\n\t\t\tthis._context = this.getCanvas().getContext('2d');\n\t\tif (modify) {\n\t\t\tthis._image = null;\n\t\t\tthis._changed(513);\n\t\t}\n\t\treturn this._context;\n\t},\n\n\tsetContext: function(context) {\n\t\tthis._context = context;\n\t},\n\n\tgetSource: function() {\n\t\tvar image = this._image;\n\t\treturn image && image.src || this.toDataURL();\n\t},\n\n\tsetSource: function(src) {\n\t\tvar image = new self.Image(),\n\t\t\tcrossOrigin = this._crossOrigin;\n\t\tif (crossOrigin)\n\t\t\timage.crossOrigin = crossOrigin;\n\t\timage.src = src;\n\t\tthis.setImage(image);\n\t},\n\n\tgetCrossOrigin: function() {\n\t\tvar image = this._image;\n\t\treturn image && image.crossOrigin || this._crossOrigin || '';\n\t},\n\n\tsetCrossOrigin: function(crossOrigin) {\n\t\tthis._crossOrigin = crossOrigin;\n\t\tvar image = this._image;\n\t\tif (image)\n\t\t\timage.crossOrigin = crossOrigin;\n\t},\n\n\tgetElement: function() {\n\t\treturn this._canvas || this._loaded && this._image;\n\t}\n}, {\n\tbeans: false,\n\n\tgetSubCanvas: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tctx = CanvasProvider.getContext(rect.getSize());\n\t\tctx.drawImage(this.getCanvas(), rect.x, rect.y,\n\t\t\t\trect.width, rect.height, 0, 0, rect.width, rect.height);\n\t\treturn ctx.canvas;\n\t},\n\n\tgetSubRaster: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\traster = new Raster(Item.NO_INSERT);\n\t\traster._setImage(this.getSubCanvas(rect));\n\t\traster.translate(rect.getCenter().subtract(this.getSize().divide(2)));\n\t\traster._matrix.prepend(this._matrix);\n\t\traster.insertAbove(this);\n\t\treturn raster;\n\t},\n\n\ttoDataURL: function() {\n\t\tvar image = this._image,\n\t\t\tsrc = image && image.src;\n\t\tif (/^data:/.test(src))\n\t\t\treturn src;\n\t\tvar canvas = this.getCanvas();\n\t\treturn canvas ? canvas.toDataURL.apply(canvas, arguments) : null;\n\t},\n\n\tdrawImage: function(image ) {\n\t\tvar point = Point.read(arguments, 1);\n\t\tthis.getContext(true).drawImage(image, point.x, point.y);\n\t},\n\n\tgetAverageColor: function(object) {\n\t\tvar bounds, path;\n\t\tif (!object) {\n\t\t\tbounds = this.getBounds();\n\t\t} else if (object instanceof PathItem) {\n\t\t\tpath = object;\n\t\t\tbounds = object.getBounds();\n\t\t} else if (typeof object === 'object') {\n\t\t\tif ('width' in object) {\n\t\t\t\tbounds = new Rectangle(object);\n\t\t\t} else if ('x' in object) {\n\t\t\t\tbounds = new Rectangle(object.x - 0.5, object.y - 0.5, 1, 1);\n\t\t\t}\n\t\t}\n\t\tif (!bounds)\n\t\t\treturn null;\n\t\tvar sampleSize = 32,\n\t\t\twidth = Math.min(bounds.width, sampleSize),\n\t\t\theight = Math.min(bounds.height, sampleSize);\n\t\tvar ctx = Raster._sampleContext;\n\t\tif (!ctx) {\n\t\t\tctx = Raster._sampleContext = CanvasProvider.getContext(\n\t\t\t\t\tnew Size(sampleSize));\n\t\t} else {\n\t\t\tctx.clearRect(0, 0, sampleSize + 1, sampleSize + 1);\n\t\t}\n\t\tctx.save();\n\t\tvar matrix = new Matrix()\n\t\t\t\t.scale(width / bounds.width, height / bounds.height)\n\t\t\t\t.translate(-bounds.x, -bounds.y);\n\t\tmatrix.applyToContext(ctx);\n\t\tif (path)\n\t\t\tpath.draw(ctx, new Base({ clip: true, matrices: [matrix] }));\n\t\tthis._matrix.applyToContext(ctx);\n\t\tvar element = this.getElement(),\n\t\t\tsize = this._size;\n\t\tif (element)\n\t\t\tctx.drawImage(element, -size.width / 2, -size.height / 2);\n\t\tctx.restore();\n\t\tvar pixels = ctx.getImageData(0.5, 0.5, Math.ceil(width),\n\t\t\t\tMath.ceil(height)).data,\n\t\t\tchannels = [0, 0, 0],\n\t\t\ttotal = 0;\n\t\tfor (var i = 0, l = pixels.length; i < l; i += 4) {\n\t\t\tvar alpha = pixels[i + 3];\n\t\t\ttotal += alpha;\n\t\t\talpha /= 255;\n\t\t\tchannels[0] += pixels[i] * alpha;\n\t\t\tchannels[1] += pixels[i + 1] * alpha;\n\t\t\tchannels[2] += pixels[i + 2] * alpha;\n\t\t}\n\t\tfor (var i = 0; i < 3; i++)\n\t\t\tchannels[i] /= total;\n\t\treturn total ? Color.read(channels) : null;\n\t},\n\n\tgetPixel: function() {\n\t\tvar point = Point.read(arguments);\n\t\tvar data = this.getContext().getImageData(point.x, point.y, 1, 1).data;\n\t\treturn new Color('rgb', [data[0] / 255, data[1] / 255, data[2] / 255],\n\t\t\t\tdata[3] / 255);\n\t},\n\n\tsetPixel: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tcolor = Color.read(arguments),\n\t\t\tcomponents = color._convert('rgb'),\n\t\t\talpha = color._alpha,\n\t\t\tctx = this.getContext(true),\n\t\t\timageData = ctx.createImageData(1, 1),\n\t\t\tdata = imageData.data;\n\t\tdata[0] = components[0] * 255;\n\t\tdata[1] = components[1] * 255;\n\t\tdata[2] = components[2] * 255;\n\t\tdata[3] = alpha != null ? alpha * 255 : 255;\n\t\tctx.putImageData(imageData, point.x, point.y);\n\t},\n\n\tcreateImageData: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn this.getContext().createImageData(size.width, size.height);\n\t},\n\n\tgetImageData: function() {\n\t\tvar rect = Rectangle.read(arguments);\n\t\tif (rect.isEmpty())\n\t\t\trect = new Rectangle(this._size);\n\t\treturn this.getContext().getImageData(rect.x, rect.y,\n\t\t\t\trect.width, rect.height);\n\t},\n\n\tsetImageData: function(data ) {\n\t\tvar point = Point.read(arguments, 1);\n\t\tthis.getContext(true).putImageData(data, point.x, point.y);\n\t},\n\n\t_getBounds: function(matrix, options) {\n\t\tvar rect = new Rectangle(this._size).setCenter(0, 0);\n\t\treturn matrix ? matrix._transformBounds(rect) : rect;\n\t},\n\n\t_hitTestSelf: function(point) {\n\t\tif (this._contains(point)) {\n\t\t\tvar that = this;\n\t\t\treturn new HitResult('pixel', that, {\n\t\t\t\toffset: point.add(that._size.divide(2)).round(),\n\t\t\t\tcolor: {\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\treturn that.getPixel(this.offset);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t_draw: function(ctx) {\n\t\tvar element = this.getElement();\n\t\tif (element) {\n\t\t\tctx.globalAlpha = this._opacity;\n\t\t\tctx.drawImage(element,\n\t\t\t\t\t-this._size.width / 2, -this._size.height / 2);\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn true;\n\t}\n});\n\nvar SymbolItem = Item.extend({\n\t_class: 'SymbolItem',\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_boundsOptions: { stroke: true },\n\t_serializeFields: {\n\t\tsymbol: null\n\t},\n\n\tinitialize: function SymbolItem(arg0, arg1) {\n\t\tif (!this._initialize(arg0,\n\t\t\t\targ1 !== undefined && Point.read(arguments, 1)))\n\t\t\tthis.setDefinition(arg0 instanceof SymbolDefinition ?\n\t\t\t\t\targ0 : new SymbolDefinition(arg0));\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._definition === item._definition;\n\t},\n\n\tcopyContent: function(source) {\n\t\tthis.setDefinition(source._definition);\n\t},\n\n\tgetDefinition: function() {\n\t\treturn this._definition;\n\t},\n\n\tsetDefinition: function(definition) {\n\t\tthis._definition = definition;\n\t\tthis._changed(9);\n\t},\n\n\tgetSymbol: '#getDefinition',\n\tsetSymbol: '#setDefinition',\n\n\tisEmpty: function() {\n\t\treturn this._definition._item.isEmpty();\n\t},\n\n\t_getBounds: function(matrix, options) {\n\t\tvar item = this._definition._item;\n\t\treturn item._getCachedBounds(item._matrix.prepended(matrix), options);\n\t},\n\n\t_hitTestSelf: function(point, options, viewMatrix) {\n\t\tvar res = this._definition._item._hitTest(point, options, viewMatrix);\n\t\tif (res)\n\t\t\tres.item = this;\n\t\treturn res;\n\t},\n\n\t_draw: function(ctx, param) {\n\t\tthis._definition._item.draw(ctx, param);\n\t}\n\n});\n\nvar SymbolDefinition = Base.extend({\n\t_class: 'SymbolDefinition',\n\n\tinitialize: function SymbolDefinition(item, dontCenter) {\n\t\tthis._id = UID.get();\n\t\tthis.project = paper.project;\n\t\tif (item)\n\t\t\tthis.setItem(item, dontCenter);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn dictionary.add(this, function() {\n\t\t\treturn Base.serialize([this._class, this._item],\n\t\t\t\t\toptions, false, dictionary);\n\t\t});\n\t},\n\n\t_changed: function(flags) {\n\t\tif (flags & 8)\n\t\t\tItem._clearBoundsCache(this);\n\t\tif (flags & 1)\n\t\t\tthis.project._changed(flags);\n\t},\n\n\tgetItem: function() {\n\t\treturn this._item;\n\t},\n\n\tsetItem: function(item, _dontCenter) {\n\t\tif (item._symbol)\n\t\t\titem = item.clone();\n\t\tif (this._item)\n\t\t\tthis._item._symbol = null;\n\t\tthis._item = item;\n\t\titem.remove();\n\t\titem.setSelected(false);\n\t\tif (!_dontCenter)\n\t\t\titem.setPosition(new Point());\n\t\titem._symbol = this;\n\t\tthis._changed(9);\n\t},\n\n\tgetDefinition: '#getItem',\n\tsetDefinition: '#setItem',\n\n\tplace: function(position) {\n\t\treturn new SymbolItem(this, position);\n\t},\n\n\tclone: function() {\n\t\treturn new SymbolDefinition(this._item.clone(false));\n\t},\n\n\tequals: function(symbol) {\n\t\treturn symbol === this\n\t\t\t\t|| symbol && this._item.equals(symbol._item)\n\t\t\t\t|| false;\n\t}\n});\n\nvar HitResult = Base.extend({\n\t_class: 'HitResult',\n\n\tinitialize: function HitResult(type, item, values) {\n\t\tthis.type = type;\n\t\tthis.item = item;\n\t\tif (values)\n\t\t\tthis.inject(values);\n\t},\n\n\tstatics: {\n\t\tgetOptions: function(args) {\n\t\t\tvar options = args && Base.read(args);\n\t\t\treturn Base.set({\n\t\t\t\ttype: null,\n\t\t\t\ttolerance: paper.settings.hitTolerance,\n\t\t\t\tfill: !options,\n\t\t\t\tstroke: !options,\n\t\t\t\tsegments: !options,\n\t\t\t\thandles: false,\n\t\t\t\tends: false,\n\t\t\t\tposition: false,\n\t\t\t\tcenter: false,\n\t\t\t\tbounds: false,\n\t\t\t\tguides: false,\n\t\t\t\tselected: false\n\t\t\t}, options);\n\t\t}\n\t}\n});\n\nvar Segment = Base.extend({\n\t_class: 'Segment',\n\tbeans: true,\n\t_selection: 0,\n\n\tinitialize: function Segment(arg0, arg1, arg2, arg3, arg4, arg5) {\n\t\tvar count = arguments.length,\n\t\t\tpoint, handleIn, handleOut, selection;\n\t\tif (count > 0) {\n\t\t\tif (arg0 == null || typeof arg0 === 'object') {\n\t\t\t\tif (count === 1 && arg0 && 'point' in arg0) {\n\t\t\t\t\tpoint = arg0.point;\n\t\t\t\t\thandleIn = arg0.handleIn;\n\t\t\t\t\thandleOut = arg0.handleOut;\n\t\t\t\t\tselection = arg0.selection;\n\t\t\t\t} else {\n\t\t\t\t\tpoint = arg0;\n\t\t\t\t\thandleIn = arg1;\n\t\t\t\t\thandleOut = arg2;\n\t\t\t\t\tselection = arg3;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpoint = [ arg0, arg1 ];\n\t\t\t\thandleIn = arg2 !== undefined ? [ arg2, arg3 ] : null;\n\t\t\t\thandleOut = arg4 !== undefined ? [ arg4, arg5 ] : null;\n\t\t\t}\n\t\t}\n\t\tnew SegmentPoint(point, this, '_point');\n\t\tnew SegmentPoint(handleIn, this, '_handleIn');\n\t\tnew SegmentPoint(handleOut, this, '_handleOut');\n\t\tif (selection)\n\t\t\tthis.setSelection(selection);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\tvar point = this._point,\n\t\t\tselection = this._selection,\n\t\t\tobj = selection || this.hasHandles()\n\t\t\t\t\t? [point, this._handleIn, this._handleOut]\n\t\t\t\t\t: point;\n\t\tif (selection)\n\t\t\tobj.push(selection);\n\t\treturn Base.serialize(obj, options, true, dictionary);\n\t},\n\n\t_changed: function(point) {\n\t\tvar path = this._path;\n\t\tif (!path)\n\t\t\treturn;\n\t\tvar curves = path._curves,\n\t\t\tindex = this._index,\n\t\t\tcurve;\n\t\tif (curves) {\n\t\t\tif ((!point || point === this._point || point === this._handleIn)\n\t\t\t\t\t&& (curve = index > 0 ? curves[index - 1] : path._closed\n\t\t\t\t\t\t? curves[curves.length - 1] : null))\n\t\t\t\tcurve._changed();\n\t\t\tif ((!point || point === this._point || point === this._handleOut)\n\t\t\t\t\t&& (curve = curves[index]))\n\t\t\t\tcurve._changed();\n\t\t}\n\t\tpath._changed(25);\n\t},\n\n\tgetPoint: function() {\n\t\treturn this._point;\n\t},\n\n\tsetPoint: function() {\n\t\tthis._point.set(Point.read(arguments));\n\t},\n\n\tgetHandleIn: function() {\n\t\treturn this._handleIn;\n\t},\n\n\tsetHandleIn: function() {\n\t\tthis._handleIn.set(Point.read(arguments));\n\t},\n\n\tgetHandleOut: function() {\n\t\treturn this._handleOut;\n\t},\n\n\tsetHandleOut: function() {\n\t\tthis._handleOut.set(Point.read(arguments));\n\t},\n\n\thasHandles: function() {\n\t\treturn !this._handleIn.isZero() || !this._handleOut.isZero();\n\t},\n\n\tisSmooth: function() {\n\t\tvar handleIn = this._handleIn,\n\t\t\thandleOut = this._handleOut;\n\t\treturn !handleIn.isZero() && !handleOut.isZero()\n\t\t\t\t&& handleIn.isCollinear(handleOut);\n\t},\n\n\tclearHandles: function() {\n\t\tthis._handleIn._set(0, 0);\n\t\tthis._handleOut._set(0, 0);\n\t},\n\n\tgetSelection: function() {\n\t\treturn this._selection;\n\t},\n\n\tsetSelection: function(selection) {\n\t\tvar oldSelection = this._selection,\n\t\t\tpath = this._path;\n\t\tthis._selection = selection = selection || 0;\n\t\tif (path && selection !== oldSelection) {\n\t\t\tpath._updateSelection(this, oldSelection, selection);\n\t\t\tpath._changed(129);\n\t\t}\n\t},\n\n\t_changeSelection: function(flag, selected) {\n\t\tvar selection = this._selection;\n\t\tthis.setSelection(selected ? selection | flag : selection & ~flag);\n\t},\n\n\tisSelected: function() {\n\t\treturn !!(this._selection & 7);\n\t},\n\n\tsetSelected: function(selected) {\n\t\tthis._changeSelection(7, selected);\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._index !== undefined ? this._index : null;\n\t},\n\n\tgetPath: function() {\n\t\treturn this._path || null;\n\t},\n\n\tgetCurve: function() {\n\t\tvar path = this._path,\n\t\t\tindex = this._index;\n\t\tif (path) {\n\t\t\tif (index > 0 && !path._closed\n\t\t\t\t\t&& index === path._segments.length - 1)\n\t\t\t\tindex--;\n\t\t\treturn path.getCurves()[index] || null;\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetLocation: function() {\n\t\tvar curve = this.getCurve();\n\t\treturn curve\n\t\t\t\t? new CurveLocation(curve, this === curve._segment1 ? 0 : 1)\n\t\t\t\t: null;\n\t},\n\n\tgetNext: function() {\n\t\tvar segments = this._path && this._path._segments;\n\t\treturn segments && (segments[this._index + 1]\n\t\t\t\t|| this._path._closed && segments[0]) || null;\n\t},\n\n\tsmooth: function(options, _first, _last) {\n\t\tvar opts = options || {},\n\t\t\ttype = opts.type,\n\t\t\tfactor = opts.factor,\n\t\t\tprev = this.getPrevious(),\n\t\t\tnext = this.getNext(),\n\t\t\tp0 = (prev || this)._point,\n\t\t\tp1 = this._point,\n\t\t\tp2 = (next || this)._point,\n\t\t\td1 = p0.getDistance(p1),\n\t\t\td2 = p1.getDistance(p2);\n\t\tif (!type || type === 'catmull-rom') {\n\t\t\tvar a = factor === undefined ? 0.5 : factor,\n\t\t\t\td1_a = Math.pow(d1, a),\n\t\t\t\td1_2a = d1_a * d1_a,\n\t\t\t\td2_a = Math.pow(d2, a),\n\t\t\t\td2_2a = d2_a * d2_a;\n\t\t\tif (!_first && prev) {\n\t\t\t\tvar A = 2 * d2_2a + 3 * d2_a * d1_a + d1_2a,\n\t\t\t\t\tN = 3 * d2_a * (d2_a + d1_a);\n\t\t\t\tthis.setHandleIn(N !== 0\n\t\t\t\t\t? new Point(\n\t\t\t\t\t\t(d2_2a * p0._x + A * p1._x - d1_2a * p2._x) / N - p1._x,\n\t\t\t\t\t\t(d2_2a * p0._y + A * p1._y - d1_2a * p2._y) / N - p1._y)\n\t\t\t\t\t: new Point());\n\t\t\t}\n\t\t\tif (!_last && next) {\n\t\t\t\tvar A = 2 * d1_2a + 3 * d1_a * d2_a + d2_2a,\n\t\t\t\t\tN = 3 * d1_a * (d1_a + d2_a);\n\t\t\t\tthis.setHandleOut(N !== 0\n\t\t\t\t\t? new Point(\n\t\t\t\t\t\t(d1_2a * p2._x + A * p1._x - d2_2a * p0._x) / N - p1._x,\n\t\t\t\t\t\t(d1_2a * p2._y + A * p1._y - d2_2a * p0._y) / N - p1._y)\n\t\t\t\t\t: new Point());\n\t\t\t}\n\t\t} else if (type === 'geometric') {\n\t\t\tif (prev && next) {\n\t\t\t\tvar vector = p0.subtract(p2),\n\t\t\t\t\tt = factor === undefined ? 0.4 : factor,\n\t\t\t\t\tk = t * d1 / (d1 + d2);\n\t\t\t\tif (!_first)\n\t\t\t\t\tthis.setHandleIn(vector.multiply(k));\n\t\t\t\tif (!_last)\n\t\t\t\t\tthis.setHandleOut(vector.multiply(k - t));\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('Smoothing method \\'' + type + '\\' not supported.');\n\t\t}\n\t},\n\n\tgetPrevious: function() {\n\t\tvar segments = this._path && this._path._segments;\n\t\treturn segments && (segments[this._index - 1]\n\t\t\t\t|| this._path._closed && segments[segments.length - 1]) || null;\n\t},\n\n\tisFirst: function() {\n\t\treturn !this._index;\n\t},\n\n\tisLast: function() {\n\t\tvar path = this._path;\n\t\treturn path && this._index === path._segments.length - 1 || false;\n\t},\n\n\treverse: function() {\n\t\tvar handleIn = this._handleIn,\n\t\t\thandleOut = this._handleOut,\n\t\t\ttmp = handleIn.clone();\n\t\thandleIn.set(handleOut);\n\t\thandleOut.set(tmp);\n\t},\n\n\treversed: function() {\n\t\treturn new Segment(this._point, this._handleOut, this._handleIn);\n\t},\n\n\tremove: function() {\n\t\treturn this._path ? !!this._path.removeSegment(this._index) : false;\n\t},\n\n\tclone: function() {\n\t\treturn new Segment(this._point, this._handleIn, this._handleOut);\n\t},\n\n\tequals: function(segment) {\n\t\treturn segment === this || segment && this._class === segment._class\n\t\t\t\t&& this._point.equals(segment._point)\n\t\t\t\t&& this._handleIn.equals(segment._handleIn)\n\t\t\t\t&& this._handleOut.equals(segment._handleOut)\n\t\t\t\t|| false;\n\t},\n\n\ttoString: function() {\n\t\tvar parts = [ 'point: ' + this._point ];\n\t\tif (!this._handleIn.isZero())\n\t\t\tparts.push('handleIn: ' + this._handleIn);\n\t\tif (!this._handleOut.isZero())\n\t\t\tparts.push('handleOut: ' + this._handleOut);\n\t\treturn '{ ' + parts.join(', ') + ' }';\n\t},\n\n\ttransform: function(matrix) {\n\t\tthis._transformCoordinates(matrix, new Array(6), true);\n\t\tthis._changed();\n\t},\n\n\tinterpolate: function(from, to, factor) {\n\t\tvar u = 1 - factor,\n\t\t\tv = factor,\n\t\t\tpoint1 = from._point,\n\t\t\tpoint2 = to._point,\n\t\t\thandleIn1 = from._handleIn,\n\t\t\thandleIn2 = to._handleIn,\n\t\t\thandleOut2 = to._handleOut,\n\t\t\thandleOut1 = from._handleOut;\n\t\tthis._point._set(\n\t\t\t\tu * point1._x + v * point2._x,\n\t\t\t\tu * point1._y + v * point2._y, true);\n\t\tthis._handleIn._set(\n\t\t\t\tu * handleIn1._x + v * handleIn2._x,\n\t\t\t\tu * handleIn1._y + v * handleIn2._y, true);\n\t\tthis._handleOut._set(\n\t\t\t\tu * handleOut1._x + v * handleOut2._x,\n\t\t\t\tu * handleOut1._y + v * handleOut2._y, true);\n\t\tthis._changed();\n\t},\n\n\t_transformCoordinates: function(matrix, coords, change) {\n\t\tvar point = this._point,\n\t\t\thandleIn = !change || !this._handleIn.isZero()\n\t\t\t\t\t? this._handleIn : null,\n\t\t\thandleOut = !change || !this._handleOut.isZero()\n\t\t\t\t\t? this._handleOut : null,\n\t\t\tx = point._x,\n\t\t\ty = point._y,\n\t\t\ti = 2;\n\t\tcoords[0] = x;\n\t\tcoords[1] = y;\n\t\tif (handleIn) {\n\t\t\tcoords[i++] = handleIn._x + x;\n\t\t\tcoords[i++] = handleIn._y + y;\n\t\t}\n\t\tif (handleOut) {\n\t\t\tcoords[i++] = handleOut._x + x;\n\t\t\tcoords[i++] = handleOut._y + y;\n\t\t}\n\t\tif (matrix) {\n\t\t\tmatrix._transformCoordinates(coords, coords, i / 2);\n\t\t\tx = coords[0];\n\t\t\ty = coords[1];\n\t\t\tif (change) {\n\t\t\t\tpoint._x = x;\n\t\t\t\tpoint._y = y;\n\t\t\t\ti = 2;\n\t\t\t\tif (handleIn) {\n\t\t\t\t\thandleIn._x = coords[i++] - x;\n\t\t\t\t\thandleIn._y = coords[i++] - y;\n\t\t\t\t}\n\t\t\t\tif (handleOut) {\n\t\t\t\t\thandleOut._x = coords[i++] - x;\n\t\t\t\t\thandleOut._y = coords[i++] - y;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!handleIn) {\n\t\t\t\t\tcoords[i++] = x;\n\t\t\t\t\tcoords[i++] = y;\n\t\t\t\t}\n\t\t\t\tif (!handleOut) {\n\t\t\t\t\tcoords[i++] = x;\n\t\t\t\t\tcoords[i++] = y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn coords;\n\t}\n});\n\nvar SegmentPoint = Point.extend({\n\tinitialize: function SegmentPoint(point, owner, key) {\n\t\tvar x, y,\n\t\t\tselected;\n\t\tif (!point) {\n\t\t\tx = y = 0;\n\t\t} else if ((x = point[0]) !== undefined) {\n\t\t\ty = point[1];\n\t\t} else {\n\t\t\tvar pt = point;\n\t\t\tif ((x = pt.x) === undefined) {\n\t\t\t\tpt = Point.read(arguments);\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\ty = pt.y;\n\t\t\tselected = pt.selected;\n\t\t}\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._owner = owner;\n\t\towner[key] = this;\n\t\tif (selected)\n\t\t\tthis.setSelected(true);\n\t},\n\n\t_set: function(x, y) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._owner._changed(this);\n\t\treturn this;\n\t},\n\n\tgetX: function() {\n\t\treturn this._x;\n\t},\n\n\tsetX: function(x) {\n\t\tthis._x = x;\n\t\tthis._owner._changed(this);\n\t},\n\n\tgetY: function() {\n\t\treturn this._y;\n\t},\n\n\tsetY: function(y) {\n\t\tthis._y = y;\n\t\tthis._owner._changed(this);\n\t},\n\n\tisZero: function() {\n\t\tvar isZero = Numerical.isZero;\n\t\treturn isZero(this._x) && isZero(this._y);\n\t},\n\n\tisSelected: function() {\n\t\treturn !!(this._owner._selection & this._getSelection());\n\t},\n\n\tsetSelected: function(selected) {\n\t\tthis._owner._changeSelection(this._getSelection(), selected);\n\t},\n\n\t_getSelection: function() {\n\t\tvar owner = this._owner;\n\t\treturn this === owner._point ? 1\n\t\t\t: this === owner._handleIn ? 2\n\t\t\t: this === owner._handleOut ? 4\n\t\t\t: 0;\n\t}\n});\n\nvar Curve = Base.extend({\n\t_class: 'Curve',\n\tbeans: true,\n\n\tinitialize: function Curve(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n\t\tvar count = arguments.length,\n\t\t\tseg1, seg2,\n\t\t\tpoint1, point2,\n\t\t\thandle1, handle2;\n\t\tif (count === 3) {\n\t\t\tthis._path = arg0;\n\t\t\tseg1 = arg1;\n\t\t\tseg2 = arg2;\n\t\t} else if (!count) {\n\t\t\tseg1 = new Segment();\n\t\t\tseg2 = new Segment();\n\t\t} else if (count === 1) {\n\t\t\tif ('segment1' in arg0) {\n\t\t\t\tseg1 = new Segment(arg0.segment1);\n\t\t\t\tseg2 = new Segment(arg0.segment2);\n\t\t\t} else if ('point1' in arg0) {\n\t\t\t\tpoint1 = arg0.point1;\n\t\t\t\thandle1 = arg0.handle1;\n\t\t\t\thandle2 = arg0.handle2;\n\t\t\t\tpoint2 = arg0.point2;\n\t\t\t} else if (Array.isArray(arg0)) {\n\t\t\t\tpoint1 = [arg0[0], arg0[1]];\n\t\t\t\tpoint2 = [arg0[6], arg0[7]];\n\t\t\t\thandle1 = [arg0[2] - arg0[0], arg0[3] - arg0[1]];\n\t\t\t\thandle2 = [arg0[4] - arg0[6], arg0[5] - arg0[7]];\n\t\t\t}\n\t\t} else if (count === 2) {\n\t\t\tseg1 = new Segment(arg0);\n\t\t\tseg2 = new Segment(arg1);\n\t\t} else if (count === 4) {\n\t\t\tpoint1 = arg0;\n\t\t\thandle1 = arg1;\n\t\t\thandle2 = arg2;\n\t\t\tpoint2 = arg3;\n\t\t} else if (count === 8) {\n\t\t\tpoint1 = [arg0, arg1];\n\t\t\tpoint2 = [arg6, arg7];\n\t\t\thandle1 = [arg2 - arg0, arg3 - arg1];\n\t\t\thandle2 = [arg4 - arg6, arg5 - arg7];\n\t\t}\n\t\tthis._segment1 = seg1 || new Segment(point1, null, handle1);\n\t\tthis._segment2 = seg2 || new Segment(point2, handle2, null);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn Base.serialize(this.hasHandles()\n\t\t\t\t? [this.getPoint1(), this.getHandle1(), this.getHandle2(),\n\t\t\t\t\tthis.getPoint2()]\n\t\t\t\t: [this.getPoint1(), this.getPoint2()],\n\t\t\t\toptions, true, dictionary);\n\t},\n\n\t_changed: function() {\n\t\tthis._length = this._bounds = undefined;\n\t},\n\n\tclone: function() {\n\t\treturn new Curve(this._segment1, this._segment2);\n\t},\n\n\ttoString: function() {\n\t\tvar parts = [ 'point1: ' + this._segment1._point ];\n\t\tif (!this._segment1._handleOut.isZero())\n\t\t\tparts.push('handle1: ' + this._segment1._handleOut);\n\t\tif (!this._segment2._handleIn.isZero())\n\t\t\tparts.push('handle2: ' + this._segment2._handleIn);\n\t\tparts.push('point2: ' + this._segment2._point);\n\t\treturn '{ ' + parts.join(', ') + ' }';\n\t},\n\n\tclassify: function() {\n\t\treturn Curve.classify(this.getValues());\n\t},\n\n\tremove: function() {\n\t\tvar removed = false;\n\t\tif (this._path) {\n\t\t\tvar segment2 = this._segment2,\n\t\t\t\thandleOut = segment2._handleOut;\n\t\t\tremoved = segment2.remove();\n\t\t\tif (removed)\n\t\t\t\tthis._segment1._handleOut.set(handleOut);\n\t\t}\n\t\treturn removed;\n\t},\n\n\tgetPoint1: function() {\n\t\treturn this._segment1._point;\n\t},\n\n\tsetPoint1: function() {\n\t\tthis._segment1._point.set(Point.read(arguments));\n\t},\n\n\tgetPoint2: function() {\n\t\treturn this._segment2._point;\n\t},\n\n\tsetPoint2: function() {\n\t\tthis._segment2._point.set(Point.read(arguments));\n\t},\n\n\tgetHandle1: function() {\n\t\treturn this._segment1._handleOut;\n\t},\n\n\tsetHandle1: function() {\n\t\tthis._segment1._handleOut.set(Point.read(arguments));\n\t},\n\n\tgetHandle2: function() {\n\t\treturn this._segment2._handleIn;\n\t},\n\n\tsetHandle2: function() {\n\t\tthis._segment2._handleIn.set(Point.read(arguments));\n\t},\n\n\tgetSegment1: function() {\n\t\treturn this._segment1;\n\t},\n\n\tgetSegment2: function() {\n\t\treturn this._segment2;\n\t},\n\n\tgetPath: function() {\n\t\treturn this._path;\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._segment1._index;\n\t},\n\n\tgetNext: function() {\n\t\tvar curves = this._path && this._path._curves;\n\t\treturn curves && (curves[this._segment1._index + 1]\n\t\t\t\t|| this._path._closed && curves[0]) || null;\n\t},\n\n\tgetPrevious: function() {\n\t\tvar curves = this._path && this._path._curves;\n\t\treturn curves && (curves[this._segment1._index - 1]\n\t\t\t\t|| this._path._closed && curves[curves.length - 1]) || null;\n\t},\n\n\tisFirst: function() {\n\t\treturn !this._segment1._index;\n\t},\n\n\tisLast: function() {\n\t\tvar path = this._path;\n\t\treturn path && this._segment1._index === path._curves.length - 1\n\t\t\t\t|| false;\n\t},\n\n\tisSelected: function() {\n\t\treturn this.getPoint1().isSelected()\n\t\t\t\t&& this.getHandle1().isSelected()\n\t\t\t\t&& this.getHandle2().isSelected()\n\t\t\t\t&& this.getPoint2().isSelected();\n\t},\n\n\tsetSelected: function(selected) {\n\t\tthis.getPoint1().setSelected(selected);\n\t\tthis.getHandle1().setSelected(selected);\n\t\tthis.getHandle2().setSelected(selected);\n\t\tthis.getPoint2().setSelected(selected);\n\t},\n\n\tgetValues: function(matrix) {\n\t\treturn Curve.getValues(this._segment1, this._segment2, matrix);\n\t},\n\n\tgetPoints: function() {\n\t\tvar coords = this.getValues(),\n\t\t\tpoints = [];\n\t\tfor (var i = 0; i < 8; i += 2)\n\t\t\tpoints.push(new Point(coords[i], coords[i + 1]));\n\t\treturn points;\n\t}\n}, {\n\tgetLength: function() {\n\t\tif (this._length == null)\n\t\t\tthis._length = Curve.getLength(this.getValues(), 0, 1);\n\t\treturn this._length;\n\t},\n\n\tgetArea: function() {\n\t\treturn Curve.getArea(this.getValues());\n\t},\n\n\tgetLine: function() {\n\t\treturn new Line(this._segment1._point, this._segment2._point);\n\t},\n\n\tgetPart: function(from, to) {\n\t\treturn new Curve(Curve.getPart(this.getValues(), from, to));\n\t},\n\n\tgetPartLength: function(from, to) {\n\t\treturn Curve.getLength(this.getValues(), from, to);\n\t},\n\n\tdivideAt: function(location) {\n\t\treturn this.divideAtTime(location && location.curve === this\n\t\t\t\t? location.time : this.getTimeAt(location));\n\t},\n\n\tdivideAtTime: function(time, _setHandles) {\n\t\tvar tMin = 1e-8,\n\t\t\ttMax = 1 - tMin,\n\t\t\tres = null;\n\t\tif (time >= tMin && time <= tMax) {\n\t\t\tvar parts = Curve.subdivide(this.getValues(), time),\n\t\t\t\tleft = parts[0],\n\t\t\t\tright = parts[1],\n\t\t\t\tsetHandles = _setHandles || this.hasHandles(),\n\t\t\t\tseg1 = this._segment1,\n\t\t\t\tseg2 = this._segment2,\n\t\t\t\tpath = this._path;\n\t\t\tif (setHandles) {\n\t\t\t\tseg1._handleOut._set(left[2] - left[0], left[3] - left[1]);\n\t\t\t\tseg2._handleIn._set(right[4] - right[6],right[5] - right[7]);\n\t\t\t}\n\t\t\tvar x = left[6], y = left[7],\n\t\t\t\tsegment = new Segment(new Point(x, y),\n\t\t\t\t\t\tsetHandles && new Point(left[4] - x, left[5] - y),\n\t\t\t\t\t\tsetHandles && new Point(right[2] - x, right[3] - y));\n\t\t\tif (path) {\n\t\t\t\tpath.insert(seg1._index + 1, segment);\n\t\t\t\tres = this.getNext();\n\t\t\t} else {\n\t\t\t\tthis._segment2 = segment;\n\t\t\t\tthis._changed();\n\t\t\t\tres = new Curve(segment, seg2);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t},\n\n\tsplitAt: function(location) {\n\t\tvar path = this._path;\n\t\treturn path ? path.splitAt(location) : null;\n\t},\n\n\tsplitAtTime: function(time) {\n\t\treturn this.splitAt(this.getLocationAtTime(time));\n\t},\n\n\tdivide: function(offset, isTime) {\n\t\treturn this.divideAtTime(offset === undefined ? 0.5 : isTime ? offset\n\t\t\t\t: this.getTimeAt(offset));\n\t},\n\n\tsplit: function(offset, isTime) {\n\t\treturn this.splitAtTime(offset === undefined ? 0.5 : isTime ? offset\n\t\t\t\t: this.getTimeAt(offset));\n\t},\n\n\treversed: function() {\n\t\treturn new Curve(this._segment2.reversed(), this._segment1.reversed());\n\t},\n\n\tclearHandles: function() {\n\t\tthis._segment1._handleOut._set(0, 0);\n\t\tthis._segment2._handleIn._set(0, 0);\n\t},\n\nstatics: {\n\tgetValues: function(segment1, segment2, matrix, straight) {\n\t\tvar p1 = segment1._point,\n\t\t\th1 = segment1._handleOut,\n\t\t\th2 = segment2._handleIn,\n\t\t\tp2 = segment2._point,\n\t\t\tx1 = p1.x, y1 = p1.y,\n\t\t\tx2 = p2.x, y2 = p2.y,\n\t\t\tvalues = straight\n\t\t\t\t? [ x1, y1, x1, y1, x2, y2, x2, y2 ]\n\t\t\t\t: [\n\t\t\t\t\tx1, y1,\n\t\t\t\t\tx1 + h1._x, y1 + h1._y,\n\t\t\t\t\tx2 + h2._x, y2 + h2._y,\n\t\t\t\t\tx2, y2\n\t\t\t\t];\n\t\tif (matrix)\n\t\t\tmatrix._transformCoordinates(values, values, 4);\n\t\treturn values;\n\t},\n\n\tsubdivide: function(v, t) {\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx1 = v[2], y1 = v[3],\n\t\t\tx2 = v[4], y2 = v[5],\n\t\t\tx3 = v[6], y3 = v[7];\n\t\tif (t === undefined)\n\t\t\tt = 0.5;\n\t\tvar u = 1 - t,\n\t\t\tx4 = u * x0 + t * x1, y4 = u * y0 + t * y1,\n\t\t\tx5 = u * x1 + t * x2, y5 = u * y1 + t * y2,\n\t\t\tx6 = u * x2 + t * x3, y6 = u * y2 + t * y3,\n\t\t\tx7 = u * x4 + t * x5, y7 = u * y4 + t * y5,\n\t\t\tx8 = u * x5 + t * x6, y8 = u * y5 + t * y6,\n\t\t\tx9 = u * x7 + t * x8, y9 = u * y7 + t * y8;\n\t\treturn [\n\t\t\t[x0, y0, x4, y4, x7, y7, x9, y9],\n\t\t\t[x9, y9, x8, y8, x6, y6, x3, y3]\n\t\t];\n\t},\n\n\tgetMonoCurves: function(v, dir) {\n\t\tvar curves = [],\n\t\t\tio = dir ? 0 : 1,\n\t\t\to0 = v[io + 0],\n\t\t\to1 = v[io + 2],\n\t\t\to2 = v[io + 4],\n\t\t\to3 = v[io + 6];\n\t\tif ((o0 >= o1) === (o1 >= o2) && (o1 >= o2) === (o2 >= o3)\n\t\t\t\t|| Curve.isStraight(v)) {\n\t\t\tcurves.push(v);\n\t\t} else {\n\t\t\tvar a = 3 * (o1 - o2) - o0 + o3,\n\t\t\t\tb = 2 * (o0 + o2) - 4 * o1,\n\t\t\t\tc = o1 - o0,\n\t\t\t\ttMin = 1e-8,\n\t\t\t\ttMax = 1 - tMin,\n\t\t\t\troots = [],\n\t\t\t\tn = Numerical.solveQuadratic(a, b, c, roots, tMin, tMax);\n\t\t\tif (!n) {\n\t\t\t\tcurves.push(v);\n\t\t\t} else {\n\t\t\t\troots.sort();\n\t\t\t\tvar t = roots[0],\n\t\t\t\t\tparts = Curve.subdivide(v, t);\n\t\t\t\tcurves.push(parts[0]);\n\t\t\t\tif (n > 1) {\n\t\t\t\t\tt = (roots[1] - t) / (1 - t);\n\t\t\t\t\tparts = Curve.subdivide(parts[1], t);\n\t\t\t\t\tcurves.push(parts[0]);\n\t\t\t\t}\n\t\t\t\tcurves.push(parts[1]);\n\t\t\t}\n\t\t}\n\t\treturn curves;\n\t},\n\n\tsolveCubic: function (v, coord, val, roots, min, max) {\n\t\tvar v0 = v[coord],\n\t\t\tv1 = v[coord + 2],\n\t\t\tv2 = v[coord + 4],\n\t\t\tv3 = v[coord + 6],\n\t\t\tres = 0;\n\t\tif (  !(v0 < val && v3 < val && v1 < val && v2 < val ||\n\t\t\t\tv0 > val && v3 > val && v1 > val && v2 > val)) {\n\t\t\tvar c = 3 * (v1 - v0),\n\t\t\t\tb = 3 * (v2 - v1) - c,\n\t\t\t\ta = v3 - v0 - c - b;\n\t\t\tres = Numerical.solveCubic(a, b, c, v0 - val, roots, min, max);\n\t\t}\n\t\treturn res;\n\t},\n\n\tgetTimeOf: function(v, point) {\n\t\tvar p0 = new Point(v[0], v[1]),\n\t\t\tp3 = new Point(v[6], v[7]),\n\t\t\tepsilon = 1e-12,\n\t\t\tgeomEpsilon = 1e-7,\n\t\t\tt = point.isClose(p0, epsilon) ? 0\n\t\t\t  : point.isClose(p3, epsilon) ? 1\n\t\t\t  : null;\n\t\tif (t === null) {\n\t\t\tvar coords = [point.x, point.y],\n\t\t\t\troots = [];\n\t\t\tfor (var c = 0; c < 2; c++) {\n\t\t\t\tvar count = Curve.solveCubic(v, c, coords[c], roots, 0, 1);\n\t\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\t\tvar u = roots[i];\n\t\t\t\t\tif (point.isClose(Curve.getPoint(v, u), geomEpsilon))\n\t\t\t\t\t\treturn u;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn point.isClose(p0, geomEpsilon) ? 0\n\t\t\t : point.isClose(p3, geomEpsilon) ? 1\n\t\t\t : null;\n\t},\n\n\tgetNearestTime: function(v, point) {\n\t\tif (Curve.isStraight(v)) {\n\t\t\tvar x0 = v[0], y0 = v[1],\n\t\t\t\tx3 = v[6], y3 = v[7],\n\t\t\t\tvx = x3 - x0, vy = y3 - y0,\n\t\t\t\tdet = vx * vx + vy * vy;\n\t\t\tif (det === 0)\n\t\t\t\treturn 0;\n\t\t\tvar u = ((point.x - x0) * vx + (point.y - y0) * vy) / det;\n\t\t\treturn u < 1e-12 ? 0\n\t\t\t\t : u > 0.999999999999 ? 1\n\t\t\t\t : Curve.getTimeOf(v,\n\t\t\t\t\tnew Point(x0 + u * vx, y0 + u * vy));\n\t\t}\n\n\t\tvar count = 100,\n\t\t\tminDist = Infinity,\n\t\t\tminT = 0;\n\n\t\tfunction refine(t) {\n\t\t\tif (t >= 0 && t <= 1) {\n\t\t\t\tvar dist = point.getDistance(Curve.getPoint(v, t), true);\n\t\t\t\tif (dist < minDist) {\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tminT = t;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= count; i++)\n\t\t\trefine(i / count);\n\n\t\tvar step = 1 / (count * 2);\n\t\twhile (step > 1e-8) {\n\t\t\tif (!refine(minT - step) && !refine(minT + step))\n\t\t\t\tstep /= 2;\n\t\t}\n\t\treturn minT;\n\t},\n\n\tgetPart: function(v, from, to) {\n\t\tvar flip = from > to;\n\t\tif (flip) {\n\t\t\tvar tmp = from;\n\t\t\tfrom = to;\n\t\t\tto = tmp;\n\t\t}\n\t\tif (from > 0)\n\t\t\tv = Curve.subdivide(v, from)[1];\n\t\tif (to < 1)\n\t\t\tv = Curve.subdivide(v, (to - from) / (1 - from))[0];\n\t\treturn flip\n\t\t\t\t? [v[6], v[7], v[4], v[5], v[2], v[3], v[0], v[1]]\n\t\t\t\t: v;\n\t},\n\n\tisFlatEnough: function(v, flatness) {\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx1 = v[2], y1 = v[3],\n\t\t\tx2 = v[4], y2 = v[5],\n\t\t\tx3 = v[6], y3 = v[7],\n\t\t\tux = 3 * x1 - 2 * x0 - x3,\n\t\t\tuy = 3 * y1 - 2 * y0 - y3,\n\t\t\tvx = 3 * x2 - 2 * x3 - x0,\n\t\t\tvy = 3 * y2 - 2 * y3 - y0;\n\t\treturn Math.max(ux * ux, vx * vx) + Math.max(uy * uy, vy * vy)\n\t\t\t\t<= 16 * flatness * flatness;\n\t},\n\n\tgetArea: function(v) {\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx1 = v[2], y1 = v[3],\n\t\t\tx2 = v[4], y2 = v[5],\n\t\t\tx3 = v[6], y3 = v[7];\n\t\treturn 3 * ((y3 - y0) * (x1 + x2) - (x3 - x0) * (y1 + y2)\n\t\t\t\t+ y1 * (x0 - x2) - x1 * (y0 - y2)\n\t\t\t\t+ y3 * (x2 + x0 / 3) - x3 * (y2 + y0 / 3)) / 20;\n\t},\n\n\tgetBounds: function(v) {\n\t\tvar min = v.slice(0, 2),\n\t\t\tmax = min.slice(),\n\t\t\troots = [0, 0];\n\t\tfor (var i = 0; i < 2; i++)\n\t\t\tCurve._addBounds(v[i], v[i + 2], v[i + 4], v[i + 6],\n\t\t\t\t\ti, 0, min, max, roots);\n\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\t},\n\n\t_addBounds: function(v0, v1, v2, v3, coord, padding, min, max, roots) {\n\t\tfunction add(value, padding) {\n\t\t\tvar left = value - padding,\n\t\t\t\tright = value + padding;\n\t\t\tif (left < min[coord])\n\t\t\t\tmin[coord] = left;\n\t\t\tif (right > max[coord])\n\t\t\t\tmax[coord] = right;\n\t\t}\n\n\t\tpadding /= 2;\n\t\tvar minPad = min[coord] - padding,\n\t\t\tmaxPad = max[coord] + padding;\n\t\tif (    v0 < minPad || v1 < minPad || v2 < minPad || v3 < minPad ||\n\t\t\t\tv0 > maxPad || v1 > maxPad || v2 > maxPad || v3 > maxPad) {\n\t\t\tif (v1 < v0 != v1 < v3 && v2 < v0 != v2 < v3) {\n\t\t\t\tadd(v0, padding);\n\t\t\t\tadd(v3, padding);\n\t\t\t} else {\n\t\t\t\tvar a = 3 * (v1 - v2) - v0 + v3,\n\t\t\t\t\tb = 2 * (v0 + v2) - 4 * v1,\n\t\t\t\t\tc = v1 - v0,\n\t\t\t\t\tcount = Numerical.solveQuadratic(a, b, c, roots),\n\t\t\t\t\ttMin = 1e-8,\n\t\t\t\t\ttMax = 1 - tMin;\n\t\t\t\tadd(v3, 0);\n\t\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\t\tvar t = roots[i],\n\t\t\t\t\t\tu = 1 - t;\n\t\t\t\t\tif (tMin <= t && t <= tMax)\n\t\t\t\t\t\tadd(u * u * u * v0\n\t\t\t\t\t\t\t+ 3 * u * u * t * v1\n\t\t\t\t\t\t\t+ 3 * u * t * t * v2\n\t\t\t\t\t\t\t+ t * t * t * v3,\n\t\t\t\t\t\t\tpadding);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}}, Base.each(\n\t['getBounds', 'getStrokeBounds', 'getHandleBounds'],\n\tfunction(name) {\n\t\tthis[name] = function() {\n\t\t\tif (!this._bounds)\n\t\t\t\tthis._bounds = {};\n\t\t\tvar bounds = this._bounds[name];\n\t\t\tif (!bounds) {\n\t\t\t\tbounds = this._bounds[name] = Path[name](\n\t\t\t\t\t\t[this._segment1, this._segment2], false, this._path);\n\t\t\t}\n\t\t\treturn bounds.clone();\n\t\t};\n\t},\n{\n\n}), Base.each({\n\tisStraight: function(p1, h1, h2, p2) {\n\t\tif (h1.isZero() && h2.isZero()) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tvar v = p2.subtract(p1);\n\t\t\tif (v.isZero()) {\n\t\t\t\treturn false;\n\t\t\t} else if (v.isCollinear(h1) && v.isCollinear(h2)) {\n\t\t\t\tvar l = new Line(p1, p2),\n\t\t\t\t\tepsilon = 1e-7;\n\t\t\t\tif (l.getDistance(p1.add(h1)) < epsilon &&\n\t\t\t\t\tl.getDistance(p2.add(h2)) < epsilon) {\n\t\t\t\t\tvar div = v.dot(v),\n\t\t\t\t\t\ts1 = v.dot(h1) / div,\n\t\t\t\t\t\ts2 = v.dot(h2) / div;\n\t\t\t\t\treturn s1 >= 0 && s1 <= 1 && s2 <= 0 && s2 >= -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\tisLinear: function(p1, h1, h2, p2) {\n\t\tvar third = p2.subtract(p1).divide(3);\n\t\treturn h1.equals(third) && h2.negate().equals(third);\n\t}\n}, function(test, name) {\n\tthis[name] = function(epsilon) {\n\t\tvar seg1 = this._segment1,\n\t\t\tseg2 = this._segment2;\n\t\treturn test(seg1._point, seg1._handleOut, seg2._handleIn, seg2._point,\n\t\t\t\tepsilon);\n\t};\n\n\tthis.statics[name] = function(v, epsilon) {\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx3 = v[6], y3 = v[7];\n\t\treturn test(\n\t\t\t\tnew Point(x0, y0),\n\t\t\t\tnew Point(v[2] - x0, v[3] - y0),\n\t\t\t\tnew Point(v[4] - x3, v[5] - y3),\n\t\t\t\tnew Point(x3, y3), epsilon);\n\t};\n}, {\n\tstatics: {},\n\n\thasHandles: function() {\n\t\treturn !this._segment1._handleOut.isZero()\n\t\t\t\t|| !this._segment2._handleIn.isZero();\n\t},\n\n\thasLength: function(epsilon) {\n\t\treturn (!this.getPoint1().equals(this.getPoint2()) || this.hasHandles())\n\t\t\t\t&& this.getLength() > (epsilon || 0);\n\t},\n\n\tisCollinear: function(curve) {\n\t\treturn curve && this.isStraight() && curve.isStraight()\n\t\t\t\t&& this.getLine().isCollinear(curve.getLine());\n\t},\n\n\tisHorizontal: function() {\n\t\treturn this.isStraight() && Math.abs(this.getTangentAtTime(0.5).y)\n\t\t\t\t< 1e-8;\n\t},\n\n\tisVertical: function() {\n\t\treturn this.isStraight() && Math.abs(this.getTangentAtTime(0.5).x)\n\t\t\t\t< 1e-8;\n\t}\n}), {\n\tbeans: false,\n\n\tgetLocationAt: function(offset, _isTime) {\n\t\treturn this.getLocationAtTime(\n\t\t\t\t_isTime ? offset : this.getTimeAt(offset));\n\t},\n\n\tgetLocationAtTime: function(t) {\n\t\treturn t != null && t >= 0 && t <= 1\n\t\t\t\t? new CurveLocation(this, t)\n\t\t\t\t: null;\n\t},\n\n\tgetTimeAt: function(offset, start) {\n\t\treturn Curve.getTimeAt(this.getValues(), offset, start);\n\t},\n\n\tgetParameterAt: '#getTimeAt',\n\n\tgetOffsetAtTime: function(t) {\n\t\treturn this.getPartLength(0, t);\n\t},\n\n\tgetLocationOf: function() {\n\t\treturn this.getLocationAtTime(this.getTimeOf(Point.read(arguments)));\n\t},\n\n\tgetOffsetOf: function() {\n\t\tvar loc = this.getLocationOf.apply(this, arguments);\n\t\treturn loc ? loc.getOffset() : null;\n\t},\n\n\tgetTimeOf: function() {\n\t\treturn Curve.getTimeOf(this.getValues(), Point.read(arguments));\n\t},\n\n\tgetParameterOf: '#getTimeOf',\n\n\tgetNearestLocation: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tvalues = this.getValues(),\n\t\t\tt = Curve.getNearestTime(values, point),\n\t\t\tpt = Curve.getPoint(values, t);\n\t\treturn new CurveLocation(this, t, pt, null, point.getDistance(pt));\n\t},\n\n\tgetNearestPoint: function() {\n\t\tvar loc = this.getNearestLocation.apply(this, arguments);\n\t\treturn loc ? loc.getPoint() : loc;\n\t}\n\n},\nnew function() {\n\tvar methods = ['getPoint', 'getTangent', 'getNormal', 'getWeightedTangent',\n\t\t'getWeightedNormal', 'getCurvature'];\n\treturn Base.each(methods,\n\t\tfunction(name) {\n\t\t\tthis[name + 'At'] = function(location, _isTime) {\n\t\t\t\tvar values = this.getValues();\n\t\t\t\treturn Curve[name](values, _isTime ? location\n\t\t\t\t\t\t: Curve.getTimeAt(values, location));\n\t\t\t};\n\n\t\t\tthis[name + 'AtTime'] = function(time) {\n\t\t\t\treturn Curve[name](this.getValues(), time);\n\t\t\t};\n\t\t}, {\n\t\t\tstatics: {\n\t\t\t\t_evaluateMethods: methods\n\t\t\t}\n\t\t}\n\t);\n},\nnew function() {\n\n\tfunction getLengthIntegrand(v) {\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx1 = v[2], y1 = v[3],\n\t\t\tx2 = v[4], y2 = v[5],\n\t\t\tx3 = v[6], y3 = v[7],\n\n\t\t\tax = 9 * (x1 - x2) + 3 * (x3 - x0),\n\t\t\tbx = 6 * (x0 + x2) - 12 * x1,\n\t\t\tcx = 3 * (x1 - x0),\n\n\t\t\tay = 9 * (y1 - y2) + 3 * (y3 - y0),\n\t\t\tby = 6 * (y0 + y2) - 12 * y1,\n\t\t\tcy = 3 * (y1 - y0);\n\n\t\treturn function(t) {\n\t\t\tvar dx = (ax * t + bx) * t + cx,\n\t\t\t\tdy = (ay * t + by) * t + cy;\n\t\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t\t};\n\t}\n\n\tfunction getIterations(a, b) {\n\t\treturn Math.max(2, Math.min(16, Math.ceil(Math.abs(b - a) * 32)));\n\t}\n\n\tfunction evaluate(v, t, type, normalized) {\n\t\tif (t == null || t < 0 || t > 1)\n\t\t\treturn null;\n\t\tvar x0 = v[0], y0 = v[1],\n\t\t\tx1 = v[2], y1 = v[3],\n\t\t\tx2 = v[4], y2 = v[5],\n\t\t\tx3 = v[6], y3 = v[7],\n\t\t\tisZero = Numerical.isZero;\n\t\tif (isZero(x1 - x0) && isZero(y1 - y0)) {\n\t\t\tx1 = x0;\n\t\t\ty1 = y0;\n\t\t}\n\t\tif (isZero(x2 - x3) && isZero(y2 - y3)) {\n\t\t\tx2 = x3;\n\t\t\ty2 = y3;\n\t\t}\n\t\tvar cx = 3 * (x1 - x0),\n\t\t\tbx = 3 * (x2 - x1) - cx,\n\t\t\tax = x3 - x0 - cx - bx,\n\t\t\tcy = 3 * (y1 - y0),\n\t\t\tby = 3 * (y2 - y1) - cy,\n\t\t\tay = y3 - y0 - cy - by,\n\t\t\tx, y;\n\t\tif (type === 0) {\n\t\t\tx = t === 0 ? x0 : t === 1 ? x3\n\t\t\t\t\t: ((ax * t + bx) * t + cx) * t + x0;\n\t\t\ty = t === 0 ? y0 : t === 1 ? y3\n\t\t\t\t\t: ((ay * t + by) * t + cy) * t + y0;\n\t\t} else {\n\t\t\tvar tMin = 1e-8,\n\t\t\t\ttMax = 1 - tMin;\n\t\t\tif (t < tMin) {\n\t\t\t\tx = cx;\n\t\t\t\ty = cy;\n\t\t\t} else if (t > tMax) {\n\t\t\t\tx = 3 * (x3 - x2);\n\t\t\t\ty = 3 * (y3 - y2);\n\t\t\t} else {\n\t\t\t\tx = (3 * ax * t + 2 * bx) * t + cx;\n\t\t\t\ty = (3 * ay * t + 2 * by) * t + cy;\n\t\t\t}\n\t\t\tif (normalized) {\n\t\t\t\tif (x === 0 && y === 0 && (t < tMin || t > tMax)) {\n\t\t\t\t\tx = x2 - x1;\n\t\t\t\t\ty = y2 - y1;\n\t\t\t\t}\n\t\t\t\tvar len = Math.sqrt(x * x + y * y);\n\t\t\t\tif (len) {\n\t\t\t\t\tx /= len;\n\t\t\t\t\ty /= len;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (type === 3) {\n\t\t\t\tvar x2 = 6 * ax * t + 2 * bx,\n\t\t\t\t\ty2 = 6 * ay * t + 2 * by,\n\t\t\t\t\td = Math.pow(x * x + y * y, 3 / 2);\n\t\t\t\tx = d !== 0 ? (x * y2 - y * x2) / d : 0;\n\t\t\t\ty = 0;\n\t\t\t}\n\t\t}\n\t\treturn type === 2 ? new Point(y, -x) : new Point(x, y);\n\t}\n\n\treturn { statics: {\n\n\t\tclassify: function(v) {\n\n\t\t\tvar x0 = v[0], y0 = v[1],\n\t\t\t\tx1 = v[2], y1 = v[3],\n\t\t\t\tx2 = v[4], y2 = v[5],\n\t\t\t\tx3 = v[6], y3 = v[7],\n\t\t\t\ta1 = x0 * (y3 - y2) + y0 * (x2 - x3) + x3 * y2 - y3 * x2,\n\t\t\t\ta2 = x1 * (y0 - y3) + y1 * (x3 - x0) + x0 * y3 - y0 * x3,\n\t\t\t\ta3 = x2 * (y1 - y0) + y2 * (x0 - x1) + x1 * y0 - y1 * x0,\n\t\t\t\td3 = 3 * a3,\n\t\t\t\td2 = d3 - a2,\n\t\t\t\td1 = d2 - a2 + a1,\n\t\t\t\tl = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3),\n\t\t\t\ts = l !== 0 ? 1 / l : 0,\n\t\t\t\tisZero = Numerical.isZero,\n\t\t\t\tserpentine = 'serpentine';\n\t\t\td1 *= s;\n\t\t\td2 *= s;\n\t\t\td3 *= s;\n\n\t\t\tfunction type(type, t1, t2) {\n\t\t\t\tvar hasRoots = t1 !== undefined,\n\t\t\t\t\tt1Ok = hasRoots && t1 > 0 && t1 < 1,\n\t\t\t\t\tt2Ok = hasRoots && t2 > 0 && t2 < 1;\n\t\t\t\tif (hasRoots && (!(t1Ok || t2Ok)\n\t\t\t\t\t\t|| type === 'loop' && !(t1Ok && t2Ok))) {\n\t\t\t\t\ttype = 'arch';\n\t\t\t\t\tt1Ok = t2Ok = false;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttype: type,\n\t\t\t\t\troots: t1Ok || t2Ok\n\t\t\t\t\t\t\t? t1Ok && t2Ok\n\t\t\t\t\t\t\t\t? t1 < t2 ? [t1, t2] : [t2, t1]\n\t\t\t\t\t\t\t\t: [t1Ok ? t1 : t2]\n\t\t\t\t\t\t\t: null\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (isZero(d1)) {\n\t\t\t\treturn isZero(d2)\n\t\t\t\t\t\t? type(isZero(d3) ? 'line' : 'quadratic')\n\t\t\t\t\t\t: type(serpentine, d3 / (3 * d2));\n\t\t\t}\n\t\t\tvar d = 3 * d2 * d2 - 4 * d1 * d3;\n\t\t\tif (isZero(d)) {\n\t\t\t\treturn type('cusp', d2 / (2 * d1));\n\t\t\t}\n\t\t\tvar f1 = d > 0 ? Math.sqrt(d / 3) : Math.sqrt(-d),\n\t\t\t\tf2 = 2 * d1;\n\t\t\treturn type(d > 0 ? serpentine : 'loop',\n\t\t\t\t\t(d2 + f1) / f2,\n\t\t\t\t\t(d2 - f1) / f2);\n\t\t},\n\n\t\tgetLength: function(v, a, b, ds) {\n\t\t\tif (a === undefined)\n\t\t\t\ta = 0;\n\t\t\tif (b === undefined)\n\t\t\t\tb = 1;\n\t\t\tif (Curve.isStraight(v)) {\n\t\t\t\tvar c = v;\n\t\t\t\tif (b < 1) {\n\t\t\t\t\tc = Curve.subdivide(c, b)[0];\n\t\t\t\t\ta /= b;\n\t\t\t\t}\n\t\t\t\tif (a > 0) {\n\t\t\t\t\tc = Curve.subdivide(c, a)[1];\n\t\t\t\t}\n\t\t\t\tvar dx = c[6] - c[0],\n\t\t\t\t\tdy = c[7] - c[1];\n\t\t\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t\t\t}\n\t\t\treturn Numerical.integrate(ds || getLengthIntegrand(v), a, b,\n\t\t\t\t\tgetIterations(a, b));\n\t\t},\n\n\t\tgetTimeAt: function(v, offset, start) {\n\t\t\tif (start === undefined)\n\t\t\t\tstart = offset < 0 ? 1 : 0;\n\t\t\tif (offset === 0)\n\t\t\t\treturn start;\n\t\t\tvar abs = Math.abs,\n\t\t\t\tepsilon = 1e-12,\n\t\t\t\tforward = offset > 0,\n\t\t\t\ta = forward ? start : 0,\n\t\t\t\tb = forward ? 1 : start,\n\t\t\t\tds = getLengthIntegrand(v),\n\t\t\t\trangeLength = Curve.getLength(v, a, b, ds),\n\t\t\t\tdiff = abs(offset) - rangeLength;\n\t\t\tif (abs(diff) < epsilon) {\n\t\t\t\treturn forward ? b : a;\n\t\t\t} else if (diff > epsilon) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tvar guess = offset / rangeLength,\n\t\t\t\tlength = 0;\n\t\t\tfunction f(t) {\n\t\t\t\tlength += Numerical.integrate(ds, start, t,\n\t\t\t\t\t\tgetIterations(start, t));\n\t\t\t\tstart = t;\n\t\t\t\treturn length - offset;\n\t\t\t}\n\t\t\treturn Numerical.findRoot(f, ds, start + guess, a, b, 32,\n\t\t\t\t\t1e-12);\n\t\t},\n\n\t\tgetPoint: function(v, t) {\n\t\t\treturn evaluate(v, t, 0, false);\n\t\t},\n\n\t\tgetTangent: function(v, t) {\n\t\t\treturn evaluate(v, t, 1, true);\n\t\t},\n\n\t\tgetWeightedTangent: function(v, t) {\n\t\t\treturn evaluate(v, t, 1, false);\n\t\t},\n\n\t\tgetNormal: function(v, t) {\n\t\t\treturn evaluate(v, t, 2, true);\n\t\t},\n\n\t\tgetWeightedNormal: function(v, t) {\n\t\t\treturn evaluate(v, t, 2, false);\n\t\t},\n\n\t\tgetCurvature: function(v, t) {\n\t\t\treturn evaluate(v, t, 3, false).x;\n\t\t},\n\n\t\tgetPeaks: function(v) {\n\t\t\tvar x0 = v[0], y0 = v[1],\n\t\t\t\tx1 = v[2], y1 = v[3],\n\t\t\t\tx2 = v[4], y2 = v[5],\n\t\t\t\tx3 = v[6], y3 = v[7],\n\t\t\t\tax =     -x0 + 3 * x1 - 3 * x2 + x3,\n\t\t\t\tbx =  3 * x0 - 6 * x1 + 3 * x2,\n\t\t\t\tcx = -3 * x0 + 3 * x1,\n\t\t\t\tay =     -y0 + 3 * y1 - 3 * y2 + y3,\n\t\t\t\tby =  3 * y0 - 6 * y1 + 3 * y2,\n\t\t\t\tcy = -3 * y0 + 3 * y1,\n\t\t\t\ttMin = 1e-8,\n\t\t\t\ttMax = 1 - tMin,\n\t\t\t\troots = [];\n\t\t\tNumerical.solveCubic(\n\t\t\t\t\t9 * (ax * ax + ay * ay),\n\t\t\t\t\t9 * (ax * bx + by * ay),\n\t\t\t\t\t2 * (bx * bx + by * by) + 3 * (cx * ax + cy * ay),\n\t\t\t\t\t(cx * bx + by * cy),\n\t\t\t\t\troots, tMin, tMax);\n\t\t\treturn roots.sort();\n\t\t}\n\t}};\n},\nnew function() {\n\n\tfunction addLocation(locations, include, c1, t1, c2, t2, overlap) {\n\t\tvar excludeStart = !overlap && c1.getPrevious() === c2,\n\t\t\texcludeEnd = !overlap && c1 !== c2 && c1.getNext() === c2,\n\t\t\ttMin = 1e-8,\n\t\t\ttMax = 1 - tMin;\n\t\tif (t1 !== null && t1 >= (excludeStart ? tMin : 0) &&\n\t\t\tt1 <= (excludeEnd ? tMax : 1)) {\n\t\t\tif (t2 !== null && t2 >= (excludeEnd ? tMin : 0) &&\n\t\t\t\tt2 <= (excludeStart ? tMax : 1)) {\n\t\t\t\tvar loc1 = new CurveLocation(c1, t1, null, overlap),\n\t\t\t\t\tloc2 = new CurveLocation(c2, t2, null, overlap);\n\t\t\t\tloc1._intersection = loc2;\n\t\t\t\tloc2._intersection = loc1;\n\t\t\t\tif (!include || include(loc1)) {\n\t\t\t\t\tCurveLocation.insert(locations, loc1, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction addCurveIntersections(v1, v2, c1, c2, locations, include, flip,\n\t\t\trecursion, calls, tMin, tMax, uMin, uMax) {\n\t\tif (++calls >= 4096 || ++recursion >= 40)\n\t\t\treturn calls;\n\t\tvar fatLineEpsilon = 1e-9,\n\t\t\tq0x = v2[0], q0y = v2[1], q3x = v2[6], q3y = v2[7],\n\t\t\tgetSignedDistance = Line.getSignedDistance,\n\t\t\td1 = getSignedDistance(q0x, q0y, q3x, q3y, v2[2], v2[3]),\n\t\t\td2 = getSignedDistance(q0x, q0y, q3x, q3y, v2[4], v2[5]),\n\t\t\tfactor = d1 * d2 > 0 ? 3 / 4 : 4 / 9,\n\t\t\tdMin = factor * Math.min(0, d1, d2),\n\t\t\tdMax = factor * Math.max(0, d1, d2),\n\t\t\tdp0 = getSignedDistance(q0x, q0y, q3x, q3y, v1[0], v1[1]),\n\t\t\tdp1 = getSignedDistance(q0x, q0y, q3x, q3y, v1[2], v1[3]),\n\t\t\tdp2 = getSignedDistance(q0x, q0y, q3x, q3y, v1[4], v1[5]),\n\t\t\tdp3 = getSignedDistance(q0x, q0y, q3x, q3y, v1[6], v1[7]),\n\t\t\thull = getConvexHull(dp0, dp1, dp2, dp3),\n\t\t\ttop = hull[0],\n\t\t\tbottom = hull[1],\n\t\t\ttMinClip,\n\t\t\ttMaxClip;\n\t\tif (d1 === 0 && d2 === 0\n\t\t\t\t&& dp0 === 0 && dp1 === 0 && dp2 === 0 && dp3 === 0\n\t\t\t|| (tMinClip = clipConvexHull(top, bottom, dMin, dMax)) == null\n\t\t\t|| (tMaxClip = clipConvexHull(top.reverse(), bottom.reverse(),\n\t\t\t\tdMin, dMax)) == null)\n\t\t\treturn calls;\n\t\tvar tMinNew = tMin + (tMax - tMin) * tMinClip,\n\t\t\ttMaxNew = tMin + (tMax - tMin) * tMaxClip;\n\t\tif (Math.max(uMax - uMin, tMaxNew - tMinNew) < fatLineEpsilon) {\n\t\t\tvar t = (tMinNew + tMaxNew) / 2,\n\t\t\t\tu = (uMin + uMax) / 2;\n\t\t\taddLocation(locations, include,\n\t\t\t\t\tflip ? c2 : c1, flip ? u : t,\n\t\t\t\t\tflip ? c1 : c2, flip ? t : u);\n\t\t} else {\n\t\t\tv1 = Curve.getPart(v1, tMinClip, tMaxClip);\n\t\t\tif (tMaxClip - tMinClip > 0.8) {\n\t\t\t\tif (tMaxNew - tMinNew > uMax - uMin) {\n\t\t\t\t\tvar parts = Curve.subdivide(v1, 0.5),\n\t\t\t\t\t\tt = (tMinNew + tMaxNew) / 2;\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tv2, parts[0], c2, c1, locations, include, !flip,\n\t\t\t\t\t\t\trecursion, calls, uMin, uMax, tMinNew, t);\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tv2, parts[1], c2, c1, locations, include, !flip,\n\t\t\t\t\t\t\trecursion, calls, uMin, uMax, t, tMaxNew);\n\t\t\t\t} else {\n\t\t\t\t\tvar parts = Curve.subdivide(v2, 0.5),\n\t\t\t\t\t\tu = (uMin + uMax) / 2;\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tparts[0], v1, c2, c1, locations, include, !flip,\n\t\t\t\t\t\t\trecursion, calls, uMin, u, tMinNew, tMaxNew);\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tparts[1], v1, c2, c1, locations, include, !flip,\n\t\t\t\t\t\t\trecursion, calls, u, uMax, tMinNew, tMaxNew);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (uMax - uMin >= fatLineEpsilon) {\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tv2, v1, c2, c1, locations, include, !flip,\n\t\t\t\t\t\t\trecursion, calls, uMin, uMax, tMinNew, tMaxNew);\n\t\t\t\t} else {\n\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tv1, v2, c1, c2, locations, include, flip,\n\t\t\t\t\t\t\trecursion, calls, tMinNew, tMaxNew, uMin, uMax);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn calls;\n\t}\n\n\tfunction getConvexHull(dq0, dq1, dq2, dq3) {\n\t\tvar p0 = [ 0, dq0 ],\n\t\t\tp1 = [ 1 / 3, dq1 ],\n\t\t\tp2 = [ 2 / 3, dq2 ],\n\t\t\tp3 = [ 1, dq3 ],\n\t\t\tdist1 = dq1 - (2 * dq0 + dq3) / 3,\n\t\t\tdist2 = dq2 - (dq0 + 2 * dq3) / 3,\n\t\t\thull;\n\t\tif (dist1 * dist2 < 0) {\n\t\t\thull = [[p0, p1, p3], [p0, p2, p3]];\n\t\t} else {\n\t\t\tvar distRatio = dist1 / dist2;\n\t\t\thull = [\n\t\t\t\tdistRatio >= 2 ? [p0, p1, p3]\n\t\t\t\t: distRatio <= 0.5 ? [p0, p2, p3]\n\t\t\t\t: [p0, p1, p2, p3],\n\t\t\t\t[p0, p3]\n\t\t\t];\n\t\t}\n\t\treturn (dist1 || dist2) < 0 ? hull.reverse() : hull;\n\t}\n\n\tfunction clipConvexHull(hullTop, hullBottom, dMin, dMax) {\n\t\tif (hullTop[0][1] < dMin) {\n\t\t\treturn clipConvexHullPart(hullTop, true, dMin);\n\t\t} else if (hullBottom[0][1] > dMax) {\n\t\t\treturn clipConvexHullPart(hullBottom, false, dMax);\n\t\t} else {\n\t\t\treturn hullTop[0][0];\n\t\t}\n\t}\n\n\tfunction clipConvexHullPart(part, top, threshold) {\n\t\tvar px = part[0][0],\n\t\t\tpy = part[0][1];\n\t\tfor (var i = 1, l = part.length; i < l; i++) {\n\t\t\tvar qx = part[i][0],\n\t\t\t\tqy = part[i][1];\n\t\t\tif (top ? qy >= threshold : qy <= threshold) {\n\t\t\t\treturn qy === threshold ? qx\n\t\t\t\t\t\t: px + (threshold - py) * (qx - px) / (qy - py);\n\t\t\t}\n\t\t\tpx = qx;\n\t\t\tpy = qy;\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction getCurveLineIntersections(v, px, py, vx, vy) {\n\t\tvar isZero = Numerical.isZero;\n\t\tif (isZero(vx) && isZero(vy)) {\n\t\t\tvar t = Curve.getTimeOf(v, new Point(px, py));\n\t\t\treturn t === null ? [] : [t];\n\t\t}\n\t\tvar angle = Math.atan2(-vy, vx),\n\t\t\tsin = Math.sin(angle),\n\t\t\tcos = Math.cos(angle),\n\t\t\trv = [],\n\t\t\troots = [];\n\t\tfor (var i = 0; i < 8; i += 2) {\n\t\t\tvar x = v[i] - px,\n\t\t\t\ty = v[i + 1] - py;\n\t\t\trv.push(\n\t\t\t\tx * cos - y * sin,\n\t\t\t\tx * sin + y * cos);\n\t\t}\n\t\tCurve.solveCubic(rv, 1, 0, roots, 0, 1);\n\t\treturn roots;\n\t}\n\n\tfunction addCurveLineIntersections(v1, v2, c1, c2, locations, include,\n\t\t\tflip) {\n\t\tvar x1 = v2[0], y1 = v2[1],\n\t\t\tx2 = v2[6], y2 = v2[7],\n\t\t\troots = getCurveLineIntersections(v1, x1, y1, x2 - x1, y2 - y1);\n\t\tfor (var i = 0, l = roots.length; i < l; i++) {\n\t\t\tvar t1 = roots[i],\n\t\t\t\tp1 = Curve.getPoint(v1, t1),\n\t\t\t\tt2 = Curve.getTimeOf(v2, p1);\n\t\t\tif (t2 !== null) {\n\t\t\t\taddLocation(locations, include,\n\t\t\t\t\t\tflip ? c2 : c1, flip ? t2 : t1,\n\t\t\t\t\t\tflip ? c1 : c2, flip ? t1 : t2);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction addLineIntersection(v1, v2, c1, c2, locations, include) {\n\t\tvar pt = Line.intersect(\n\t\t\t\tv1[0], v1[1], v1[6], v1[7],\n\t\t\t\tv2[0], v2[1], v2[6], v2[7]);\n\t\tif (pt) {\n\t\t\taddLocation(locations, include,\n\t\t\t\t\tc1, Curve.getTimeOf(v1, pt),\n\t\t\t\t\tc2, Curve.getTimeOf(v2, pt));\n\t\t}\n\t}\n\n\tfunction getCurveIntersections(v1, v2, c1, c2, locations, include) {\n\t\tvar epsilon = 1e-12,\n\t\t\tmin = Math.min,\n\t\t\tmax = Math.max;\n\n\t\tif (max(v1[0], v1[2], v1[4], v1[6]) + epsilon >\n\t\t\tmin(v2[0], v2[2], v2[4], v2[6]) &&\n\t\t\tmin(v1[0], v1[2], v1[4], v1[6]) - epsilon <\n\t\t\tmax(v2[0], v2[2], v2[4], v2[6]) &&\n\t\t\tmax(v1[1], v1[3], v1[5], v1[7]) + epsilon >\n\t\t\tmin(v2[1], v2[3], v2[5], v2[7]) &&\n\t\t\tmin(v1[1], v1[3], v1[5], v1[7]) - epsilon <\n\t\t\tmax(v2[1], v2[3], v2[5], v2[7])) {\n\t\t\tvar overlaps = getOverlaps(v1, v2);\n\t\t\tif (overlaps) {\n\t\t\t\tfor (var i = 0; i < 2; i++) {\n\t\t\t\t\tvar overlap = overlaps[i];\n\t\t\t\t\taddLocation(locations, include,\n\t\t\t\t\t\t\tc1, overlap[0],\n\t\t\t\t\t\t\tc2, overlap[1], true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar straight1 = Curve.isStraight(v1),\n\t\t\t\t\tstraight2 = Curve.isStraight(v2),\n\t\t\t\t\tstraight = straight1 && straight2,\n\t\t\t\t\tflip = straight1 && !straight2,\n\t\t\t\t\tbefore = locations.length;\n\t\t\t\t(straight\n\t\t\t\t\t? addLineIntersection\n\t\t\t\t\t: straight1 || straight2\n\t\t\t\t\t\t? addCurveLineIntersections\n\t\t\t\t\t\t: addCurveIntersections)(\n\t\t\t\t\t\t\tflip ? v2 : v1, flip ? v1 : v2,\n\t\t\t\t\t\t\tflip ? c2 : c1, flip ? c1 : c2,\n\t\t\t\t\t\t\tlocations, include, flip,\n\t\t\t\t\t\t\t0, 0, 0, 1, 0, 1);\n\t\t\t\tif (!straight || locations.length === before) {\n\t\t\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\t\t\tvar t1 = i >> 1,\n\t\t\t\t\t\t\tt2 = i & 1,\n\t\t\t\t\t\t\ti1 = t1 * 6,\n\t\t\t\t\t\t\ti2 = t2 * 6,\n\t\t\t\t\t\t\tp1 = new Point(v1[i1], v1[i1 + 1]),\n\t\t\t\t\t\t\tp2 = new Point(v2[i2], v2[i2 + 1]);\n\t\t\t\t\t\tif (p1.isClose(p2, epsilon)) {\n\t\t\t\t\t\t\taddLocation(locations, include,\n\t\t\t\t\t\t\t\t\tc1, t1,\n\t\t\t\t\t\t\t\t\tc2, t2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn locations;\n\t}\n\n\tfunction getLoopIntersection(v1, c1, locations, include) {\n\t\tvar info = Curve.classify(v1);\n\t\tif (info.type === 'loop') {\n\t\t\tvar roots = info.roots;\n\t\t\taddLocation(locations, include,\n\t\t\t\t\tc1, roots[0],\n\t\t\t\t\tc1, roots[1]);\n\t\t}\n\t  return locations;\n\t}\n\n\tfunction getIntersections(curves1, curves2, include, matrix1, matrix2,\n\t\t\t_returnFirst) {\n\t\tvar self = !curves2;\n\t\tif (self)\n\t\t\tcurves2 = curves1;\n\t\tvar length1 = curves1.length,\n\t\t\tlength2 = curves2.length,\n\t\t\tvalues2 = [],\n\t\t\tarrays = [],\n\t\t\tlocations,\n\t\t\tcurrent;\n\t\tfor (var i = 0; i < length2; i++)\n\t\t\tvalues2[i] = curves2[i].getValues(matrix2);\n\t\tfor (var i = 0; i < length1; i++) {\n\t\t\tvar curve1 = curves1[i],\n\t\t\t\tvalues1 = self ? values2[i] : curve1.getValues(matrix1),\n\t\t\t\tpath1 = curve1.getPath();\n\t\t\tif (path1 !== current) {\n\t\t\t\tcurrent = path1;\n\t\t\t\tlocations = [];\n\t\t\t\tarrays.push(locations);\n\t\t\t}\n\t\t\tif (self) {\n\t\t\t\tgetLoopIntersection(values1, curve1, locations, include);\n\t\t\t}\n\t\t\tfor (var j = self ? i + 1 : 0; j < length2; j++) {\n\t\t\t\tif (_returnFirst && locations.length)\n\t\t\t\t\treturn locations;\n\t\t\t\tgetCurveIntersections(values1, values2[j], curve1, curves2[j],\n\t\t\t\t\t\tlocations, include);\n\t\t\t}\n\t\t}\n\t\tlocations = [];\n\t\tfor (var i = 0, l = arrays.length; i < l; i++) {\n\t\t\tlocations.push.apply(locations, arrays[i]);\n\t\t}\n\t\treturn locations;\n\t}\n\n\tfunction getOverlaps(v1, v2) {\n\n\t\tfunction getSquaredLineLength(v) {\n\t\t\tvar x = v[6] - v[0],\n\t\t\t\ty = v[7] - v[1];\n\t\t\treturn x * x + y * y;\n\t\t}\n\n\t\tvar abs = Math.abs,\n\t\t\tgetDistance = Line.getDistance,\n\t\t\ttimeEpsilon = 1e-8,\n\t\t\tgeomEpsilon = 1e-7,\n\t\t\tstraight1 = Curve.isStraight(v1),\n\t\t\tstraight2 = Curve.isStraight(v2),\n\t\t\tstraightBoth = straight1 && straight2,\n\t\t\tflip = getSquaredLineLength(v1) < getSquaredLineLength(v2),\n\t\t\tl1 = flip ? v2 : v1,\n\t\t\tl2 = flip ? v1 : v2,\n\t\t\tpx = l1[0], py = l1[1],\n\t\t\tvx = l1[6] - px, vy = l1[7] - py;\n\t\tif (getDistance(px, py, vx, vy, l2[0], l2[1], true) < geomEpsilon &&\n\t\t\tgetDistance(px, py, vx, vy, l2[6], l2[7], true) < geomEpsilon) {\n\t\t\tif (!straightBoth &&\n\t\t\t\tgetDistance(px, py, vx, vy, l1[2], l1[3], true) < geomEpsilon &&\n\t\t\t\tgetDistance(px, py, vx, vy, l1[4], l1[5], true) < geomEpsilon &&\n\t\t\t\tgetDistance(px, py, vx, vy, l2[2], l2[3], true) < geomEpsilon &&\n\t\t\t\tgetDistance(px, py, vx, vy, l2[4], l2[5], true) < geomEpsilon) {\n\t\t\t\tstraight1 = straight2 = straightBoth = true;\n\t\t\t}\n\t\t} else if (straightBoth) {\n\t\t\treturn null;\n\t\t}\n\t\tif (straight1 ^ straight2) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar v = [v1, v2],\n\t\t\tpairs = [];\n\t\tfor (var i = 0; i < 4 && pairs.length < 2; i++) {\n\t\t\tvar i1 = i & 1,\n\t\t\t\ti2 = i1 ^ 1,\n\t\t\t\tt1 = i >> 1,\n\t\t\t\tt2 = Curve.getTimeOf(v[i1], new Point(\n\t\t\t\t\tv[i2][t1 ? 6 : 0],\n\t\t\t\t\tv[i2][t1 ? 7 : 1]));\n\t\t\tif (t2 != null) {\n\t\t\t\tvar pair = i1 ? [t1, t2] : [t2, t1];\n\t\t\t\tif (!pairs.length ||\n\t\t\t\t\tabs(pair[0] - pairs[0][0]) > timeEpsilon &&\n\t\t\t\t\tabs(pair[1] - pairs[0][1]) > timeEpsilon) {\n\t\t\t\t\tpairs.push(pair);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i > 2 && !pairs.length)\n\t\t\t\tbreak;\n\t\t}\n\t\tif (pairs.length !== 2) {\n\t\t\tpairs = null;\n\t\t} else if (!straightBoth) {\n\t\t\tvar o1 = Curve.getPart(v1, pairs[0][0], pairs[1][0]),\n\t\t\t\to2 = Curve.getPart(v2, pairs[0][1], pairs[1][1]);\n\t\t\tif (abs(o2[2] - o1[2]) > geomEpsilon ||\n\t\t\t\tabs(o2[3] - o1[3]) > geomEpsilon ||\n\t\t\t\tabs(o2[4] - o1[4]) > geomEpsilon ||\n\t\t\t\tabs(o2[5] - o1[5]) > geomEpsilon)\n\t\t\t\tpairs = null;\n\t\t}\n\t\treturn pairs;\n\t}\n\n\treturn {\n\t\tgetIntersections: function(curve) {\n\t\t\tvar v1 = this.getValues(),\n\t\t\t\tv2 = curve && curve !== this && curve.getValues();\n\t\t\treturn v2 ? getCurveIntersections(v1, v2, this, curve, [])\n\t\t\t\t\t  : getLoopIntersection(v1, this, []);\n\t\t},\n\n\t\tstatics: {\n\t\t\tgetOverlaps: getOverlaps,\n\t\t\tgetIntersections: getIntersections,\n\t\t\tgetCurveLineIntersections: getCurveLineIntersections\n\t\t}\n\t};\n});\n\nvar CurveLocation = Base.extend({\n\t_class: 'CurveLocation',\n\n\tinitialize: function CurveLocation(curve, time, point, _overlap, _distance) {\n\t\tif (time >= 0.99999999) {\n\t\t\tvar next = curve.getNext();\n\t\t\tif (next) {\n\t\t\t\ttime = 0;\n\t\t\t\tcurve = next;\n\t\t\t}\n\t\t}\n\t\tthis._setCurve(curve);\n\t\tthis._time = time;\n\t\tthis._point = point || curve.getPointAtTime(time);\n\t\tthis._overlap = _overlap;\n\t\tthis._distance = _distance;\n\t\tthis._intersection = this._next = this._previous = null;\n\t},\n\n\t_setCurve: function(curve) {\n\t\tvar path = curve._path;\n\t\tthis._path = path;\n\t\tthis._version = path ? path._version : 0;\n\t\tthis._curve = curve;\n\t\tthis._segment = null;\n\t\tthis._segment1 = curve._segment1;\n\t\tthis._segment2 = curve._segment2;\n\t},\n\n\t_setSegment: function(segment) {\n\t\tthis._setCurve(segment.getCurve());\n\t\tthis._segment = segment;\n\t\tthis._time = segment === this._segment1 ? 0 : 1;\n\t\tthis._point = segment._point.clone();\n\t},\n\n\tgetSegment: function() {\n\t\tvar segment = this._segment;\n\t\tif (!segment) {\n\t\t\tvar curve = this.getCurve(),\n\t\t\t\ttime = this.getTime();\n\t\t\tif (time === 0) {\n\t\t\t\tsegment = curve._segment1;\n\t\t\t} else if (time === 1) {\n\t\t\t\tsegment = curve._segment2;\n\t\t\t} else if (time != null) {\n\t\t\t\tsegment = curve.getPartLength(0, time)\n\t\t\t\t\t< curve.getPartLength(time, 1)\n\t\t\t\t\t\t? curve._segment1\n\t\t\t\t\t\t: curve._segment2;\n\t\t\t}\n\t\t\tthis._segment = segment;\n\t\t}\n\t\treturn segment;\n\t},\n\n\tgetCurve: function() {\n\t\tvar path = this._path,\n\t\t\tthat = this;\n\t\tif (path && path._version !== this._version) {\n\t\t\tthis._time = this._offset = this._curveOffset = this._curve = null;\n\t\t}\n\n\t\tfunction trySegment(segment) {\n\t\t\tvar curve = segment && segment.getCurve();\n\t\t\tif (curve && (that._time = curve.getTimeOf(that._point)) != null) {\n\t\t\t\tthat._setCurve(curve);\n\t\t\t\treturn curve;\n\t\t\t}\n\t\t}\n\n\t\treturn this._curve\n\t\t\t|| trySegment(this._segment)\n\t\t\t|| trySegment(this._segment1)\n\t\t\t|| trySegment(this._segment2.getPrevious());\n\t},\n\n\tgetPath: function() {\n\t\tvar curve = this.getCurve();\n\t\treturn curve && curve._path;\n\t},\n\n\tgetIndex: function() {\n\t\tvar curve = this.getCurve();\n\t\treturn curve && curve.getIndex();\n\t},\n\n\tgetTime: function() {\n\t\tvar curve = this.getCurve(),\n\t\t\ttime = this._time;\n\t\treturn curve && time == null\n\t\t\t? this._time = curve.getTimeOf(this._point)\n\t\t\t: time;\n\t},\n\n\tgetParameter: '#getTime',\n\n\tgetPoint: function() {\n\t\treturn this._point;\n\t},\n\n\tgetOffset: function() {\n\t\tvar offset = this._offset;\n\t\tif (offset == null) {\n\t\t\toffset = 0;\n\t\t\tvar path = this.getPath(),\n\t\t\t\tindex = this.getIndex();\n\t\t\tif (path && index != null) {\n\t\t\t\tvar curves = path.getCurves();\n\t\t\t\tfor (var i = 0; i < index; i++)\n\t\t\t\t\toffset += curves[i].getLength();\n\t\t\t}\n\t\t\tthis._offset = offset += this.getCurveOffset();\n\t\t}\n\t\treturn offset;\n\t},\n\n\tgetCurveOffset: function() {\n\t\tvar offset = this._curveOffset;\n\t\tif (offset == null) {\n\t\t\tvar curve = this.getCurve(),\n\t\t\t\ttime = this.getTime();\n\t\t\tthis._curveOffset = offset = time != null && curve\n\t\t\t\t\t&& curve.getPartLength(0, time);\n\t\t}\n\t\treturn offset;\n\t},\n\n\tgetIntersection: function() {\n\t\treturn this._intersection;\n\t},\n\n\tgetDistance: function() {\n\t\treturn this._distance;\n\t},\n\n\tdivide: function() {\n\t\tvar curve = this.getCurve(),\n\t\t\tres = curve && curve.divideAtTime(this.getTime());\n\t\tif (res) {\n\t\t\tthis._setSegment(res._segment1);\n\t\t}\n\t\treturn res;\n\t},\n\n\tsplit: function() {\n\t\tvar curve = this.getCurve(),\n\t\t\tpath = curve._path,\n\t\t\tres = curve && curve.splitAtTime(this.getTime());\n\t\tif (res) {\n\t\t\tthis._setSegment(path.getLastSegment());\n\t\t}\n\t\treturn  res;\n\t},\n\n\tequals: function(loc, _ignoreOther) {\n\t\tvar res = this === loc;\n\t\tif (!res && loc instanceof CurveLocation) {\n\t\t\tvar c1 = this.getCurve(),\n\t\t\t\tc2 = loc.getCurve(),\n\t\t\t\tp1 = c1._path,\n\t\t\t\tp2 = c2._path;\n\t\t\tif (p1 === p2) {\n\t\t\t\tvar abs = Math.abs,\n\t\t\t\t\tepsilon = 1e-7,\n\t\t\t\t\tdiff = abs(this.getOffset() - loc.getOffset()),\n\t\t\t\t\ti1 = !_ignoreOther && this._intersection,\n\t\t\t\t\ti2 = !_ignoreOther && loc._intersection;\n\t\t\t\tres = (diff < epsilon\n\t\t\t\t\t\t|| p1 && abs(p1.getLength() - diff) < epsilon)\n\t\t\t\t\t&& (!i1 && !i2 || i1 && i2 && i1.equals(i2, true));\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t},\n\n\ttoString: function() {\n\t\tvar parts = [],\n\t\t\tpoint = this.getPoint(),\n\t\t\tf = Formatter.instance;\n\t\tif (point)\n\t\t\tparts.push('point: ' + point);\n\t\tvar index = this.getIndex();\n\t\tif (index != null)\n\t\t\tparts.push('index: ' + index);\n\t\tvar time = this.getTime();\n\t\tif (time != null)\n\t\t\tparts.push('time: ' + f.number(time));\n\t\tif (this._distance != null)\n\t\t\tparts.push('distance: ' + f.number(this._distance));\n\t\treturn '{ ' + parts.join(', ') + ' }';\n\t},\n\n\tisTouching: function() {\n\t\tvar inter = this._intersection;\n\t\tif (inter && this.getTangent().isCollinear(inter.getTangent())) {\n\t\t\tvar curve1 = this.getCurve(),\n\t\t\t\tcurve2 = inter.getCurve();\n\t\t\treturn !(curve1.isStraight() && curve2.isStraight()\n\t\t\t\t\t&& curve1.getLine().intersect(curve2.getLine()));\n\t\t}\n\t\treturn false;\n\t},\n\n\tisCrossing: function() {\n\t\tvar inter = this._intersection;\n\t\tif (!inter)\n\t\t\treturn false;\n\t\tvar t1 = this.getTime(),\n\t\t\tt2 = inter.getTime(),\n\t\t\ttMin = 1e-8,\n\t\t\ttMax = 1 - tMin,\n\t\t\tt1Inside = t1 >= tMin && t1 <= tMax,\n\t\t\tt2Inside = t2 >= tMin && t2 <= tMax;\n\t\tif (t1Inside && t2Inside)\n\t\t\treturn !this.isTouching();\n\t\tvar c2 = this.getCurve(),\n\t\t\tc1 = t1 < tMin ? c2.getPrevious() : c2,\n\t\t\tc4 = inter.getCurve(),\n\t\t\tc3 = t2 < tMin ? c4.getPrevious() : c4;\n\t\tif (t1 > tMax)\n\t\t\tc2 = c2.getNext();\n\t\tif (t2 > tMax)\n\t\t\tc4 = c4.getNext();\n\t\tif (!c1 || !c2 || !c3 || !c4)\n\t\t\treturn false;\n\n\t\tvar offsets = [];\n\n\t\tfunction addOffsets(curve, end) {\n\t\t\tvar v = curve.getValues(),\n\t\t\t\troots = Curve.classify(v).roots || Curve.getPeaks(v),\n\t\t\t\tcount = roots.length,\n\t\t\t\tt = end && count > 1 ? roots[count - 1]\n\t\t\t\t\t\t: count > 0 ? roots[0]\n\t\t\t\t\t\t: 0.5;\n\t\t\toffsets.push(Curve.getLength(v, end ? t : 0, end ? 1 : t) / 2);\n\t\t}\n\n\t\tfunction isInRange(angle, min, max) {\n\t\t\treturn min < max\n\t\t\t\t\t? angle > min && angle < max\n\t\t\t\t\t: angle > min || angle < max;\n\t\t}\n\n\t\tif (!t1Inside) {\n\t\t\taddOffsets(c1, true);\n\t\t\taddOffsets(c2, false);\n\t\t}\n\t\tif (!t2Inside) {\n\t\t\taddOffsets(c3, true);\n\t\t\taddOffsets(c4, false);\n\t\t}\n\t\tvar pt = this.getPoint(),\n\t\t\toffset = Math.min.apply(Math, offsets),\n\t\t\tv2 = t1Inside ? c2.getTangentAtTime(t1)\n\t\t\t\t\t: c2.getPointAt(offset).subtract(pt),\n\t\t\tv1 = t1Inside ? v2.negate()\n\t\t\t\t\t: c1.getPointAt(-offset).subtract(pt),\n\t\t\tv4 = t2Inside ? c4.getTangentAtTime(t2)\n\t\t\t\t\t: c4.getPointAt(offset).subtract(pt),\n\t\t\tv3 = t2Inside ? v4.negate()\n\t\t\t\t\t: c3.getPointAt(-offset).subtract(pt),\n\t\t\ta1 = v1.getAngle(),\n\t\t\ta2 = v2.getAngle(),\n\t\t\ta3 = v3.getAngle(),\n\t\t\ta4 = v4.getAngle();\n\t\treturn !!(t1Inside\n\t\t\t\t? (isInRange(a1, a3, a4) ^ isInRange(a2, a3, a4)) &&\n\t\t\t\t  (isInRange(a1, a4, a3) ^ isInRange(a2, a4, a3))\n\t\t\t\t: (isInRange(a3, a1, a2) ^ isInRange(a4, a1, a2)) &&\n\t\t\t\t  (isInRange(a3, a2, a1) ^ isInRange(a4, a2, a1)));\n\t},\n\n\thasOverlap: function() {\n\t\treturn !!this._overlap;\n\t}\n}, Base.each(Curve._evaluateMethods, function(name) {\n\tvar get = name + 'At';\n\tthis[name] = function() {\n\t\tvar curve = this.getCurve(),\n\t\t\ttime = this.getTime();\n\t\treturn time != null && curve && curve[get](time, true);\n\t};\n}, {\n\tpreserve: true\n}),\nnew function() {\n\n\tfunction insert(locations, loc, merge) {\n\t\tvar length = locations.length,\n\t\t\tl = 0,\n\t\t\tr = length - 1;\n\n\t\tfunction search(index, dir) {\n\t\t\tfor (var i = index + dir; i >= -1 && i <= length; i += dir) {\n\t\t\t\tvar loc2 = locations[((i % length) + length) % length];\n\t\t\t\tif (!loc.getPoint().isClose(loc2.getPoint(),\n\t\t\t\t\t\t1e-7))\n\t\t\t\t\tbreak;\n\t\t\t\tif (loc.equals(loc2))\n\t\t\t\t\treturn loc2;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\twhile (l <= r) {\n\t\t\tvar m = (l + r) >>> 1,\n\t\t\t\tloc2 = locations[m],\n\t\t\t\tfound;\n\t\t\tif (merge && (found = loc.equals(loc2) ? loc2\n\t\t\t\t\t: (search(m, -1) || search(m, 1)))) {\n\t\t\t\tif (loc._overlap) {\n\t\t\t\t\tfound._overlap = found._intersection._overlap = true;\n\t\t\t\t}\n\t\t\t\treturn found;\n\t\t\t}\n\t\tvar path1 = loc.getPath(),\n\t\t\tpath2 = loc2.getPath(),\n\t\t\tdiff = path1 !== path2\n\t\t\t\t? path1._id - path2._id\n\t\t\t\t: (loc.getIndex() + loc.getTime())\n\t\t\t\t- (loc2.getIndex() + loc2.getTime());\n\t\t\tif (diff < 0) {\n\t\t\t\tr = m - 1;\n\t\t\t} else {\n\t\t\t\tl = m + 1;\n\t\t\t}\n\t\t}\n\t\tlocations.splice(l, 0, loc);\n\t\treturn loc;\n\t}\n\n\treturn { statics: {\n\t\tinsert: insert,\n\n\t\texpand: function(locations) {\n\t\t\tvar expanded = locations.slice();\n\t\t\tfor (var i = locations.length - 1; i >= 0; i--) {\n\t\t\t\tinsert(expanded, locations[i]._intersection, false);\n\t\t\t}\n\t\t\treturn expanded;\n\t\t}\n\t}};\n});\n\nvar PathItem = Item.extend({\n\t_class: 'PathItem',\n\t_selectBounds: false,\n\t_canScaleStroke: true,\n\tbeans: true,\n\n\tinitialize: function PathItem() {\n\t},\n\n\tstatics: {\n\t\tcreate: function(arg) {\n\t\t\tvar data,\n\t\t\t\tsegments,\n\t\t\t\tcompound;\n\t\t\tif (Base.isPlainObject(arg)) {\n\t\t\t\tsegments = arg.segments;\n\t\t\t\tdata = arg.pathData;\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tsegments = arg;\n\t\t\t} else if (typeof arg === 'string') {\n\t\t\t\tdata = arg;\n\t\t\t}\n\t\t\tif (segments) {\n\t\t\t\tvar first = segments[0];\n\t\t\t\tcompound = first && Array.isArray(first[0]);\n\t\t\t} else if (data) {\n\t\t\t\tcompound = (data.match(/m/gi) || []).length > 1\n\t\t\t\t\t\t|| /z\\s*\\S+/i.test(data);\n\t\t\t}\n\t\t\tvar ctor = compound ? CompoundPath : Path;\n\t\t\treturn new ctor(arg);\n\t\t}\n\t},\n\n\t_asPathItem: function() {\n\t\treturn this;\n\t},\n\n\tisClockwise: function() {\n\t\treturn this.getArea() >= 0;\n\t},\n\n\tsetClockwise: function(clockwise) {\n\t\tif (this.isClockwise() != (clockwise = !!clockwise))\n\t\t\tthis.reverse();\n\t},\n\n\tsetPathData: function(data) {\n\n\t\tvar parts = data && data.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/ig),\n\t\t\tcoords,\n\t\t\trelative = false,\n\t\t\tprevious,\n\t\t\tcontrol,\n\t\t\tcurrent = new Point(),\n\t\t\tstart = new Point();\n\n\t\tfunction getCoord(index, coord) {\n\t\t\tvar val = +coords[index];\n\t\t\tif (relative)\n\t\t\t\tval += current[coord];\n\t\t\treturn val;\n\t\t}\n\n\t\tfunction getPoint(index) {\n\t\t\treturn new Point(\n\t\t\t\tgetCoord(index, 'x'),\n\t\t\t\tgetCoord(index + 1, 'y')\n\t\t\t);\n\t\t}\n\n\t\tthis.clear();\n\n\t\tfor (var i = 0, l = parts && parts.length; i < l; i++) {\n\t\t\tvar part = parts[i],\n\t\t\t\tcommand = part[0],\n\t\t\t\tlower = command.toLowerCase();\n\t\t\tcoords = part.match(/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g);\n\t\t\tvar length = coords && coords.length;\n\t\t\trelative = command === lower;\n\t\t\tif (previous === 'z' && !/[mz]/.test(lower))\n\t\t\t\tthis.moveTo(current);\n\t\t\tswitch (lower) {\n\t\t\tcase 'm':\n\t\t\tcase 'l':\n\t\t\t\tvar move = lower === 'm';\n\t\t\t\tfor (var j = 0; j < length; j += 2) {\n\t\t\t\t\tthis[move ? 'moveTo' : 'lineTo'](current = getPoint(j));\n\t\t\t\t\tif (move) {\n\t\t\t\t\t\tstart = current;\n\t\t\t\t\t\tmove = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontrol = current;\n\t\t\t\tbreak;\n\t\t\tcase 'h':\n\t\t\tcase 'v':\n\t\t\t\tvar coord = lower === 'h' ? 'x' : 'y';\n\t\t\t\tcurrent = current.clone();\n\t\t\t\tfor (var j = 0; j < length; j++) {\n\t\t\t\t\tcurrent[coord] = getCoord(j, coord);\n\t\t\t\t\tthis.lineTo(current);\n\t\t\t\t}\n\t\t\t\tcontrol = current;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\tfor (var j = 0; j < length; j += 6) {\n\t\t\t\t\tthis.cubicCurveTo(\n\t\t\t\t\t\t\tgetPoint(j),\n\t\t\t\t\t\t\tcontrol = getPoint(j + 2),\n\t\t\t\t\t\t\tcurrent = getPoint(j + 4));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\tfor (var j = 0; j < length; j += 4) {\n\t\t\t\t\tthis.cubicCurveTo(\n\t\t\t\t\t\t\t/[cs]/.test(previous)\n\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)\n\t\t\t\t\t\t\t\t\t: current,\n\t\t\t\t\t\t\tcontrol = getPoint(j),\n\t\t\t\t\t\t\tcurrent = getPoint(j + 2));\n\t\t\t\t\tprevious = lower;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'q':\n\t\t\t\tfor (var j = 0; j < length; j += 4) {\n\t\t\t\t\tthis.quadraticCurveTo(\n\t\t\t\t\t\t\tcontrol = getPoint(j),\n\t\t\t\t\t\t\tcurrent = getPoint(j + 2));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 't':\n\t\t\t\tfor (var j = 0; j < length; j += 2) {\n\t\t\t\t\tthis.quadraticCurveTo(\n\t\t\t\t\t\t\tcontrol = (/[qt]/.test(previous)\n\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)\n\t\t\t\t\t\t\t\t\t: current),\n\t\t\t\t\t\t\tcurrent = getPoint(j));\n\t\t\t\t\tprevious = lower;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'a':\n\t\t\t\tfor (var j = 0; j < length; j += 7) {\n\t\t\t\t\tthis.arcTo(current = getPoint(j + 5),\n\t\t\t\t\t\t\tnew Size(+coords[j], +coords[j + 1]),\n\t\t\t\t\t\t\t+coords[j + 2], +coords[j + 4], +coords[j + 3]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'z':\n\t\t\t\tthis.closePath(1e-12);\n\t\t\t\tcurrent = start;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tprevious = lower;\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn !(this.hasFill() && this.hasStroke());\n\t},\n\n\t_contains: function(point) {\n\t\tvar winding = point.isInside(\n\t\t\t\tthis.getBounds({ internal: true, handle: true }))\n\t\t\t\t\t? this._getWinding(point)\n\t\t\t\t\t: {};\n\t\treturn winding.onPath || !!(this.getFillRule() === 'evenodd'\n\t\t\t\t? winding.windingL & 1 || winding.windingR & 1\n\t\t\t\t: winding.winding);\n\t},\n\n\tgetIntersections: function(path, include, _matrix, _returnFirst) {\n\t\tvar self = this === path || !path,\n\t\t\tmatrix1 = this._matrix._orNullIfIdentity(),\n\t\t\tmatrix2 = self ? matrix1\n\t\t\t\t: (_matrix || path._matrix)._orNullIfIdentity();\n\t\treturn self || this.getBounds(matrix1).intersects(\n\t\t\t\tpath.getBounds(matrix2), 1e-12)\n\t\t\t\t? Curve.getIntersections(\n\t\t\t\t\t\tthis.getCurves(), !self && path.getCurves(), include,\n\t\t\t\t\t\tmatrix1, matrix2, _returnFirst)\n\t\t\t\t: [];\n\t},\n\n\tgetCrossings: function(path) {\n\t\treturn this.getIntersections(path, function(inter) {\n\t\t\treturn inter.hasOverlap() || inter.isCrossing();\n\t\t});\n\t},\n\n\tgetNearestLocation: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tcurves = this.getCurves(),\n\t\t\tminDist = Infinity,\n\t\t\tminLoc = null;\n\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\tvar loc = curves[i].getNearestLocation(point);\n\t\t\tif (loc._distance < minDist) {\n\t\t\t\tminDist = loc._distance;\n\t\t\t\tminLoc = loc;\n\t\t\t}\n\t\t}\n\t\treturn minLoc;\n\t},\n\n\tgetNearestPoint: function() {\n\t\tvar loc = this.getNearestLocation.apply(this, arguments);\n\t\treturn loc ? loc.getPoint() : loc;\n\t},\n\n\tinterpolate: function(from, to, factor) {\n\t\tvar isPath = !this._children,\n\t\t\tname = isPath ? '_segments' : '_children',\n\t\t\titemsFrom = from[name],\n\t\t\titemsTo = to[name],\n\t\t\titems = this[name];\n\t\tif (!itemsFrom || !itemsTo || itemsFrom.length !== itemsTo.length) {\n\t\t\tthrow new Error('Invalid operands in interpolate() call: ' +\n\t\t\t\t\tfrom + ', ' + to);\n\t\t}\n\t\tvar current = items.length,\n\t\t\tlength = itemsTo.length;\n\t\tif (current < length) {\n\t\t\tvar ctor = isPath ? Segment : Path;\n\t\t\tfor (var i = current; i < length; i++) {\n\t\t\t\tthis.add(new ctor());\n\t\t\t}\n\t\t} else if (current > length) {\n\t\t\tthis[isPath ? 'removeSegments' : 'removeChildren'](length, current);\n\t\t}\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\titems[i].interpolate(itemsFrom[i], itemsTo[i], factor);\n\t\t}\n\t\tif (isPath) {\n\t\t\tthis.setClosed(from._closed);\n\t\t\tthis._changed(9);\n\t\t}\n\t},\n\n\tcompare: function(path) {\n\t\tvar ok = false;\n\t\tif (path) {\n\t\t\tvar paths1 = this._children || [this],\n\t\t\t\tpaths2 = path._children ? path._children.slice() : [path],\n\t\t\t\tlength1 = paths1.length,\n\t\t\t\tlength2 = paths2.length,\n\t\t\t\tmatched = [],\n\t\t\t\tcount = 0;\n\t\t\tok = true;\n\t\t\tfor (var i1 = length1 - 1; i1 >= 0 && ok; i1--) {\n\t\t\t\tvar path1 = paths1[i1];\n\t\t\t\tok = false;\n\t\t\t\tfor (var i2 = length2 - 1; i2 >= 0 && !ok; i2--) {\n\t\t\t\t\tif (path1.compare(paths2[i2])) {\n\t\t\t\t\t\tif (!matched[i2]) {\n\t\t\t\t\t\t\tmatched[i2] = true;\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tok = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tok = ok && count === length2;\n\t\t}\n\t\treturn ok;\n\t},\n\n});\n\nvar Path = PathItem.extend({\n\t_class: 'Path',\n\t_serializeFields: {\n\t\tsegments: [],\n\t\tclosed: false\n\t},\n\n\tinitialize: function Path(arg) {\n\t\tthis._closed = false;\n\t\tthis._segments = [];\n\t\tthis._version = 0;\n\t\tvar segments = Array.isArray(arg)\n\t\t\t? typeof arg[0] === 'object'\n\t\t\t\t? arg\n\t\t\t\t: arguments\n\t\t\t: arg && (arg.size === undefined && (arg.x !== undefined\n\t\t\t\t\t|| arg.point !== undefined))\n\t\t\t\t? arguments\n\t\t\t\t: null;\n\t\tif (segments && segments.length > 0) {\n\t\t\tthis.setSegments(segments);\n\t\t} else {\n\t\t\tthis._curves = undefined;\n\t\t\tthis._segmentSelection = 0;\n\t\t\tif (!segments && typeof arg === 'string') {\n\t\t\t\tthis.setPathData(arg);\n\t\t\t\targ = null;\n\t\t\t}\n\t\t}\n\t\tthis._initialize(!segments && arg);\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._closed === item._closed\n\t\t\t\t&& Base.equals(this._segments, item._segments);\n\t},\n\n\tcopyContent: function(source) {\n\t\tthis.setSegments(source._segments);\n\t\tthis._closed = source._closed;\n\t},\n\n\t_changed: function _changed(flags) {\n\t\t_changed.base.call(this, flags);\n\t\tif (flags & 8) {\n\t\t\tthis._length = this._area = undefined;\n\t\t\tif (flags & 16) {\n\t\t\t\tthis._version++;\n\t\t\t} else if (this._curves) {\n\t\t\t   for (var i = 0, l = this._curves.length; i < l; i++)\n\t\t\t\t\tthis._curves[i]._changed();\n\t\t\t}\n\t\t} else if (flags & 32) {\n\t\t\tthis._bounds = undefined;\n\t\t}\n\t},\n\n\tgetStyle: function() {\n\t\tvar parent = this._parent;\n\t\treturn (parent instanceof CompoundPath ? parent : this)._style;\n\t},\n\n\tgetSegments: function() {\n\t\treturn this._segments;\n\t},\n\n\tsetSegments: function(segments) {\n\t\tvar fullySelected = this.isFullySelected(),\n\t\t\tlength = segments && segments.length;\n\t\tthis._segments.length = 0;\n\t\tthis._segmentSelection = 0;\n\t\tthis._curves = undefined;\n\t\tif (length) {\n\t\t\tvar last = segments[length - 1];\n\t\t\tif (typeof last === 'boolean') {\n\t\t\t\tthis.setClosed(last);\n\t\t\t\tlength--;\n\t\t\t}\n\t\t\tthis._add(Segment.readList(segments, 0, {}, length));\n\t\t}\n\t\tif (fullySelected)\n\t\t\tthis.setFullySelected(true);\n\t},\n\n\tgetFirstSegment: function() {\n\t\treturn this._segments[0];\n\t},\n\n\tgetLastSegment: function() {\n\t\treturn this._segments[this._segments.length - 1];\n\t},\n\n\tgetCurves: function() {\n\t\tvar curves = this._curves,\n\t\t\tsegments = this._segments;\n\t\tif (!curves) {\n\t\t\tvar length = this._countCurves();\n\t\t\tcurves = this._curves = new Array(length);\n\t\t\tfor (var i = 0; i < length; i++)\n\t\t\t\tcurves[i] = new Curve(this, segments[i],\n\t\t\t\t\tsegments[i + 1] || segments[0]);\n\t\t}\n\t\treturn curves;\n\t},\n\n\tgetFirstCurve: function() {\n\t\treturn this.getCurves()[0];\n\t},\n\n\tgetLastCurve: function() {\n\t\tvar curves = this.getCurves();\n\t\treturn curves[curves.length - 1];\n\t},\n\n\tisClosed: function() {\n\t\treturn this._closed;\n\t},\n\n\tsetClosed: function(closed) {\n\t\tif (this._closed != (closed = !!closed)) {\n\t\t\tthis._closed = closed;\n\t\t\tif (this._curves) {\n\t\t\t\tvar length = this._curves.length = this._countCurves();\n\t\t\t\tif (closed)\n\t\t\t\t\tthis._curves[length - 1] = new Curve(this,\n\t\t\t\t\t\tthis._segments[length - 1], this._segments[0]);\n\t\t\t}\n\t\t\tthis._changed(25);\n\t\t}\n\t}\n}, {\n\tbeans: true,\n\n\tgetPathData: function(_matrix, _precision) {\n\t\tvar segments = this._segments,\n\t\t\tlength = segments.length,\n\t\t\tf = new Formatter(_precision),\n\t\t\tcoords = new Array(6),\n\t\t\tfirst = true,\n\t\t\tcurX, curY,\n\t\t\tprevX, prevY,\n\t\t\tinX, inY,\n\t\t\toutX, outY,\n\t\t\tparts = [];\n\n\t\tfunction addSegment(segment, skipLine) {\n\t\t\tsegment._transformCoordinates(_matrix, coords);\n\t\t\tcurX = coords[0];\n\t\t\tcurY = coords[1];\n\t\t\tif (first) {\n\t\t\t\tparts.push('M' + f.pair(curX, curY));\n\t\t\t\tfirst = false;\n\t\t\t} else {\n\t\t\t\tinX = coords[2];\n\t\t\t\tinY = coords[3];\n\t\t\t\tif (inX === curX && inY === curY\n\t\t\t\t\t\t&& outX === prevX && outY === prevY) {\n\t\t\t\t\tif (!skipLine) {\n\t\t\t\t\t\tvar dx = curX - prevX,\n\t\t\t\t\t\t\tdy = curY - prevY;\n\t\t\t\t\t\tparts.push(\n\t\t\t\t\t\t\t  dx === 0 ? 'v' + f.number(dy)\n\t\t\t\t\t\t\t: dy === 0 ? 'h' + f.number(dx)\n\t\t\t\t\t\t\t: 'l' + f.pair(dx, dy));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tparts.push('c' + f.pair(outX - prevX, outY - prevY)\n\t\t\t\t\t\t\t + ' ' + f.pair( inX - prevX,  inY - prevY)\n\t\t\t\t\t\t\t + ' ' + f.pair(curX - prevX, curY - prevY));\n\t\t\t\t}\n\t\t\t}\n\t\t\tprevX = curX;\n\t\t\tprevY = curY;\n\t\t\toutX = coords[4];\n\t\t\toutY = coords[5];\n\t\t}\n\n\t\tif (!length)\n\t\t\treturn '';\n\n\t\tfor (var i = 0; i < length; i++)\n\t\t\taddSegment(segments[i]);\n\t\tif (this._closed && length > 0) {\n\t\t\taddSegment(segments[0], true);\n\t\t\tparts.push('z');\n\t\t}\n\t\treturn parts.join('');\n\t},\n\n\tisEmpty: function() {\n\t\treturn !this._segments.length;\n\t},\n\n\t_transformContent: function(matrix) {\n\t\tvar segments = this._segments,\n\t\t\tcoords = new Array(6);\n\t\tfor (var i = 0, l = segments.length; i < l; i++)\n\t\t\tsegments[i]._transformCoordinates(matrix, coords, true);\n\t\treturn true;\n\t},\n\n\t_add: function(segs, index) {\n\t\tvar segments = this._segments,\n\t\t\tcurves = this._curves,\n\t\t\tamount = segs.length,\n\t\t\tappend = index == null,\n\t\t\tindex = append ? segments.length : index;\n\t\tfor (var i = 0; i < amount; i++) {\n\t\t\tvar segment = segs[i];\n\t\t\tif (segment._path)\n\t\t\t\tsegment = segs[i] = segment.clone();\n\t\t\tsegment._path = this;\n\t\t\tsegment._index = index + i;\n\t\t\tif (segment._selection)\n\t\t\t\tthis._updateSelection(segment, 0, segment._selection);\n\t\t}\n\t\tif (append) {\n\t\t\tsegments.push.apply(segments, segs);\n\t\t} else {\n\t\t\tsegments.splice.apply(segments, [index, 0].concat(segs));\n\t\t\tfor (var i = index + amount, l = segments.length; i < l; i++)\n\t\t\t\tsegments[i]._index = i;\n\t\t}\n\t\tif (curves) {\n\t\t\tvar total = this._countCurves(),\n\t\t\t\tstart = index > 0 && index + amount - 1 === total ? index - 1\n\t\t\t\t\t: index,\n\t\t\t\tinsert = start,\n\t\t\t\tend = Math.min(start + amount, total);\n\t\t\tif (segs._curves) {\n\t\t\t\tcurves.splice.apply(curves, [start, 0].concat(segs._curves));\n\t\t\t\tinsert += segs._curves.length;\n\t\t\t}\n\t\t\tfor (var i = insert; i < end; i++)\n\t\t\t\tcurves.splice(i, 0, new Curve(this, null, null));\n\t\t\tthis._adjustCurves(start, end);\n\t\t}\n\t\tthis._changed(25);\n\t\treturn segs;\n\t},\n\n\t_adjustCurves: function(start, end) {\n\t\tvar segments = this._segments,\n\t\t\tcurves = this._curves,\n\t\t\tcurve;\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tcurve = curves[i];\n\t\t\tcurve._path = this;\n\t\t\tcurve._segment1 = segments[i];\n\t\t\tcurve._segment2 = segments[i + 1] || segments[0];\n\t\t\tcurve._changed();\n\t\t}\n\t\tif (curve = curves[this._closed && !start ? segments.length - 1\n\t\t\t\t: start - 1]) {\n\t\t\tcurve._segment2 = segments[start] || segments[0];\n\t\t\tcurve._changed();\n\t\t}\n\t\tif (curve = curves[end]) {\n\t\t\tcurve._segment1 = segments[end];\n\t\t\tcurve._changed();\n\t\t}\n\t},\n\n\t_countCurves: function() {\n\t\tvar length = this._segments.length;\n\t\treturn !this._closed && length > 0 ? length - 1 : length;\n\t},\n\n\tadd: function(segment1 ) {\n\t\treturn arguments.length > 1 && typeof segment1 !== 'number'\n\t\t\t? this._add(Segment.readList(arguments))\n\t\t\t: this._add([ Segment.read(arguments) ])[0];\n\t},\n\n\tinsert: function(index, segment1 ) {\n\t\treturn arguments.length > 2 && typeof segment1 !== 'number'\n\t\t\t? this._add(Segment.readList(arguments, 1), index)\n\t\t\t: this._add([ Segment.read(arguments, 1) ], index)[0];\n\t},\n\n\taddSegment: function() {\n\t\treturn this._add([ Segment.read(arguments) ])[0];\n\t},\n\n\tinsertSegment: function(index ) {\n\t\treturn this._add([ Segment.read(arguments, 1) ], index)[0];\n\t},\n\n\taddSegments: function(segments) {\n\t\treturn this._add(Segment.readList(segments));\n\t},\n\n\tinsertSegments: function(index, segments) {\n\t\treturn this._add(Segment.readList(segments), index);\n\t},\n\n\tremoveSegment: function(index) {\n\t\treturn this.removeSegments(index, index + 1)[0] || null;\n\t},\n\n\tremoveSegments: function(start, end, _includeCurves) {\n\t\tstart = start || 0;\n\t\tend = Base.pick(end, this._segments.length);\n\t\tvar segments = this._segments,\n\t\t\tcurves = this._curves,\n\t\t\tcount = segments.length,\n\t\t\tremoved = segments.splice(start, end - start),\n\t\t\tamount = removed.length;\n\t\tif (!amount)\n\t\t\treturn removed;\n\t\tfor (var i = 0; i < amount; i++) {\n\t\t\tvar segment = removed[i];\n\t\t\tif (segment._selection)\n\t\t\t\tthis._updateSelection(segment, segment._selection, 0);\n\t\t\tsegment._index = segment._path = null;\n\t\t}\n\t\tfor (var i = start, l = segments.length; i < l; i++)\n\t\t\tsegments[i]._index = i;\n\t\tif (curves) {\n\t\t\tvar index = start > 0 && end === count + (this._closed ? 1 : 0)\n\t\t\t\t\t? start - 1\n\t\t\t\t\t: start,\n\t\t\t\tcurves = curves.splice(index, amount);\n\t\t\tfor (var i = curves.length - 1; i >= 0; i--)\n\t\t\t\tcurves[i]._path = null;\n\t\t\tif (_includeCurves)\n\t\t\t\tremoved._curves = curves.slice(1);\n\t\t\tthis._adjustCurves(index, index);\n\t\t}\n\t\tthis._changed(25);\n\t\treturn removed;\n\t},\n\n\tclear: '#removeSegments',\n\n\thasHandles: function() {\n\t\tvar segments = this._segments;\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tif (segments[i].hasHandles())\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tclearHandles: function() {\n\t\tvar segments = this._segments;\n\t\tfor (var i = 0, l = segments.length; i < l; i++)\n\t\t\tsegments[i].clearHandles();\n\t},\n\n\tgetLength: function() {\n\t\tif (this._length == null) {\n\t\t\tvar curves = this.getCurves(),\n\t\t\t\tlength = 0;\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++)\n\t\t\t\tlength += curves[i].getLength();\n\t\t\tthis._length = length;\n\t\t}\n\t\treturn this._length;\n\t},\n\n\tgetArea: function() {\n\t\tvar area = this._area;\n\t\tif (area == null) {\n\t\t\tvar segments = this._segments,\n\t\t\t\tclosed = this._closed;\n\t\t\tarea = 0;\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\tvar last = i + 1 === l;\n\t\t\t\tarea += Curve.getArea(Curve.getValues(\n\t\t\t\t\t\tsegments[i], segments[last ? 0 : i + 1],\n\t\t\t\t\t\tnull, last && !closed));\n\t\t\t}\n\t\t\tthis._area = area;\n\t\t}\n\t\treturn area;\n\t},\n\n\tisFullySelected: function() {\n\t\tvar length = this._segments.length;\n\t\treturn this.isSelected() && length > 0 && this._segmentSelection\n\t\t\t\t=== length * 7;\n\t},\n\n\tsetFullySelected: function(selected) {\n\t\tif (selected)\n\t\t\tthis._selectSegments(true);\n\t\tthis.setSelected(selected);\n\t},\n\n\tsetSelection: function setSelection(selection) {\n\t\tif (!(selection & 1))\n\t\t\tthis._selectSegments(false);\n\t\tsetSelection.base.call(this, selection);\n\t},\n\n\t_selectSegments: function(selected) {\n\t\tvar segments = this._segments,\n\t\t\tlength = segments.length,\n\t\t\tselection = selected ? 7 : 0;\n\t\tthis._segmentSelection = selection * length;\n\t\tfor (var i = 0; i < length; i++)\n\t\t\tsegments[i]._selection = selection;\n\t},\n\n\t_updateSelection: function(segment, oldSelection, newSelection) {\n\t\tsegment._selection = newSelection;\n\t\tvar selection = this._segmentSelection += newSelection - oldSelection;\n\t\tif (selection > 0)\n\t\t\tthis.setSelected(true);\n\t},\n\n\tdivideAt: function(location) {\n\t\tvar loc = this.getLocationAt(location),\n\t\t\tcurve;\n\t\treturn loc && (curve = loc.getCurve().divideAt(loc.getCurveOffset()))\n\t\t\t\t? curve._segment1\n\t\t\t\t: null;\n\t},\n\n\tsplitAt: function(location) {\n\t\tvar loc = this.getLocationAt(location),\n\t\t\tindex = loc && loc.index,\n\t\t\ttime = loc && loc.time,\n\t\t\ttMin = 1e-8,\n\t\t\ttMax = 1 - tMin;\n\t\tif (time > tMax) {\n\t\t\tindex++;\n\t\t\ttime = 0;\n\t\t}\n\t\tvar curves = this.getCurves();\n\t\tif (index >= 0 && index < curves.length) {\n\t\t\tif (time >= tMin) {\n\t\t\t\tcurves[index++].divideAtTime(time);\n\t\t\t}\n\t\t\tvar segs = this.removeSegments(index, this._segments.length, true),\n\t\t\t\tpath;\n\t\t\tif (this._closed) {\n\t\t\t\tthis.setClosed(false);\n\t\t\t\tpath = this;\n\t\t\t} else {\n\t\t\t\tpath = new Path(Item.NO_INSERT);\n\t\t\t\tpath.insertAbove(this);\n\t\t\t\tpath.copyAttributes(this);\n\t\t\t}\n\t\t\tpath._add(segs, 0);\n\t\t\tthis.addSegment(segs[0]);\n\t\t\treturn path;\n\t\t}\n\t\treturn null;\n\t},\n\n\tsplit: function(index, time) {\n\t\tvar curve,\n\t\t\tlocation = time === undefined ? index\n\t\t\t\t: (curve = this.getCurves()[index])\n\t\t\t\t\t&& curve.getLocationAtTime(time);\n\t\treturn location != null ? this.splitAt(location) : null;\n\t},\n\n\tjoin: function(path, tolerance) {\n\t\tvar epsilon = tolerance || 0;\n\t\tif (path && path !== this) {\n\t\t\tvar segments = path._segments,\n\t\t\t\tlast1 = this.getLastSegment(),\n\t\t\t\tlast2 = path.getLastSegment();\n\t\t\tif (!last2)\n\t\t\t\treturn this;\n\t\t\tif (last1 && last1._point.isClose(last2._point, epsilon))\n\t\t\t\tpath.reverse();\n\t\t\tvar first2 = path.getFirstSegment();\n\t\t\tif (last1 && last1._point.isClose(first2._point, epsilon)) {\n\t\t\t\tlast1.setHandleOut(first2._handleOut);\n\t\t\t\tthis._add(segments.slice(1));\n\t\t\t} else {\n\t\t\t\tvar first1 = this.getFirstSegment();\n\t\t\t\tif (first1 && first1._point.isClose(first2._point, epsilon))\n\t\t\t\t\tpath.reverse();\n\t\t\t\tlast2 = path.getLastSegment();\n\t\t\t\tif (first1 && first1._point.isClose(last2._point, epsilon)) {\n\t\t\t\t\tfirst1.setHandleIn(last2._handleIn);\n\t\t\t\t\tthis._add(segments.slice(0, segments.length - 1), 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis._add(segments.slice());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (path._closed)\n\t\t\t\tthis._add([segments[0]]);\n\t\t\tpath.remove();\n\t\t}\n\t\tvar first = this.getFirstSegment(),\n\t\t\tlast = this.getLastSegment();\n\t\tif (first !== last && first._point.isClose(last._point, epsilon)) {\n\t\t\tfirst.setHandleIn(last._handleIn);\n\t\t\tlast.remove();\n\t\t\tthis.setClosed(true);\n\t\t}\n\t\treturn this;\n\t},\n\n\treduce: function(options) {\n\t\tvar curves = this.getCurves(),\n\t\t\tsimplify = options && options.simplify,\n\t\t\ttolerance = simplify ? 1e-7 : 0;\n\t\tfor (var i = curves.length - 1; i >= 0; i--) {\n\t\t\tvar curve = curves[i];\n\t\t\tif (!curve.hasHandles() && (!curve.hasLength(tolerance)\n\t\t\t\t\t|| simplify && curve.isCollinear(curve.getNext())))\n\t\t\t\tcurve.remove();\n\t\t}\n\t\treturn this;\n\t},\n\n\treverse: function() {\n\t\tthis._segments.reverse();\n\t\tfor (var i = 0, l = this._segments.length; i < l; i++) {\n\t\t\tvar segment = this._segments[i];\n\t\t\tvar handleIn = segment._handleIn;\n\t\t\tsegment._handleIn = segment._handleOut;\n\t\t\tsegment._handleOut = handleIn;\n\t\t\tsegment._index = i;\n\t\t}\n\t\tthis._curves = null;\n\t\tthis._changed(9);\n\t},\n\n\tflatten: function(flatness) {\n\t\tvar flattener = new PathFlattener(this, flatness || 0.25, 256, true),\n\t\t\tparts = flattener.parts,\n\t\t\tlength = parts.length,\n\t\t\tsegments = [];\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tsegments.push(new Segment(parts[i].curve.slice(0, 2)));\n\t\t}\n\t\tif (!this._closed && length > 0) {\n\t\t\tsegments.push(new Segment(parts[length - 1].curve.slice(6)));\n\t\t}\n\t\tthis.setSegments(segments);\n\t},\n\n\tsimplify: function(tolerance) {\n\t\tvar segments = new PathFitter(this).fit(tolerance || 2.5);\n\t\tif (segments)\n\t\t\tthis.setSegments(segments);\n\t\treturn !!segments;\n\t},\n\n\tsmooth: function(options) {\n\t\tvar that = this,\n\t\t\topts = options || {},\n\t\t\ttype = opts.type || 'asymmetric',\n\t\t\tsegments = this._segments,\n\t\t\tlength = segments.length,\n\t\t\tclosed = this._closed;\n\n\t\tfunction getIndex(value, _default) {\n\t\t\tvar index = value && value.index;\n\t\t\tif (index != null) {\n\t\t\t\tvar path = value.path;\n\t\t\t\tif (path && path !== that)\n\t\t\t\t\tthrow new Error(value._class + ' ' + index + ' of ' + path\n\t\t\t\t\t\t\t+ ' is not part of ' + that);\n\t\t\t\tif (_default && value instanceof Curve)\n\t\t\t\t\tindex++;\n\t\t\t} else {\n\t\t\t\tindex = typeof value === 'number' ? value : _default;\n\t\t\t}\n\t\t\treturn Math.min(index < 0 && closed\n\t\t\t\t\t? index % length\n\t\t\t\t\t: index < 0 ? index + length : index, length - 1);\n\t\t}\n\n\t\tvar loop = closed && opts.from === undefined && opts.to === undefined,\n\t\t\tfrom = getIndex(opts.from, 0),\n\t\t\tto = getIndex(opts.to, length - 1);\n\n\t\tif (from > to) {\n\t\t\tif (closed) {\n\t\t\t\tfrom -= length;\n\t\t\t} else {\n\t\t\t\tvar tmp = from;\n\t\t\t\tfrom = to;\n\t\t\t\tto = tmp;\n\t\t\t}\n\t\t}\n\t\tif (/^(?:asymmetric|continuous)$/.test(type)) {\n\t\t\tvar asymmetric = type === 'asymmetric',\n\t\t\t\tmin = Math.min,\n\t\t\t\tamount = to - from + 1,\n\t\t\t\tn = amount - 1,\n\t\t\t\tpadding = loop ? min(amount, 4) : 1,\n\t\t\t\tpaddingLeft = padding,\n\t\t\t\tpaddingRight = padding,\n\t\t\t\tknots = [];\n\t\t\tif (!closed) {\n\t\t\t\tpaddingLeft = min(1, from);\n\t\t\t\tpaddingRight = min(1, length - to - 1);\n\t\t\t}\n\t\t\tn += paddingLeft + paddingRight;\n\t\t\tif (n <= 1)\n\t\t\t\treturn;\n\t\t\tfor (var i = 0, j = from - paddingLeft; i <= n; i++, j++) {\n\t\t\t\tknots[i] = segments[(j < 0 ? j + length : j) % length]._point;\n\t\t\t}\n\n\t\t\tvar x = knots[0]._x + 2 * knots[1]._x,\n\t\t\t\ty = knots[0]._y + 2 * knots[1]._y,\n\t\t\t\tf = 2,\n\t\t\t\tn_1 = n - 1,\n\t\t\t\trx = [x],\n\t\t\t\try = [y],\n\t\t\t\trf = [f],\n\t\t\t\tpx = [],\n\t\t\t\tpy = [];\n\t\t\tfor (var i = 1; i < n; i++) {\n\t\t\t\tvar internal = i < n_1,\n\t\t\t\t\ta = internal ? 1 : asymmetric ? 1 : 2,\n\t\t\t\t\tb = internal ? 4 : asymmetric ? 2 : 7,\n\t\t\t\t\tu = internal ? 4 : asymmetric ? 3 : 8,\n\t\t\t\t\tv = internal ? 2 : asymmetric ? 0 : 1,\n\t\t\t\t\tm = a / f;\n\t\t\t\tf = rf[i] = b - m;\n\t\t\t\tx = rx[i] = u * knots[i]._x + v * knots[i + 1]._x - m * x;\n\t\t\t\ty = ry[i] = u * knots[i]._y + v * knots[i + 1]._y - m * y;\n\t\t\t}\n\n\t\t\tpx[n_1] = rx[n_1] / rf[n_1];\n\t\t\tpy[n_1] = ry[n_1] / rf[n_1];\n\t\t\tfor (var i = n - 2; i >= 0; i--) {\n\t\t\t\tpx[i] = (rx[i] - px[i + 1]) / rf[i];\n\t\t\t\tpy[i] = (ry[i] - py[i + 1]) / rf[i];\n\t\t\t}\n\t\t\tpx[n] = (3 * knots[n]._x - px[n_1]) / 2;\n\t\t\tpy[n] = (3 * knots[n]._y - py[n_1]) / 2;\n\n\t\t\tfor (var i = paddingLeft, max = n - paddingRight, j = from;\n\t\t\t\t\ti <= max; i++, j++) {\n\t\t\t\tvar segment = segments[j < 0 ? j + length : j],\n\t\t\t\t\tpt = segment._point,\n\t\t\t\t\thx = px[i] - pt._x,\n\t\t\t\t\thy = py[i] - pt._y;\n\t\t\t\tif (loop || i < max)\n\t\t\t\t\tsegment.setHandleOut(hx, hy);\n\t\t\t\tif (loop || i > paddingLeft)\n\t\t\t\t\tsegment.setHandleIn(-hx, -hy);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var i = from; i <= to; i++) {\n\t\t\t\tsegments[i < 0 ? i + length : i].smooth(opts,\n\t\t\t\t\t\t!loop && i === from, !loop && i === to);\n\t\t\t}\n\t\t}\n\t},\n\n\ttoShape: function(insert) {\n\t\tif (!this._closed)\n\t\t\treturn null;\n\n\t\tvar segments = this._segments,\n\t\t\ttype,\n\t\t\tsize,\n\t\t\tradius,\n\t\t\ttopCenter;\n\n\t\tfunction isCollinear(i, j) {\n\t\t\tvar seg1 = segments[i],\n\t\t\t\tseg2 = seg1.getNext(),\n\t\t\t\tseg3 = segments[j],\n\t\t\t\tseg4 = seg3.getNext();\n\t\t\treturn seg1._handleOut.isZero() && seg2._handleIn.isZero()\n\t\t\t\t\t&& seg3._handleOut.isZero() && seg4._handleIn.isZero()\n\t\t\t\t\t&& seg2._point.subtract(seg1._point).isCollinear(\n\t\t\t\t\t\tseg4._point.subtract(seg3._point));\n\t\t}\n\n\t\tfunction isOrthogonal(i) {\n\t\t\tvar seg2 = segments[i],\n\t\t\t\tseg1 = seg2.getPrevious(),\n\t\t\t\tseg3 = seg2.getNext();\n\t\t\treturn seg1._handleOut.isZero() && seg2._handleIn.isZero()\n\t\t\t\t\t&& seg2._handleOut.isZero() && seg3._handleIn.isZero()\n\t\t\t\t\t&& seg2._point.subtract(seg1._point).isOrthogonal(\n\t\t\t\t\t\tseg3._point.subtract(seg2._point));\n\t\t}\n\n\t\tfunction isArc(i) {\n\t\t\tvar seg1 = segments[i],\n\t\t\t\tseg2 = seg1.getNext(),\n\t\t\t\thandle1 = seg1._handleOut,\n\t\t\t\thandle2 = seg2._handleIn,\n\t\t\t\tkappa = 0.5522847498307936;\n\t\t\tif (handle1.isOrthogonal(handle2)) {\n\t\t\t\tvar pt1 = seg1._point,\n\t\t\t\t\tpt2 = seg2._point,\n\t\t\t\t\tcorner = new Line(pt1, handle1, true).intersect(\n\t\t\t\t\t\t\tnew Line(pt2, handle2, true), true);\n\t\t\t\treturn corner && Numerical.isZero(handle1.getLength() /\n\t\t\t\t\t\tcorner.subtract(pt1).getLength() - kappa)\n\t\t\t\t\t&& Numerical.isZero(handle2.getLength() /\n\t\t\t\t\t\tcorner.subtract(pt2).getLength() - kappa);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction getDistance(i, j) {\n\t\t\treturn segments[i]._point.getDistance(segments[j]._point);\n\t\t}\n\n\t\tif (!this.hasHandles() && segments.length === 4\n\t\t\t\t&& isCollinear(0, 2) && isCollinear(1, 3) && isOrthogonal(1)) {\n\t\t\ttype = Shape.Rectangle;\n\t\t\tsize = new Size(getDistance(0, 3), getDistance(0, 1));\n\t\t\ttopCenter = segments[1]._point.add(segments[2]._point).divide(2);\n\t\t} else if (segments.length === 8 && isArc(0) && isArc(2) && isArc(4)\n\t\t\t\t&& isArc(6) && isCollinear(1, 5) && isCollinear(3, 7)) {\n\t\t\ttype = Shape.Rectangle;\n\t\t\tsize = new Size(getDistance(1, 6), getDistance(0, 3));\n\t\t\tradius = size.subtract(new Size(getDistance(0, 7),\n\t\t\t\t\tgetDistance(1, 2))).divide(2);\n\t\t\ttopCenter = segments[3]._point.add(segments[4]._point).divide(2);\n\t\t} else if (segments.length === 4\n\t\t\t\t&& isArc(0) && isArc(1) && isArc(2) && isArc(3)) {\n\t\t\tif (Numerical.isZero(getDistance(0, 2) - getDistance(1, 3))) {\n\t\t\t\ttype = Shape.Circle;\n\t\t\t\tradius = getDistance(0, 2) / 2;\n\t\t\t} else {\n\t\t\t\ttype = Shape.Ellipse;\n\t\t\t\tradius = new Size(getDistance(2, 0) / 2, getDistance(3, 1) / 2);\n\t\t\t}\n\t\t\ttopCenter = segments[1]._point;\n\t\t}\n\n\t\tif (type) {\n\t\t\tvar center = this.getPosition(true),\n\t\t\t\tshape = new type({\n\t\t\t\t\tcenter: center,\n\t\t\t\t\tsize: size,\n\t\t\t\t\tradius: radius,\n\t\t\t\t\tinsert: false\n\t\t\t\t});\n\t\t\tshape.copyAttributes(this, true);\n\t\t\tshape._matrix.prepend(this._matrix);\n\t\t\tshape.rotate(topCenter.subtract(center).getAngle() + 90);\n\t\t\tif (insert === undefined || insert)\n\t\t\t\tshape.insertAbove(this);\n\t\t\treturn shape;\n\t\t}\n\t\treturn null;\n\t},\n\n\ttoPath: '#clone',\n\n\tcompare: function compare(path) {\n\t\tif (!path || path instanceof CompoundPath)\n\t\t\treturn compare.base.call(this, path);\n\t\tvar curves1 = this.getCurves(),\n\t\t\tcurves2 = path.getCurves(),\n\t\t\tlength1 = curves1.length,\n\t\t\tlength2 = curves2.length;\n\t\tif (!length1 || !length2) {\n\t\t\treturn length1 == length2;\n\t\t}\n\t\tvar v1 = curves1[0].getValues(),\n\t\t\tvalues2 = [],\n\t\t\tpos1 = 0, pos2,\n\t\t\tend1 = 0, end2;\n\t\tfor (var i = 0; i < length2; i++) {\n\t\t\tvar v2 = curves2[i].getValues();\n\t\t\tvalues2.push(v2);\n\t\t\tvar overlaps = Curve.getOverlaps(v1, v2);\n\t\t\tif (overlaps) {\n\t\t\t\tpos2 = !i && overlaps[0][0] > 0 ? length2 - 1 : i;\n\t\t\t\tend2 = overlaps[0][1];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar abs = Math.abs,\n\t\t\tepsilon = 1e-8,\n\t\t\tv2 = values2[pos2],\n\t\t\tstart2;\n\t\twhile (v1 && v2) {\n\t\t\tvar overlaps = Curve.getOverlaps(v1, v2);\n\t\t\tif (overlaps) {\n\t\t\t\tvar t1 = overlaps[0][0];\n\t\t\t\tif (abs(t1 - end1) < epsilon) {\n\t\t\t\t\tend1 = overlaps[1][0];\n\t\t\t\t\tif (end1 === 1) {\n\t\t\t\t\t\tv1 = ++pos1 < length1 ? curves1[pos1].getValues() : null;\n\t\t\t\t\t\tend1 = 0;\n\t\t\t\t\t}\n\t\t\t\t\tvar t2 = overlaps[0][1];\n\t\t\t\t\tif (abs(t2 - end2) < epsilon) {\n\t\t\t\t\t\tif (!start2)\n\t\t\t\t\t\t\tstart2 = [pos2, t2];\n\t\t\t\t\t\tend2 = overlaps[1][1];\n\t\t\t\t\t\tif (end2 === 1) {\n\t\t\t\t\t\t\tif (++pos2 >= length2)\n\t\t\t\t\t\t\t\tpos2 = 0;\n\t\t\t\t\t\t\tv2 = values2[pos2] || curves2[pos2].getValues();\n\t\t\t\t\t\t\tend2 = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!v1) {\n\t\t\t\t\t\t\treturn start2[0] === pos2 && start2[1] === end2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t},\n\n\t_hitTestSelf: function(point, options, viewMatrix, strokeMatrix) {\n\t\tvar that = this,\n\t\t\tstyle = this.getStyle(),\n\t\t\tsegments = this._segments,\n\t\t\tnumSegments = segments.length,\n\t\t\tclosed = this._closed,\n\t\t\ttolerancePadding = options._tolerancePadding,\n\t\t\tstrokePadding = tolerancePadding,\n\t\t\tjoin, cap, miterLimit,\n\t\t\tarea, loc, res,\n\t\t\thitStroke = options.stroke && style.hasStroke(),\n\t\t\thitFill = options.fill && style.hasFill(),\n\t\t\thitCurves = options.curves,\n\t\t\tstrokeRadius = hitStroke\n\t\t\t\t\t? style.getStrokeWidth() / 2\n\t\t\t\t\t: hitFill && options.tolerance > 0 || hitCurves\n\t\t\t\t\t\t? 0 : null;\n\t\tif (strokeRadius !== null) {\n\t\t\tif (strokeRadius > 0) {\n\t\t\t\tjoin = style.getStrokeJoin();\n\t\t\t\tcap = style.getStrokeCap();\n\t\t\t\tmiterLimit = style.getMiterLimit();\n\t\t\t\tstrokePadding = strokePadding.add(\n\t\t\t\t\tPath._getStrokePadding(strokeRadius, strokeMatrix));\n\t\t\t} else {\n\t\t\t\tjoin = cap = 'round';\n\t\t\t}\n\t\t}\n\n\t\tfunction isCloseEnough(pt, padding) {\n\t\t\treturn point.subtract(pt).divide(padding).length <= 1;\n\t\t}\n\n\t\tfunction checkSegmentPoint(seg, pt, name) {\n\t\t\tif (!options.selected || pt.isSelected()) {\n\t\t\t\tvar anchor = seg._point;\n\t\t\t\tif (pt !== anchor)\n\t\t\t\t\tpt = pt.add(anchor);\n\t\t\t\tif (isCloseEnough(pt, strokePadding)) {\n\t\t\t\t\treturn new HitResult(name, that, {\n\t\t\t\t\t\tsegment: seg,\n\t\t\t\t\t\tpoint: pt\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction checkSegmentPoints(seg, ends) {\n\t\t\treturn (ends || options.segments)\n\t\t\t\t&& checkSegmentPoint(seg, seg._point, 'segment')\n\t\t\t\t|| (!ends && options.handles) && (\n\t\t\t\t\tcheckSegmentPoint(seg, seg._handleIn, 'handle-in') ||\n\t\t\t\t\tcheckSegmentPoint(seg, seg._handleOut, 'handle-out'));\n\t\t}\n\n\t\tfunction addToArea(point) {\n\t\t\tarea.add(point);\n\t\t}\n\n\t\tfunction checkSegmentStroke(segment) {\n\t\t\tvar isJoin = closed || segment._index > 0\n\t\t\t\t\t&& segment._index < numSegments - 1;\n\t\t\tif ((isJoin ? join : cap) === 'round') {\n\t\t\t\treturn isCloseEnough(segment._point, strokePadding);\n\t\t\t} else {\n\t\t\t\tarea = new Path({ internal: true, closed: true });\n\t\t\t\tif (isJoin) {\n\t\t\t\t\tif (!segment.isSmooth()) {\n\t\t\t\t\t\tPath._addBevelJoin(segment, join, strokeRadius,\n\t\t\t\t\t\t\t   miterLimit, null, strokeMatrix, addToArea, true);\n\t\t\t\t\t}\n\t\t\t\t} else if (cap === 'square') {\n\t\t\t\t\tPath._addSquareCap(segment, cap, strokeRadius, null,\n\t\t\t\t\t\t\tstrokeMatrix, addToArea, true);\n\t\t\t\t}\n\t\t\t\tif (!area.isEmpty()) {\n\t\t\t\t\tvar loc;\n\t\t\t\t\treturn area.contains(point)\n\t\t\t\t\t\t|| (loc = area.getNearestLocation(point))\n\t\t\t\t\t\t\t&& isCloseEnough(loc.getPoint(), tolerancePadding);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (options.ends && !options.segments && !closed) {\n\t\t\tif (res = checkSegmentPoints(segments[0], true)\n\t\t\t\t\t|| checkSegmentPoints(segments[numSegments - 1], true))\n\t\t\t\treturn res;\n\t\t} else if (options.segments || options.handles) {\n\t\t\tfor (var i = 0; i < numSegments; i++)\n\t\t\t\tif (res = checkSegmentPoints(segments[i]))\n\t\t\t\t\treturn res;\n\t\t}\n\t\tif (strokeRadius !== null) {\n\t\t\tloc = this.getNearestLocation(point);\n\t\t\tif (loc) {\n\t\t\t\tvar time = loc.getTime();\n\t\t\t\tif (time === 0 || time === 1 && numSegments > 1) {\n\t\t\t\t\tif (!checkSegmentStroke(loc.getSegment()))\n\t\t\t\t\t\tloc = null;\n\t\t\t\t} else if (!isCloseEnough(loc.getPoint(), strokePadding)) {\n\t\t\t\t\tloc = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!loc && join === 'miter' && numSegments > 1) {\n\t\t\t\tfor (var i = 0; i < numSegments; i++) {\n\t\t\t\t\tvar segment = segments[i];\n\t\t\t\t\tif (point.getDistance(segment._point)\n\t\t\t\t\t\t\t<= miterLimit * strokeRadius\n\t\t\t\t\t\t\t&& checkSegmentStroke(segment)) {\n\t\t\t\t\t\tloc = segment.getLocation();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn !loc && hitFill && this._contains(point)\n\t\t\t\t|| loc && !hitStroke && !hitCurves\n\t\t\t\t\t? new HitResult('fill', this)\n\t\t\t\t\t: loc\n\t\t\t\t\t\t? new HitResult(hitStroke ? 'stroke' : 'curve', this, {\n\t\t\t\t\t\t\tlocation: loc,\n\t\t\t\t\t\t\tpoint: loc.getPoint()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t: null;\n\t}\n\n}, Base.each(Curve._evaluateMethods,\n\tfunction(name) {\n\t\tthis[name + 'At'] = function(offset) {\n\t\t\tvar loc = this.getLocationAt(offset);\n\t\t\treturn loc && loc[name]();\n\t\t};\n\t},\n{\n\tbeans: false,\n\n\tgetLocationOf: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tcurves = this.getCurves();\n\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\tvar loc = curves[i].getLocationOf(point);\n\t\t\tif (loc)\n\t\t\t\treturn loc;\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetOffsetOf: function() {\n\t\tvar loc = this.getLocationOf.apply(this, arguments);\n\t\treturn loc ? loc.getOffset() : null;\n\t},\n\n\tgetLocationAt: function(offset) {\n\t\tif (typeof offset === 'number') {\n\t\t\tvar curves = this.getCurves(),\n\t\t\t\tlength = 0;\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\tvar start = length,\n\t\t\t\t\tcurve = curves[i];\n\t\t\t\tlength += curve.getLength();\n\t\t\t\tif (length > offset) {\n\t\t\t\t\treturn curve.getLocationAt(offset - start);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (curves.length > 0 && offset <= this.getLength()) {\n\t\t\t\treturn new CurveLocation(curves[curves.length - 1], 1);\n\t\t\t}\n\t\t} else if (offset && offset.getPath && offset.getPath() === this) {\n\t\t\treturn offset;\n\t\t}\n\t\treturn null;\n\t}\n\n}),\nnew function() {\n\n\tfunction drawHandles(ctx, segments, matrix, size) {\n\t\tvar half = size / 2,\n\t\t\tcoords = new Array(6),\n\t\t\tpX, pY;\n\n\t\tfunction drawHandle(index) {\n\t\t\tvar hX = coords[index],\n\t\t\t\thY = coords[index + 1];\n\t\t\tif (pX != hX || pY != hY) {\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(pX, pY);\n\t\t\t\tctx.lineTo(hX, hY);\n\t\t\t\tctx.stroke();\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(hX, hY, half, 0, Math.PI * 2, true);\n\t\t\t\tctx.fill();\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tvar segment = segments[i],\n\t\t\t\tselection = segment._selection;\n\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\tpX = coords[0];\n\t\t\tpY = coords[1];\n\t\t\tif (selection & 2)\n\t\t\t\tdrawHandle(2);\n\t\t\tif (selection & 4)\n\t\t\t\tdrawHandle(4);\n\t\t\tctx.fillRect(pX - half, pY - half, size, size);\n\t\t\tif (!(selection & 1)) {\n\t\t\t\tvar fillStyle = ctx.fillStyle;\n\t\t\t\tctx.fillStyle = '#ffffff';\n\t\t\t\tctx.fillRect(pX - half + 1, pY - half + 1, size - 2, size - 2);\n\t\t\t\tctx.fillStyle = fillStyle;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction drawSegments(ctx, path, matrix) {\n\t\tvar segments = path._segments,\n\t\t\tlength = segments.length,\n\t\t\tcoords = new Array(6),\n\t\t\tfirst = true,\n\t\t\tcurX, curY,\n\t\t\tprevX, prevY,\n\t\t\tinX, inY,\n\t\t\toutX, outY;\n\n\t\tfunction drawSegment(segment) {\n\t\t\tif (matrix) {\n\t\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\t\tcurX = coords[0];\n\t\t\t\tcurY = coords[1];\n\t\t\t} else {\n\t\t\t\tvar point = segment._point;\n\t\t\t\tcurX = point._x;\n\t\t\t\tcurY = point._y;\n\t\t\t}\n\t\t\tif (first) {\n\t\t\t\tctx.moveTo(curX, curY);\n\t\t\t\tfirst = false;\n\t\t\t} else {\n\t\t\t\tif (matrix) {\n\t\t\t\t\tinX = coords[2];\n\t\t\t\t\tinY = coords[3];\n\t\t\t\t} else {\n\t\t\t\t\tvar handle = segment._handleIn;\n\t\t\t\t\tinX = curX + handle._x;\n\t\t\t\t\tinY = curY + handle._y;\n\t\t\t\t}\n\t\t\t\tif (inX === curX && inY === curY\n\t\t\t\t\t\t&& outX === prevX && outY === prevY) {\n\t\t\t\t\tctx.lineTo(curX, curY);\n\t\t\t\t} else {\n\t\t\t\t\tctx.bezierCurveTo(outX, outY, inX, inY, curX, curY);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprevX = curX;\n\t\t\tprevY = curY;\n\t\t\tif (matrix) {\n\t\t\t\toutX = coords[4];\n\t\t\t\toutY = coords[5];\n\t\t\t} else {\n\t\t\t\tvar handle = segment._handleOut;\n\t\t\t\toutX = prevX + handle._x;\n\t\t\t\toutY = prevY + handle._y;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i < length; i++)\n\t\t\tdrawSegment(segments[i]);\n\t\tif (path._closed && length > 0)\n\t\t\tdrawSegment(segments[0]);\n\t}\n\n\treturn {\n\t\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {\n\t\t\tvar dontStart = param.dontStart,\n\t\t\t\tdontPaint = param.dontFinish || param.clip,\n\t\t\t\tstyle = this.getStyle(),\n\t\t\t\thasFill = style.hasFill(),\n\t\t\t\thasStroke = style.hasStroke(),\n\t\t\t\tdashArray = style.getDashArray(),\n\t\t\t\tdashLength = !paper.support.nativeDash && hasStroke\n\t\t\t\t\t\t&& dashArray && dashArray.length;\n\n\t\t\tif (!dontStart)\n\t\t\t\tctx.beginPath();\n\n\t\t\tif (hasFill || hasStroke && !dashLength || dontPaint) {\n\t\t\t\tdrawSegments(ctx, this, strokeMatrix);\n\t\t\t\tif (this._closed)\n\t\t\t\t\tctx.closePath();\n\t\t\t}\n\n\t\t\tfunction getOffset(i) {\n\t\t\t\treturn dashArray[((i % dashLength) + dashLength) % dashLength];\n\t\t\t}\n\n\t\t\tif (!dontPaint && (hasFill || hasStroke)) {\n\t\t\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\t\t\tif (hasFill) {\n\t\t\t\t\tctx.fill(style.getFillRule());\n\t\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t\t}\n\t\t\t\tif (hasStroke) {\n\t\t\t\t\tif (dashLength) {\n\t\t\t\t\t\tif (!dontStart)\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tvar flattener = new PathFlattener(this, 0.25, 32, false,\n\t\t\t\t\t\t\t\tstrokeMatrix),\n\t\t\t\t\t\t\tlength = flattener.length,\n\t\t\t\t\t\t\tfrom = -style.getDashOffset(), to,\n\t\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\tfrom = from % length;\n\t\t\t\t\t\twhile (from > 0) {\n\t\t\t\t\t\t\tfrom -= getOffset(i--) + getOffset(i--);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (from < length) {\n\t\t\t\t\t\t\tto = from + getOffset(i++);\n\t\t\t\t\t\t\tif (from > 0 || to > 0)\n\t\t\t\t\t\t\t\tflattener.drawPart(ctx,\n\t\t\t\t\t\t\t\t\t\tMath.max(from, 0), Math.max(to, 0));\n\t\t\t\t\t\t\tfrom = to + getOffset(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_drawSelected: function(ctx, matrix) {\n\t\t\tctx.beginPath();\n\t\t\tdrawSegments(ctx, this, matrix);\n\t\t\tctx.stroke();\n\t\t\tdrawHandles(ctx, this._segments, matrix, paper.settings.handleSize);\n\t\t}\n\t};\n},\nnew function() {\n\tfunction getCurrentSegment(that) {\n\t\tvar segments = that._segments;\n\t\tif (!segments.length)\n\t\t\tthrow new Error('Use a moveTo() command first');\n\t\treturn segments[segments.length - 1];\n\t}\n\n\treturn {\n\t\tmoveTo: function() {\n\t\t\tvar segments = this._segments;\n\t\t\tif (segments.length === 1)\n\t\t\t\tthis.removeSegment(0);\n\t\t\tif (!segments.length)\n\t\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);\n\t\t},\n\n\t\tmoveBy: function() {\n\t\t\tthrow new Error('moveBy() is unsupported on Path items.');\n\t\t},\n\n\t\tlineTo: function() {\n\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);\n\t\t},\n\n\t\tcubicCurveTo: function() {\n\t\t\tvar handle1 = Point.read(arguments),\n\t\t\t\thandle2 = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this);\n\t\t\tcurrent.setHandleOut(handle1.subtract(current._point));\n\t\t\tthis._add([ new Segment(to, handle2.subtract(to)) ]);\n\t\t},\n\n\t\tquadraticCurveTo: function() {\n\t\t\tvar handle = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.cubicCurveTo(\n\t\t\t\thandle.add(current.subtract(handle).multiply(1 / 3)),\n\t\t\t\thandle.add(to.subtract(handle).multiply(1 / 3)),\n\t\t\t\tto\n\t\t\t);\n\t\t},\n\n\t\tcurveTo: function() {\n\t\t\tvar through = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tt = Base.pick(Base.read(arguments), 0.5),\n\t\t\t\tt1 = 1 - t,\n\t\t\t\tcurrent = getCurrentSegment(this)._point,\n\t\t\t\thandle = through.subtract(current.multiply(t1 * t1))\n\t\t\t\t\t.subtract(to.multiply(t * t)).divide(2 * t * t1);\n\t\t\tif (handle.isNaN())\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Cannot put a curve through points with parameter = ' + t);\n\t\t\tthis.quadraticCurveTo(handle, to);\n\t\t},\n\n\t\tarcTo: function() {\n\t\t\tvar abs = Math.abs,\n\t\t\t\tsqrt = Math.sqrt,\n\t\t\t\tcurrent = getCurrentSegment(this),\n\t\t\t\tfrom = current._point,\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tthrough,\n\t\t\t\tpeek = Base.peek(arguments),\n\t\t\t\tclockwise = Base.pick(peek, true),\n\t\t\t\tcenter, extent, vector, matrix;\n\t\t\tif (typeof clockwise === 'boolean') {\n\t\t\t\tvar middle = from.add(to).divide(2),\n\t\t\t\tthrough = middle.add(middle.subtract(from).rotate(\n\t\t\t\t\t\tclockwise ? -90 : 90));\n\t\t\t} else if (Base.remain(arguments) <= 2) {\n\t\t\t\tthrough = to;\n\t\t\t\tto = Point.read(arguments);\n\t\t\t} else {\n\t\t\t\tvar radius = Size.read(arguments),\n\t\t\t\t\tisZero = Numerical.isZero;\n\t\t\t\tif (isZero(radius.width) || isZero(radius.height))\n\t\t\t\t\treturn this.lineTo(to);\n\t\t\t\tvar rotation = Base.read(arguments),\n\t\t\t\t\tclockwise = !!Base.read(arguments),\n\t\t\t\t\tlarge = !!Base.read(arguments),\n\t\t\t\t\tmiddle = from.add(to).divide(2),\n\t\t\t\t\tpt = from.subtract(middle).rotate(-rotation),\n\t\t\t\t\tx = pt.x,\n\t\t\t\t\ty = pt.y,\n\t\t\t\t\trx = abs(radius.width),\n\t\t\t\t\try = abs(radius.height),\n\t\t\t\t\trxSq = rx * rx,\n\t\t\t\t\trySq = ry * ry,\n\t\t\t\t\txSq = x * x,\n\t\t\t\t\tySq = y * y;\n\t\t\t\tvar factor = sqrt(xSq / rxSq + ySq / rySq);\n\t\t\t\tif (factor > 1) {\n\t\t\t\t\trx *= factor;\n\t\t\t\t\try *= factor;\n\t\t\t\t\trxSq = rx * rx;\n\t\t\t\t\trySq = ry * ry;\n\t\t\t\t}\n\t\t\t\tfactor = (rxSq * rySq - rxSq * ySq - rySq * xSq) /\n\t\t\t\t\t\t(rxSq * ySq + rySq * xSq);\n\t\t\t\tif (abs(factor) < 1e-12)\n\t\t\t\t\tfactor = 0;\n\t\t\t\tif (factor < 0)\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');\n\t\t\t\tcenter = new Point(rx * y / ry, -ry * x / rx)\n\t\t\t\t\t\t.multiply((large === clockwise ? -1 : 1) * sqrt(factor))\n\t\t\t\t\t\t.rotate(rotation).add(middle);\n\t\t\t\tmatrix = new Matrix().translate(center).rotate(rotation)\n\t\t\t\t\t\t.scale(rx, ry);\n\t\t\t\tvector = matrix._inverseTransform(from);\n\t\t\t\textent = vector.getDirectedAngle(matrix._inverseTransform(to));\n\t\t\t\tif (!clockwise && extent > 0)\n\t\t\t\t\textent -= 360;\n\t\t\t\telse if (clockwise && extent < 0)\n\t\t\t\t\textent += 360;\n\t\t\t}\n\t\t\tif (through) {\n\t\t\t\tvar l1 = new Line(from.add(through).divide(2),\n\t\t\t\t\t\t\tthrough.subtract(from).rotate(90), true),\n\t\t\t\t\tl2 = new Line(through.add(to).divide(2),\n\t\t\t\t\t\t\tto.subtract(through).rotate(90), true),\n\t\t\t\t\tline = new Line(from, to),\n\t\t\t\t\tthroughSide = line.getSide(through);\n\t\t\t\tcenter = l1.intersect(l2, true);\n\t\t\t\tif (!center) {\n\t\t\t\t\tif (!throughSide)\n\t\t\t\t\t\treturn this.lineTo(to);\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');\n\t\t\t\t}\n\t\t\t\tvector = from.subtract(center);\n\t\t\t\textent = vector.getDirectedAngle(to.subtract(center));\n\t\t\t\tvar centerSide = line.getSide(center);\n\t\t\t\tif (centerSide === 0) {\n\t\t\t\t\textent = throughSide * abs(extent);\n\t\t\t\t} else if (throughSide === centerSide) {\n\t\t\t\t\textent += extent < 0 ? 360 : -360;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar epsilon = 1e-7,\n\t\t\t\text = abs(extent),\n\t\t\t\tcount = ext >= 360 ? 4 : Math.ceil((ext - epsilon) / 90),\n\t\t\t\tinc = extent / count,\n\t\t\t\thalf = inc * Math.PI / 360,\n\t\t\t\tz = 4 / 3 * Math.sin(half) / (1 + Math.cos(half)),\n\t\t\t\tsegments = [];\n\t\t\tfor (var i = 0; i <= count; i++) {\n\t\t\t\tvar pt = to,\n\t\t\t\t\tout = null;\n\t\t\t\tif (i < count) {\n\t\t\t\t\tout = vector.rotate(90).multiply(z);\n\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\tpt = matrix._transformPoint(vector);\n\t\t\t\t\t\tout = matrix._transformPoint(vector.add(out))\n\t\t\t\t\t\t\t\t.subtract(pt);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt = center.add(vector);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!i) {\n\t\t\t\t\tcurrent.setHandleOut(out);\n\t\t\t\t} else {\n\t\t\t\t\tvar _in = vector.rotate(-90).multiply(z);\n\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\t_in = matrix._transformPoint(vector.add(_in))\n\t\t\t\t\t\t\t\t.subtract(pt);\n\t\t\t\t\t}\n\t\t\t\t\tsegments.push(new Segment(pt, _in, out));\n\t\t\t\t}\n\t\t\t\tvector = vector.rotate(inc);\n\t\t\t}\n\t\t\tthis._add(segments);\n\t\t},\n\n\t\tlineBy: function() {\n\t\t\tvar to = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.lineTo(current.add(to));\n\t\t},\n\n\t\tcurveBy: function() {\n\t\t\tvar through = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tparameter = Base.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.curveTo(current.add(through), current.add(to), parameter);\n\t\t},\n\n\t\tcubicCurveBy: function() {\n\t\t\tvar handle1 = Point.read(arguments),\n\t\t\t\thandle2 = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.cubicCurveTo(current.add(handle1), current.add(handle2),\n\t\t\t\t\tcurrent.add(to));\n\t\t},\n\n\t\tquadraticCurveBy: function() {\n\t\t\tvar handle = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.quadraticCurveTo(current.add(handle), current.add(to));\n\t\t},\n\n\t\tarcBy: function() {\n\t\t\tvar current = getCurrentSegment(this)._point,\n\t\t\t\tpoint = current.add(Point.read(arguments)),\n\t\t\t\tclockwise = Base.pick(Base.peek(arguments), true);\n\t\t\tif (typeof clockwise === 'boolean') {\n\t\t\t\tthis.arcTo(point, clockwise);\n\t\t\t} else {\n\t\t\t\tthis.arcTo(point, current.add(Point.read(arguments)));\n\t\t\t}\n\t\t},\n\n\t\tclosePath: function(tolerance) {\n\t\t\tthis.setClosed(true);\n\t\t\tthis.join(this, tolerance);\n\t\t}\n\t};\n}, {\n\n\t_getBounds: function(matrix, options) {\n\t\tvar method = options.handle\n\t\t\t\t? 'getHandleBounds'\n\t\t\t\t: options.stroke\n\t\t\t\t? 'getStrokeBounds'\n\t\t\t\t: 'getBounds';\n\t\treturn Path[method](this._segments, this._closed, this, matrix, options);\n\t},\n\nstatics: {\n\tgetBounds: function(segments, closed, path, matrix, options, strokePadding) {\n\t\tvar first = segments[0];\n\t\tif (!first)\n\t\t\treturn new Rectangle();\n\t\tvar coords = new Array(6),\n\t\t\tprevCoords = first._transformCoordinates(matrix, new Array(6)),\n\t\t\tmin = prevCoords.slice(0, 2),\n\t\t\tmax = min.slice(),\n\t\t\troots = new Array(2);\n\n\t\tfunction processSegment(segment) {\n\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\tfor (var i = 0; i < 2; i++) {\n\t\t\t\tCurve._addBounds(\n\t\t\t\t\tprevCoords[i],\n\t\t\t\t\tprevCoords[i + 4],\n\t\t\t\t\tcoords[i + 2],\n\t\t\t\t\tcoords[i],\n\t\t\t\t\ti, strokePadding ? strokePadding[i] : 0, min, max, roots);\n\t\t\t}\n\t\t\tvar tmp = prevCoords;\n\t\t\tprevCoords = coords;\n\t\t\tcoords = tmp;\n\t\t}\n\n\t\tfor (var i = 1, l = segments.length; i < l; i++)\n\t\t\tprocessSegment(segments[i]);\n\t\tif (closed)\n\t\t\tprocessSegment(first);\n\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\t},\n\n\tgetStrokeBounds: function(segments, closed, path, matrix, options) {\n\t\tvar style = path.getStyle(),\n\t\t\tstroke = style.hasStroke(),\n\t\t\tstrokeWidth = style.getStrokeWidth(),\n\t\t\tstrokeMatrix = stroke && path._getStrokeMatrix(matrix, options),\n\t\t\tstrokePadding = stroke && Path._getStrokePadding(strokeWidth,\n\t\t\t\tstrokeMatrix),\n\t\t\tbounds = Path.getBounds(segments, closed, path, matrix, options,\n\t\t\t\tstrokePadding);\n\t\tif (!stroke)\n\t\t\treturn bounds;\n\t\tvar strokeRadius = strokeWidth / 2,\n\t\t\tjoin = style.getStrokeJoin(),\n\t\t\tcap = style.getStrokeCap(),\n\t\t\tmiterLimit = style.getMiterLimit(),\n\t\t\tjoinBounds = new Rectangle(new Size(strokePadding));\n\n\t\tfunction addPoint(point) {\n\t\t\tbounds = bounds.include(point);\n\t\t}\n\n\t\tfunction addRound(segment) {\n\t\t\tbounds = bounds.unite(\n\t\t\t\t\tjoinBounds.setCenter(segment._point.transform(matrix)));\n\t\t}\n\n\t\tfunction addJoin(segment, join) {\n\t\t\tif (join === 'round' || segment.isSmooth()) {\n\t\t\t\taddRound(segment);\n\t\t\t} else {\n\t\t\t\tPath._addBevelJoin(segment, join, strokeRadius, miterLimit,\n\t\t\t\t\t\tmatrix, strokeMatrix, addPoint);\n\t\t\t}\n\t\t}\n\n\t\tfunction addCap(segment, cap) {\n\t\t\tif (cap === 'round') {\n\t\t\t\taddRound(segment);\n\t\t\t} else {\n\t\t\t\tPath._addSquareCap(segment, cap, strokeRadius, matrix,\n\t\t\t\t\t\tstrokeMatrix, addPoint);\n\t\t\t}\n\t\t}\n\n\t\tvar length = segments.length - (closed ? 0 : 1);\n\t\tfor (var i = 1; i < length; i++)\n\t\t\taddJoin(segments[i], join);\n\t\tif (closed) {\n\t\t\taddJoin(segments[0], join);\n\t\t} else if (length > 0) {\n\t\t\taddCap(segments[0], cap);\n\t\t\taddCap(segments[segments.length - 1], cap);\n\t\t}\n\t\treturn bounds;\n\t},\n\n\t_getStrokePadding: function(radius, matrix) {\n\t\tif (!matrix)\n\t\t\treturn [radius, radius];\n\t\tvar hor = new Point(radius, 0).transform(matrix),\n\t\t\tver = new Point(0, radius).transform(matrix),\n\t\t\tphi = hor.getAngleInRadians(),\n\t\t\ta = hor.getLength(),\n\t\t\tb = ver.getLength();\n\t\tvar sin = Math.sin(phi),\n\t\t\tcos = Math.cos(phi),\n\t\t\ttan = Math.tan(phi),\n\t\t\ttx = Math.atan2(b * tan, a),\n\t\t\tty = Math.atan2(b, tan * a);\n\t\treturn [Math.abs(a * Math.cos(tx) * cos + b * Math.sin(tx) * sin),\n\t\t\t\tMath.abs(b * Math.sin(ty) * cos + a * Math.cos(ty) * sin)];\n\t},\n\n\t_addBevelJoin: function(segment, join, radius, miterLimit, matrix,\n\t\t\tstrokeMatrix, addPoint, isArea) {\n\t\tvar curve2 = segment.getCurve(),\n\t\t\tcurve1 = curve2.getPrevious(),\n\t\t\tpoint = curve2.getPoint1().transform(matrix),\n\t\t\tnormal1 = curve1.getNormalAtTime(1).multiply(radius)\n\t\t\t\t.transform(strokeMatrix),\n\t\t\tnormal2 = curve2.getNormalAtTime(0).multiply(radius)\n\t\t\t\t.transform(strokeMatrix);\n\t\tif (normal1.getDirectedAngle(normal2) < 0) {\n\t\t\tnormal1 = normal1.negate();\n\t\t\tnormal2 = normal2.negate();\n\t\t}\n\t\tif (isArea)\n\t\t\taddPoint(point);\n\t\taddPoint(point.add(normal1));\n\t\tif (join === 'miter') {\n\t\t\tvar corner = new Line(point.add(normal1),\n\t\t\t\t\tnew Point(-normal1.y, normal1.x), true\n\t\t\t\t).intersect(new Line(point.add(normal2),\n\t\t\t\t\tnew Point(-normal2.y, normal2.x), true\n\t\t\t\t), true);\n\t\t\tif (corner && point.getDistance(corner) <= miterLimit * radius) {\n\t\t\t\taddPoint(corner);\n\t\t\t}\n\t\t}\n\t\taddPoint(point.add(normal2));\n\t},\n\n\t_addSquareCap: function(segment, cap, radius, matrix, strokeMatrix,\n\t\t\taddPoint, isArea) {\n\t\tvar point = segment._point.transform(matrix),\n\t\t\tloc = segment.getLocation(),\n\t\t\tnormal = loc.getNormal()\n\t\t\t\t\t.multiply(loc.getTime() === 0 ? radius : -radius)\n\t\t\t\t\t.transform(strokeMatrix);\n\t\tif (cap === 'square') {\n\t\t\tif (isArea) {\n\t\t\t\taddPoint(point.subtract(normal));\n\t\t\t\taddPoint(point.add(normal));\n\t\t\t}\n\t\t\tpoint = point.add(normal.rotate(-90));\n\t\t}\n\t\taddPoint(point.add(normal));\n\t\taddPoint(point.subtract(normal));\n\t},\n\n\tgetHandleBounds: function(segments, closed, path, matrix, options) {\n\t\tvar style = path.getStyle(),\n\t\t\tstroke = options.stroke && style.hasStroke(),\n\t\t\tstrokePadding,\n\t\t\tjoinPadding;\n\t\tif (stroke) {\n\t\t\tvar strokeMatrix = path._getStrokeMatrix(matrix, options),\n\t\t\t\tstrokeRadius = style.getStrokeWidth() / 2,\n\t\t\t\tjoinRadius = strokeRadius;\n\t\t\tif (style.getStrokeJoin() === 'miter')\n\t\t\t\tjoinRadius = strokeRadius * style.getMiterLimit();\n\t\t\tif (style.getStrokeCap() === 'square')\n\t\t\t\tjoinRadius = Math.max(joinRadius, strokeRadius * Math.SQRT2);\n\t\t\tstrokePadding = Path._getStrokePadding(strokeRadius, strokeMatrix);\n\t\t\tjoinPadding = Path._getStrokePadding(joinRadius, strokeMatrix);\n\t\t}\n\t\tvar coords = new Array(6),\n\t\t\tx1 = Infinity,\n\t\t\tx2 = -x1,\n\t\t\ty1 = x1,\n\t\t\ty2 = x2;\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tvar segment = segments[i];\n\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\tfor (var j = 0; j < 6; j += 2) {\n\t\t\t\tvar padding = !j ? joinPadding : strokePadding,\n\t\t\t\t\tpaddingX = padding ? padding[0] : 0,\n\t\t\t\t\tpaddingY = padding ? padding[1] : 0,\n\t\t\t\t\tx = coords[j],\n\t\t\t\t\ty = coords[j + 1],\n\t\t\t\t\txn = x - paddingX,\n\t\t\t\t\txx = x + paddingX,\n\t\t\t\t\tyn = y - paddingY,\n\t\t\t\t\tyx = y + paddingY;\n\t\t\t\tif (xn < x1) x1 = xn;\n\t\t\t\tif (xx > x2) x2 = xx;\n\t\t\t\tif (yn < y1) y1 = yn;\n\t\t\t\tif (yx > y2) y2 = yx;\n\t\t\t}\n\t\t}\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t}\n}});\n\nPath.inject({ statics: new function() {\n\n\tvar kappa = 0.5522847498307936,\n\t\tellipseSegments = [\n\t\t\tnew Segment([-1, 0], [0, kappa ], [0, -kappa]),\n\t\t\tnew Segment([0, -1], [-kappa, 0], [kappa, 0 ]),\n\t\t\tnew Segment([1, 0], [0, -kappa], [0, kappa ]),\n\t\t\tnew Segment([0, 1], [kappa, 0 ], [-kappa, 0])\n\t\t];\n\n\tfunction createPath(segments, closed, args) {\n\t\tvar props = Base.getNamed(args),\n\t\t\tpath = new Path(props && props.insert == false && Item.NO_INSERT);\n\t\tpath._add(segments);\n\t\tpath._closed = closed;\n\t\treturn path.set(props, { insert: true });\n\t}\n\n\tfunction createEllipse(center, radius, args) {\n\t\tvar segments = new Array(4);\n\t\tfor (var i = 0; i < 4; i++) {\n\t\t\tvar segment = ellipseSegments[i];\n\t\t\tsegments[i] = new Segment(\n\t\t\t\tsegment._point.multiply(radius).add(center),\n\t\t\t\tsegment._handleIn.multiply(radius),\n\t\t\t\tsegment._handleOut.multiply(radius)\n\t\t\t);\n\t\t}\n\t\treturn createPath(segments, true, args);\n\t}\n\n\treturn {\n\t\tLine: function() {\n\t\t\treturn createPath([\n\t\t\t\tnew Segment(Point.readNamed(arguments, 'from')),\n\t\t\t\tnew Segment(Point.readNamed(arguments, 'to'))\n\t\t\t], false, arguments);\n\t\t},\n\n\t\tCircle: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tradius = Base.readNamed(arguments, 'radius');\n\t\t\treturn createEllipse(center, new Size(radius), arguments);\n\t\t},\n\n\t\tRectangle: function() {\n\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),\n\t\t\t\tradius = Size.readNamed(arguments, 'radius', 0,\n\t\t\t\t\t\t{ readNull: true }),\n\t\t\t\tbl = rect.getBottomLeft(true),\n\t\t\t\ttl = rect.getTopLeft(true),\n\t\t\t\ttr = rect.getTopRight(true),\n\t\t\t\tbr = rect.getBottomRight(true),\n\t\t\t\tsegments;\n\t\t\tif (!radius || radius.isZero()) {\n\t\t\t\tsegments = [\n\t\t\t\t\tnew Segment(bl),\n\t\t\t\t\tnew Segment(tl),\n\t\t\t\t\tnew Segment(tr),\n\t\t\t\t\tnew Segment(br)\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\tradius = Size.min(radius, rect.getSize(true).divide(2));\n\t\t\t\tvar rx = radius.width,\n\t\t\t\t\try = radius.height,\n\t\t\t\t\thx = rx * kappa,\n\t\t\t\t\thy = ry * kappa;\n\t\t\t\tsegments = [\n\t\t\t\t\tnew Segment(bl.add(rx, 0), null, [-hx, 0]),\n\t\t\t\t\tnew Segment(bl.subtract(0, ry), [0, hy]),\n\t\t\t\t\tnew Segment(tl.add(0, ry), null, [0, -hy]),\n\t\t\t\t\tnew Segment(tl.add(rx, 0), [-hx, 0], null),\n\t\t\t\t\tnew Segment(tr.subtract(rx, 0), null, [hx, 0]),\n\t\t\t\t\tnew Segment(tr.add(0, ry), [0, -hy], null),\n\t\t\t\t\tnew Segment(br.subtract(0, ry), null, [0, hy]),\n\t\t\t\t\tnew Segment(br.subtract(rx, 0), [hx, 0])\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn createPath(segments, true, arguments);\n\t\t},\n\n\t\tRoundRectangle: '#Rectangle',\n\n\t\tEllipse: function() {\n\t\t\tvar ellipse = Shape._readEllipse(arguments);\n\t\t\treturn createEllipse(ellipse.center, ellipse.radius, arguments);\n\t\t},\n\n\t\tOval: '#Ellipse',\n\n\t\tArc: function() {\n\t\t\tvar from = Point.readNamed(arguments, 'from'),\n\t\t\t\tthrough = Point.readNamed(arguments, 'through'),\n\t\t\t\tto = Point.readNamed(arguments, 'to'),\n\t\t\t\tprops = Base.getNamed(arguments),\n\t\t\t\tpath = new Path(props && props.insert == false\n\t\t\t\t\t\t&& Item.NO_INSERT);\n\t\t\tpath.moveTo(from);\n\t\t\tpath.arcTo(through, to);\n\t\t\treturn path.set(props);\n\t\t},\n\n\t\tRegularPolygon: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tsides = Base.readNamed(arguments, 'sides'),\n\t\t\t\tradius = Base.readNamed(arguments, 'radius'),\n\t\t\t\tstep = 360 / sides,\n\t\t\t\tthree = sides % 3 === 0,\n\t\t\t\tvector = new Point(0, three ? -radius : radius),\n\t\t\t\toffset = three ? -1 : 0.5,\n\t\t\t\tsegments = new Array(sides);\n\t\t\tfor (var i = 0; i < sides; i++)\n\t\t\t\tsegments[i] = new Segment(center.add(\n\t\t\t\t\tvector.rotate((i + offset) * step)));\n\t\t\treturn createPath(segments, true, arguments);\n\t\t},\n\n\t\tStar: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tpoints = Base.readNamed(arguments, 'points') * 2,\n\t\t\t\tradius1 = Base.readNamed(arguments, 'radius1'),\n\t\t\t\tradius2 = Base.readNamed(arguments, 'radius2'),\n\t\t\t\tstep = 360 / points,\n\t\t\t\tvector = new Point(0, -1),\n\t\t\t\tsegments = new Array(points);\n\t\t\tfor (var i = 0; i < points; i++)\n\t\t\t\tsegments[i] = new Segment(center.add(vector.rotate(step * i)\n\t\t\t\t\t\t.multiply(i % 2 ? radius2 : radius1)));\n\t\t\treturn createPath(segments, true, arguments);\n\t\t}\n\t};\n}});\n\nvar CompoundPath = PathItem.extend({\n\t_class: 'CompoundPath',\n\t_serializeFields: {\n\t\tchildren: []\n\t},\n\tbeans: true,\n\n\tinitialize: function CompoundPath(arg) {\n\t\tthis._children = [];\n\t\tthis._namedChildren = {};\n\t\tif (!this._initialize(arg)) {\n\t\t\tif (typeof arg === 'string') {\n\t\t\t\tthis.setPathData(arg);\n\t\t\t} else {\n\t\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);\n\t\t\t}\n\t\t}\n\t},\n\n\tinsertChildren: function insertChildren(index, items) {\n\t\tvar list = items,\n\t\t\tfirst = list[0];\n\t\tif (first && typeof first[0] === 'number')\n\t\t\tlist = [list];\n\t\tfor (var i = items.length - 1; i >= 0; i--) {\n\t\t\tvar item = list[i];\n\t\t\tif (list === items && !(item instanceof Path))\n\t\t\t\tlist = Base.slice(list);\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\tlist[i] = new Path({ segments: item, insert: false });\n\t\t\t} else if (item instanceof CompoundPath) {\n\t\t\t\tlist.splice.apply(list, [i, 1].concat(item.removeChildren()));\n\t\t\t\titem.remove();\n\t\t\t}\n\t\t}\n\t\treturn insertChildren.base.call(this, index, list);\n\t},\n\n\treduce: function reduce(options) {\n\t\tvar children = this._children;\n\t\tfor (var i = children.length - 1; i >= 0; i--) {\n\t\t\tvar path = children[i].reduce(options);\n\t\t\tif (path.isEmpty())\n\t\t\t\tpath.remove();\n\t\t}\n\t\tif (!children.length) {\n\t\t\tvar path = new Path(Item.NO_INSERT);\n\t\t\tpath.copyAttributes(this);\n\t\t\tpath.insertAbove(this);\n\t\t\tthis.remove();\n\t\t\treturn path;\n\t\t}\n\t\treturn reduce.base.call(this);\n\t},\n\n\tisClosed: function() {\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tif (!children[i]._closed)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\tsetClosed: function(closed) {\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tchildren[i].setClosed(closed);\n\t\t}\n\t},\n\n\tgetFirstSegment: function() {\n\t\tvar first = this.getFirstChild();\n\t\treturn first && first.getFirstSegment();\n\t},\n\n\tgetLastSegment: function() {\n\t\tvar last = this.getLastChild();\n\t\treturn last && last.getLastSegment();\n\t},\n\n\tgetCurves: function() {\n\t\tvar children = this._children,\n\t\t\tcurves = [];\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tcurves.push.apply(curves, children[i].getCurves());\n\t\treturn curves;\n\t},\n\n\tgetFirstCurve: function() {\n\t\tvar first = this.getFirstChild();\n\t\treturn first && first.getFirstCurve();\n\t},\n\n\tgetLastCurve: function() {\n\t\tvar last = this.getLastChild();\n\t\treturn last && last.getLastCurve();\n\t},\n\n\tgetArea: function() {\n\t\tvar children = this._children,\n\t\t\tarea = 0;\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tarea += children[i].getArea();\n\t\treturn area;\n\t},\n\n\tgetLength: function() {\n\t\tvar children = this._children,\n\t\t\tlength = 0;\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tlength += children[i].getLength();\n\t\treturn length;\n\t},\n\n\tgetPathData: function(_matrix, _precision) {\n\t\tvar children = this._children,\n\t\t\tpaths = [];\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar child = children[i],\n\t\t\t\tmx = child._matrix;\n\t\t\tpaths.push(child.getPathData(_matrix && !mx.isIdentity()\n\t\t\t\t\t? _matrix.appended(mx) : _matrix, _precision));\n\t\t}\n\t\treturn paths.join('');\n\t},\n\n\t_hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {\n\t\treturn _hitTestChildren.base.call(this, point,\n\t\t\t\toptions.class === Path || options.type === 'path' ? options\n\t\t\t\t\t: Base.set({}, options, { fill: false }),\n\t\t\t\tviewMatrix);\n\t},\n\n\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {\n\t\tvar children = this._children;\n\t\tif (!children.length)\n\t\t\treturn;\n\n\t\tparam = param.extend({ dontStart: true, dontFinish: true });\n\t\tctx.beginPath();\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tchildren[i].draw(ctx, param, strokeMatrix);\n\n\t\tif (!param.clip) {\n\t\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\t\tvar style = this._style;\n\t\t\tif (style.hasFill()) {\n\t\t\t\tctx.fill(style.getFillRule());\n\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t}\n\t\t\tif (style.hasStroke())\n\t\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\t_drawSelected: function(ctx, matrix, selectionItems) {\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar child = children[i],\n\t\t\t\tmx = child._matrix;\n\t\t\tif (!selectionItems[child._id]) {\n\t\t\t\tchild._drawSelected(ctx, mx.isIdentity() ? matrix\n\t\t\t\t\t\t: matrix.appended(mx));\n\t\t\t}\n\t\t}\n\t}\n},\nnew function() {\n\tfunction getCurrentPath(that, check) {\n\t\tvar children = that._children;\n\t\tif (check && !children.length)\n\t\t\tthrow new Error('Use a moveTo() command first');\n\t\treturn children[children.length - 1];\n\t}\n\n\treturn Base.each(['lineTo', 'cubicCurveTo', 'quadraticCurveTo', 'curveTo',\n\t\t\t'arcTo', 'lineBy', 'cubicCurveBy', 'quadraticCurveBy', 'curveBy',\n\t\t\t'arcBy'],\n\t\tfunction(key) {\n\t\t\tthis[key] = function() {\n\t\t\t\tvar path = getCurrentPath(this, true);\n\t\t\t\tpath[key].apply(path, arguments);\n\t\t\t};\n\t\t}, {\n\t\t\tmoveTo: function() {\n\t\t\t\tvar current = getCurrentPath(this),\n\t\t\t\t\tpath = current && current.isEmpty() ? current\n\t\t\t\t\t\t\t: new Path(Item.NO_INSERT);\n\t\t\t\tif (path !== current)\n\t\t\t\t\tthis.addChild(path);\n\t\t\t\tpath.moveTo.apply(path, arguments);\n\t\t\t},\n\n\t\t\tmoveBy: function() {\n\t\t\t\tvar current = getCurrentPath(this, true),\n\t\t\t\t\tlast = current && current.getLastSegment(),\n\t\t\t\t\tpoint = Point.read(arguments);\n\t\t\t\tthis.moveTo(last ? point.add(last._point) : point);\n\t\t\t},\n\n\t\t\tclosePath: function(tolerance) {\n\t\t\t\tgetCurrentPath(this, true).closePath(tolerance);\n\t\t\t}\n\t\t}\n\t);\n}, Base.each(['reverse', 'flatten', 'simplify', 'smooth'], function(key) {\n\tthis[key] = function(param) {\n\t\tvar children = this._children,\n\t\t\tres;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tres = children[i][key](param) || res;\n\t\t}\n\t\treturn res;\n\t};\n}, {}));\n\nPathItem.inject(new function() {\n\tvar min = Math.min,\n\t\tmax = Math.max,\n\t\tabs = Math.abs,\n\t\toperators = {\n\t\t\tunite:     { '1': true, '2': true },\n\t\t\tintersect: { '2': true },\n\t\t\tsubtract:  { '1': true },\n\t\t\texclude:   { '1': true, '-1': true }\n\t\t};\n\n\tfunction preparePath(path, resolve) {\n\t\tvar res = path.clone(false).reduce({ simplify: true })\n\t\t\t\t.transform(null, true, true);\n\t\treturn resolve\n\t\t\t\t? res.resolveCrossings().reorient(\n\t\t\t\t\tres.getFillRule() === 'nonzero', true)\n\t\t\t\t: res;\n\t}\n\n\tfunction createResult(paths, simplify, path1, path2, options) {\n\t\tvar result = new CompoundPath(Item.NO_INSERT);\n\t\tresult.addChildren(paths, true);\n\t\tresult = result.reduce({ simplify: simplify });\n\t\tif (!(options && options.insert == false)) {\n\t\t\tresult.insertAbove(path2 && path1.isSibling(path2)\n\t\t\t\t\t&& path1.getIndex() < path2.getIndex() ? path2 : path1);\n\t\t}\n\t\tresult.copyAttributes(path1, true);\n\t\treturn result;\n\t}\n\n\tfunction traceBoolean(path1, path2, operation, options) {\n\t\tif (options && (options.trace == false || options.stroke) &&\n\t\t\t\t/^(subtract|intersect)$/.test(operation))\n\t\t\treturn splitBoolean(path1, path2, operation);\n\t\tvar _path1 = preparePath(path1, true),\n\t\t\t_path2 = path2 && path1 !== path2 && preparePath(path2, true),\n\t\t\toperator = operators[operation];\n\t\toperator[operation] = true;\n\t\tif (_path2 && (operator.subtract || operator.exclude)\n\t\t\t\t^ (_path2.isClockwise() ^ _path1.isClockwise()))\n\t\t\t_path2.reverse();\n\t\tvar crossings = divideLocations(\n\t\t\t\tCurveLocation.expand(_path1.getCrossings(_path2))),\n\t\t\tpaths1 = _path1._children || [_path1],\n\t\t\tpaths2 = _path2 && (_path2._children || [_path2]),\n\t\t\tsegments = [],\n\t\t\tcurves = [],\n\t\t\tpaths;\n\n\t\tfunction collect(paths) {\n\t\t\tfor (var i = 0, l = paths.length; i < l; i++) {\n\t\t\t\tvar path = paths[i];\n\t\t\t\tsegments.push.apply(segments, path._segments);\n\t\t\t\tcurves.push.apply(curves, path.getCurves());\n\t\t\t\tpath._overlapsOnly = true;\n\t\t\t}\n\t\t}\n\n\t\tif (crossings.length) {\n\t\t\tcollect(paths1);\n\t\t\tif (paths2)\n\t\t\t\tcollect(paths2);\n\t\t\tfor (var i = 0, l = crossings.length; i < l; i++) {\n\t\t\t\tpropagateWinding(crossings[i]._segment, _path1, _path2, curves,\n\t\t\t\t\t\toperator);\n\t\t\t}\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\tvar segment = segments[i],\n\t\t\t\t\tinter = segment._intersection;\n\t\t\t\tif (!segment._winding) {\n\t\t\t\t\tpropagateWinding(segment, _path1, _path2, curves, operator);\n\t\t\t\t}\n\t\t\t\tif (!(inter && inter._overlap))\n\t\t\t\t\tsegment._path._overlapsOnly = false;\n\t\t\t}\n\t\t\tpaths = tracePaths(segments, operator);\n\t\t} else {\n\t\t\tpaths = reorientPaths(\n\t\t\t\t\tpaths2 ? paths1.concat(paths2) : paths1.slice(),\n\t\t\t\t\tfunction(w) {\n\t\t\t\t\t\treturn !!operator[w];\n\t\t\t\t\t});\n\t\t}\n\n\t\treturn createResult(paths, true, path1, path2, options);\n\t}\n\n\tfunction splitBoolean(path1, path2, operation) {\n\t\tvar _path1 = preparePath(path1),\n\t\t\t_path2 = preparePath(path2),\n\t\t\tcrossings = _path1.getCrossings(_path2),\n\t\t\tsubtract = operation === 'subtract',\n\t\t\tdivide = operation === 'divide',\n\t\t\tadded = {},\n\t\t\tpaths = [];\n\n\t\tfunction addPath(path) {\n\t\t\tif (!added[path._id] && (divide ||\n\t\t\t\t\t_path2.contains(path.getPointAt(path.getLength() / 2))\n\t\t\t\t\t\t^ subtract)) {\n\t\t\t\tpaths.unshift(path);\n\t\t\t\treturn added[path._id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = crossings.length - 1; i >= 0; i--) {\n\t\t\tvar path = crossings[i].split();\n\t\t\tif (path) {\n\t\t\t\tif (addPath(path))\n\t\t\t\t\tpath.getFirstSegment().setHandleIn(0, 0);\n\t\t\t\t_path1.getLastSegment().setHandleOut(0, 0);\n\t\t\t}\n\t\t}\n\t\taddPath(_path1);\n\t\treturn createResult(paths, false, path1, path2);\n\t}\n\n\tfunction linkIntersections(from, to) {\n\t\tvar prev = from;\n\t\twhile (prev) {\n\t\t\tif (prev === to)\n\t\t\t\treturn;\n\t\t\tprev = prev._previous;\n\t\t}\n\t\twhile (from._next && from._next !== to)\n\t\t\tfrom = from._next;\n\t\tif (!from._next) {\n\t\t\twhile (to._previous)\n\t\t\t\tto = to._previous;\n\t\t\tfrom._next = to;\n\t\t\tto._previous = from;\n\t\t}\n\t}\n\n\tfunction clearCurveHandles(curves) {\n\t\tfor (var i = curves.length - 1; i >= 0; i--)\n\t\t\tcurves[i].clearHandles();\n\t}\n\n\tfunction reorientPaths(paths, isInside, clockwise) {\n\t\tvar length = paths && paths.length;\n\t\tif (length) {\n\t\t\tvar lookup = Base.each(paths, function (path, i) {\n\t\t\t\t\tthis[path._id] = {\n\t\t\t\t\t\tcontainer: null,\n\t\t\t\t\t\twinding: path.isClockwise() ? 1 : -1,\n\t\t\t\t\t\tindex: i\n\t\t\t\t\t};\n\t\t\t\t}, {}),\n\t\t\t\tsorted = paths.slice().sort(function (a, b) {\n\t\t\t\t\treturn abs(b.getArea()) - abs(a.getArea());\n\t\t\t\t}),\n\t\t\t\tfirst = sorted[0];\n\t\t\tif (clockwise == null)\n\t\t\t\tclockwise = first.isClockwise();\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tvar path1 = sorted[i],\n\t\t\t\t\tentry1 = lookup[path1._id],\n\t\t\t\t\tpoint = path1.getInteriorPoint(),\n\t\t\t\t\tcontainerWinding = 0;\n\t\t\t\tfor (var j = i - 1; j >= 0; j--) {\n\t\t\t\t\tvar path2 = sorted[j];\n\t\t\t\t\tif (path2.contains(point)) {\n\t\t\t\t\t\tvar entry2 = lookup[path2._id];\n\t\t\t\t\t\tcontainerWinding = entry2.winding;\n\t\t\t\t\t\tentry1.winding += containerWinding;\n\t\t\t\t\t\tentry1.container = entry2.exclude ? entry2.container\n\t\t\t\t\t\t\t\t: path2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isInside(entry1.winding) === isInside(containerWinding)) {\n\t\t\t\t\tentry1.exclude = true;\n\t\t\t\t\tpaths[entry1.index] = null;\n\t\t\t\t} else {\n\t\t\t\t\tvar container = entry1.container;\n\t\t\t\t\tpath1.setClockwise(container ? !container.isClockwise()\n\t\t\t\t\t\t\t: clockwise);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn paths;\n\t}\n\n\tfunction divideLocations(locations, include, clearLater) {\n\t\tvar results = include && [],\n\t\t\ttMin = 1e-8,\n\t\t\ttMax = 1 - tMin,\n\t\t\tclearHandles = false,\n\t\t\tclearCurves = clearLater || [],\n\t\t\tclearLookup = clearLater && {},\n\t\t\trenormalizeLocs,\n\t\t\tprevCurve,\n\t\t\tprevTime;\n\n\t\tfunction getId(curve) {\n\t\t\treturn curve._path._id + '.' + curve._segment1._index;\n\t\t}\n\n\t\tfor (var i = (clearLater && clearLater.length) - 1; i >= 0; i--) {\n\t\t\tvar curve = clearLater[i];\n\t\t\tif (curve._path)\n\t\t\t\tclearLookup[getId(curve)] = true;\n\t\t}\n\n\t\tfor (var i = locations.length - 1; i >= 0; i--) {\n\t\t\tvar loc = locations[i],\n\t\t\t\ttime = loc._time,\n\t\t\t\torigTime = time,\n\t\t\t\texclude = include && !include(loc),\n\t\t\t\tcurve = loc._curve,\n\t\t\t\tsegment;\n\t\t\tif (curve) {\n\t\t\t\tif (curve !== prevCurve) {\n\t\t\t\t\tclearHandles = !curve.hasHandles()\n\t\t\t\t\t\t\t|| clearLookup && clearLookup[getId(curve)];\n\t\t\t\t\trenormalizeLocs = [];\n\t\t\t\t\tprevTime = null;\n\t\t\t\t\tprevCurve = curve;\n\t\t\t\t} else if (prevTime >= tMin) {\n\t\t\t\t\ttime /= prevTime;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (exclude) {\n\t\t\t\tif (renormalizeLocs)\n\t\t\t\t\trenormalizeLocs.push(loc);\n\t\t\t\tcontinue;\n\t\t\t} else if (include) {\n\t\t\t\tresults.unshift(loc);\n\t\t\t}\n\t\t\tprevTime = origTime;\n\t\t\tif (time < tMin) {\n\t\t\t\tsegment = curve._segment1;\n\t\t\t} else if (time > tMax) {\n\t\t\t\tsegment = curve._segment2;\n\t\t\t} else {\n\t\t\t\tvar newCurve = curve.divideAtTime(time, true);\n\t\t\t\tif (clearHandles)\n\t\t\t\t\tclearCurves.push(curve, newCurve);\n\t\t\t\tsegment = newCurve._segment1;\n\t\t\t\tfor (var j = renormalizeLocs.length - 1; j >= 0; j--) {\n\t\t\t\t\tvar l = renormalizeLocs[j];\n\t\t\t\t\tl._time = (l._time - time) / (1 - time);\n\t\t\t\t}\n\t\t\t}\n\t\t\tloc._setSegment(segment);\n\t\t\tvar inter = segment._intersection,\n\t\t\t\tdest = loc._intersection;\n\t\t\tif (inter) {\n\t\t\t\tlinkIntersections(inter, dest);\n\t\t\t\tvar other = inter;\n\t\t\t\twhile (other) {\n\t\t\t\t\tlinkIntersections(other._intersection, inter);\n\t\t\t\t\tother = other._next;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsegment._intersection = dest;\n\t\t\t}\n\t\t}\n\t\tif (!clearLater)\n\t\t\tclearCurveHandles(clearCurves);\n\t\treturn results || locations;\n\t}\n\n\tfunction getWinding(point, curves, dir, closed, dontFlip) {\n\t\tvar ia = dir ? 1 : 0,\n\t\t\tio = ia ^ 1,\n\t\t\tpv = [point.x, point.y],\n\t\t\tpa = pv[ia],\n\t\t\tpo = pv[io],\n\t\t\twindingEpsilon = 1e-9,\n\t\t\tqualityEpsilon = 1e-6,\n\t\t\tpaL = pa - windingEpsilon,\n\t\t\tpaR = pa + windingEpsilon,\n\t\t\twindingL = 0,\n\t\t\twindingR = 0,\n\t\t\tpathWindingL = 0,\n\t\t\tpathWindingR = 0,\n\t\t\tonPath = false,\n\t\t\tonAnyPath = false,\n\t\t\tquality = 1,\n\t\t\troots = [],\n\t\t\tvPrev,\n\t\t\tvClose;\n\n\t\tfunction addWinding(v) {\n\t\t\tvar o0 = v[io + 0],\n\t\t\t\to3 = v[io + 6];\n\t\t\tif (po < min(o0, o3) || po > max(o0, o3)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar a0 = v[ia + 0],\n\t\t\t\ta1 = v[ia + 2],\n\t\t\t\ta2 = v[ia + 4],\n\t\t\t\ta3 = v[ia + 6];\n\t\t\tif (o0 === o3) {\n\t\t\t\tif (a0 < paR && a3 > paL || a3 < paR && a0 > paL) {\n\t\t\t\t\tonPath = true;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar t =   po === o0 ? 0\n\t\t\t\t\t: po === o3 ? 1\n\t\t\t\t\t: paL > max(a0, a1, a2, a3) || paR < min(a0, a1, a2, a3)\n\t\t\t\t\t? 1\n\t\t\t\t\t: Curve.solveCubic(v, io, po, roots, 0, 1) > 0\n\t\t\t\t\t\t? roots[0]\n\t\t\t\t\t\t: 1,\n\t\t\t\ta =   t === 0 ? a0\n\t\t\t\t\t: t === 1 ? a3\n\t\t\t\t\t: Curve.getPoint(v, t)[dir ? 'y' : 'x'],\n\t\t\t\twinding = o0 > o3 ? 1 : -1,\n\t\t\t\twindingPrev = vPrev[io] > vPrev[io + 6] ? 1 : -1,\n\t\t\t\ta3Prev = vPrev[ia + 6];\n\t\t\tif (po !== o0) {\n\t\t\t\tif (a < paL) {\n\t\t\t\t\tpathWindingL += winding;\n\t\t\t\t} else if (a > paR) {\n\t\t\t\t\tpathWindingR += winding;\n\t\t\t\t} else {\n\t\t\t\t\tonPath = true;\n\t\t\t\t}\n\t\t\t\tif (a > pa - qualityEpsilon && a < pa + qualityEpsilon)\n\t\t\t\t\tquality /= 2;\n\t\t\t} else {\n\t\t\t\tif (winding !== windingPrev) {\n\t\t\t\t\tif (a0 < paL) {\n\t\t\t\t\t\tpathWindingL += winding;\n\t\t\t\t\t} else if (a0 > paR) {\n\t\t\t\t\t\tpathWindingR += winding;\n\t\t\t\t\t}\n\t\t\t\t} else if (a0 != a3Prev) {\n\t\t\t\t\tif (a3Prev < paR && a > paR) {\n\t\t\t\t\t\tpathWindingR += winding;\n\t\t\t\t\t\tonPath = true;\n\t\t\t\t\t} else if (a3Prev > paL && a < paL) {\n\t\t\t\t\t\tpathWindingL += winding;\n\t\t\t\t\t\tonPath = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tquality = 0;\n\t\t\t}\n\t\t\tvPrev = v;\n\t\t\treturn !dontFlip && a > paL && a < paR\n\t\t\t\t\t&& Curve.getTangent(v, t)[dir ? 'x' : 'y'] === 0\n\t\t\t\t\t&& getWinding(point, curves, !dir, closed, true);\n\t\t}\n\n\t\tfunction handleCurve(v) {\n\t\t\tvar o0 = v[io + 0],\n\t\t\t\to1 = v[io + 2],\n\t\t\t\to2 = v[io + 4],\n\t\t\t\to3 = v[io + 6];\n\t\t\tif (po <= max(o0, o1, o2, o3) && po >= min(o0, o1, o2, o3)) {\n\t\t\t\tvar a0 = v[ia + 0],\n\t\t\t\t\ta1 = v[ia + 2],\n\t\t\t\t\ta2 = v[ia + 4],\n\t\t\t\t\ta3 = v[ia + 6],\n\t\t\t\t\tmonoCurves = paL > max(a0, a1, a2, a3) ||\n\t\t\t\t\t\t\t\t paR < min(a0, a1, a2, a3)\n\t\t\t\t\t\t\t? [v] : Curve.getMonoCurves(v, dir),\n\t\t\t\t\tres;\n\t\t\t\tfor (var i = 0, l = monoCurves.length; i < l; i++) {\n\t\t\t\t\tif (res = addWinding(monoCurves[i]))\n\t\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\tvar curve = curves[i],\n\t\t\t\tpath = curve._path,\n\t\t\t\tv = curve.getValues(),\n\t\t\t\tres;\n\t\t\tif (!i || curves[i - 1]._path !== path) {\n\t\t\t\tvPrev = null;\n\t\t\t\tif (!path._closed) {\n\t\t\t\t\tvClose = Curve.getValues(\n\t\t\t\t\t\t\tpath.getLastCurve().getSegment2(),\n\t\t\t\t\t\t\tcurve.getSegment1(),\n\t\t\t\t\t\t\tnull, !closed);\n\t\t\t\t\tif (vClose[io] !== vClose[io + 6]) {\n\t\t\t\t\t\tvPrev = vClose;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!vPrev) {\n\t\t\t\t\tvPrev = v;\n\t\t\t\t\tvar prev = path.getLastCurve();\n\t\t\t\t\twhile (prev && prev !== curve) {\n\t\t\t\t\t\tvar v2 = prev.getValues();\n\t\t\t\t\t\tif (v2[io] !== v2[io + 6]) {\n\t\t\t\t\t\t\tvPrev = v2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprev = prev.getPrevious();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (res = handleCurve(v))\n\t\t\t\treturn res;\n\n\t\t\tif (i + 1 === l || curves[i + 1]._path !== path) {\n\t\t\t\tif (vClose && (res = handleCurve(vClose)))\n\t\t\t\t\treturn res;\n\t\t\t\tif (onPath && !pathWindingL && !pathWindingR) {\n\t\t\t\t\tpathWindingL = pathWindingR = path.isClockwise(closed) ^ dir\n\t\t\t\t\t\t\t? 1 : -1;\n\t\t\t\t}\n\t\t\t\twindingL += pathWindingL;\n\t\t\t\twindingR += pathWindingR;\n\t\t\t\tpathWindingL = pathWindingR = 0;\n\t\t\t\tif (onPath) {\n\t\t\t\t\tonAnyPath = true;\n\t\t\t\t\tonPath = false;\n\t\t\t\t}\n\t\t\t\tvClose = null;\n\t\t\t}\n\t\t}\n\t\twindingL = abs(windingL);\n\t\twindingR = abs(windingR);\n\t\treturn {\n\t\t\twinding: max(windingL, windingR),\n\t\t\twindingL: windingL,\n\t\t\twindingR: windingR,\n\t\t\tquality: quality,\n\t\t\tonPath: onAnyPath\n\t\t};\n\t}\n\n\tfunction propagateWinding(segment, path1, path2, curves, operator) {\n\t\tvar chain = [],\n\t\t\tstart = segment,\n\t\t\ttotalLength = 0,\n\t\t\twinding;\n\t\tdo {\n\t\t\tvar curve = segment.getCurve(),\n\t\t\t\tlength = curve.getLength();\n\t\t\tchain.push({ segment: segment, curve: curve, length: length });\n\t\t\ttotalLength += length;\n\t\t\tsegment = segment.getNext();\n\t\t} while (segment && !segment._intersection && segment !== start);\n\t\tvar offsets = [0.5, 0.25, 0.75],\n\t\t\twinding = { winding: 0, quality: -1 },\n\t\t\ttMin = 1e-8,\n\t\t\ttMax = 1 - tMin;\n\t\tfor (var i = 0; i < offsets.length && winding.quality < 0.5; i++) {\n\t\t\tvar length = totalLength * offsets[i];\n\t\t\tfor (var j = 0, l = chain.length; j < l; j++) {\n\t\t\t\tvar entry = chain[j],\n\t\t\t\t\tcurveLength = entry.length;\n\t\t\t\tif (length <= curveLength) {\n\t\t\t\t\tvar curve = entry.curve,\n\t\t\t\t\t\tpath = curve._path,\n\t\t\t\t\t\tparent = path._parent,\n\t\t\t\t\t\toperand = parent instanceof CompoundPath ? parent : path,\n\t\t\t\t\t\tt = Numerical.clamp(curve.getTimeAt(length), tMin, tMax),\n\t\t\t\t\t\tpt = curve.getPointAtTime(t),\n\t\t\t\t\t\tdir = abs(curve.getTangentAtTime(t).y) < Math.SQRT1_2;\n\t\t\t\t\tvar wind = !(operator.subtract && path2 && (\n\t\t\t\t\t\t\toperand === path1 &&\n\t\t\t\t\t\t\t\tpath2._getWinding(pt, dir, true).winding ||\n\t\t\t\t\t\t\toperand === path2 &&\n\t\t\t\t\t\t\t\t!path1._getWinding(pt, dir, true).winding))\n\t\t\t\t\t\t\t? getWinding(pt, curves, dir, true)\n\t\t\t\t\t\t\t: { winding: 0, quality: 1 };\n\t\t\t\t\tif (wind.quality > winding.quality)\n\t\t\t\t\t\twinding = wind;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlength -= curveLength;\n\t\t\t}\n\t\t}\n\t\tfor (var j = chain.length - 1; j >= 0; j--) {\n\t\t\tchain[j].segment._winding = winding;\n\t\t}\n\t}\n\n\tfunction tracePaths(segments, operator) {\n\t\tvar paths = [],\n\t\t\tstarts;\n\n\t\tfunction isValid(seg) {\n\t\t\tvar winding;\n\t\t\treturn !!(seg && !seg._visited && (!operator\n\t\t\t\t\t|| operator[(winding = seg._winding || {}).winding]\n\t\t\t\t\t\t&& !(operator.unite && winding.winding === 2\n\t\t\t\t\t\t\t&& winding.windingL && winding.windingR)));\n\t\t}\n\n\t\tfunction isStart(seg) {\n\t\t\tif (seg) {\n\t\t\t\tfor (var i = 0, l = starts.length; i < l; i++) {\n\t\t\t\t\tif (seg === starts[i])\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction visitPath(path) {\n\t\t\tvar segments = path._segments;\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\tsegments[i]._visited = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction getCrossingSegments(segment, collectStarts) {\n\t\t\tvar inter = segment._intersection,\n\t\t\t\tstart = inter,\n\t\t\t\tcrossings = [];\n\t\t\tif (collectStarts)\n\t\t\t\tstarts = [segment];\n\n\t\t\tfunction collect(inter, end) {\n\t\t\t\twhile (inter && inter !== end) {\n\t\t\t\t\tvar other = inter._segment,\n\t\t\t\t\t\tpath = other && other._path;\n\t\t\t\t\tif (path) {\n\t\t\t\t\t\tvar next = other.getNext() || path.getFirstSegment(),\n\t\t\t\t\t\t\tnextInter = next._intersection;\n\t\t\t\t\t\tif (other !== segment && (isStart(other)\n\t\t\t\t\t\t\t|| isStart(next)\n\t\t\t\t\t\t\t|| next && (isValid(other) && (isValid(next)\n\t\t\t\t\t\t\t\t|| nextInter && isValid(nextInter._segment))))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcrossings.push(other);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (collectStarts)\n\t\t\t\t\t\t\tstarts.push(other);\n\t\t\t\t\t}\n\t\t\t\t\tinter = inter._next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (inter) {\n\t\t\t\tcollect(inter);\n\t\t\t\twhile (inter && inter._prev)\n\t\t\t\t\tinter = inter._prev;\n\t\t\t\tcollect(inter, start);\n\t\t\t}\n\t\t\treturn crossings;\n\t\t}\n\n\t\tsegments.sort(function(seg1, seg2) {\n\t\t\tvar inter1 = seg1._intersection,\n\t\t\t\tinter2 = seg2._intersection,\n\t\t\t\tover1 = !!(inter1 && inter1._overlap),\n\t\t\t\tover2 = !!(inter2 && inter2._overlap),\n\t\t\t\tpath1 = seg1._path,\n\t\t\t\tpath2 = seg2._path;\n\t\t\treturn over1 ^ over2\n\t\t\t\t\t? over1 ? 1 : -1\n\t\t\t\t\t: !inter1 ^ !inter2\n\t\t\t\t\t\t? inter1 ? 1 : -1\n\t\t\t\t\t\t: path1 !== path2\n\t\t\t\t\t\t\t? path1._id - path2._id\n\t\t\t\t\t\t\t: seg1._index - seg2._index;\n\t\t});\n\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tvar seg = segments[i],\n\t\t\t\tvalid = isValid(seg),\n\t\t\t\tpath = null,\n\t\t\t\tfinished = false,\n\t\t\t\tclosed = true,\n\t\t\t\tbranches = [],\n\t\t\t\tbranch,\n\t\t\t\tvisited,\n\t\t\t\thandleIn;\n\t\t\tif (valid && seg._path._overlapsOnly) {\n\t\t\t\tvar path1 = seg._path,\n\t\t\t\t\tpath2 = seg._intersection._segment._path;\n\t\t\t\tif (path1.compare(path2)) {\n\t\t\t\t\tif (path1.getArea())\n\t\t\t\t\t\tpaths.push(path1.clone(false));\n\t\t\t\t\tvisitPath(path1);\n\t\t\t\t\tvisitPath(path2);\n\t\t\t\t\tvalid = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (valid) {\n\t\t\t\tvar first = !path,\n\t\t\t\t\tcrossings = getCrossingSegments(seg, first),\n\t\t\t\t\tother = crossings.shift(),\n\t\t\t\t\tfinished = !first && (isStart(seg) || isStart(other)),\n\t\t\t\t\tcross = !finished && other;\n\t\t\t\tif (first) {\n\t\t\t\t\tpath = new Path(Item.NO_INSERT);\n\t\t\t\t\tbranch = null;\n\t\t\t\t}\n\t\t\t\tif (finished) {\n\t\t\t\t\tif (seg.isFirst() || seg.isLast())\n\t\t\t\t\t\tclosed = seg._path._closed;\n\t\t\t\t\tseg._visited = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (cross && branch) {\n\t\t\t\t\tbranches.push(branch);\n\t\t\t\t\tbranch = null;\n\t\t\t\t}\n\t\t\t\tif (!branch) {\n\t\t\t\t\tif (cross)\n\t\t\t\t\t\tcrossings.push(seg);\n\t\t\t\t\tbranch = {\n\t\t\t\t\t\tstart: path._segments.length,\n\t\t\t\t\t\tcrossings: crossings,\n\t\t\t\t\t\tvisited: visited = [],\n\t\t\t\t\t\thandleIn: handleIn\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (cross)\n\t\t\t\t\tseg = other;\n\t\t\t\tif (!isValid(seg)) {\n\t\t\t\t\tpath.removeSegments(branch.start);\n\t\t\t\t\tfor (var j = 0, k = visited.length; j < k; j++) {\n\t\t\t\t\t\tvisited[j]._visited = false;\n\t\t\t\t\t}\n\t\t\t\t\tvisited.length = 0;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tseg = branch && branch.crossings.shift();\n\t\t\t\t\t\tif (!seg || !seg._path) {\n\t\t\t\t\t\t\tseg = null;\n\t\t\t\t\t\t\tbranch = branches.pop();\n\t\t\t\t\t\t\tif (branch) {\n\t\t\t\t\t\t\t\tvisited = branch.visited;\n\t\t\t\t\t\t\t\thandleIn = branch.handleIn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (branch && !isValid(seg));\n\t\t\t\t\tif (!seg)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar next = seg.getNext();\n\t\t\t\tpath.add(new Segment(seg._point, handleIn,\n\t\t\t\t\t\tnext && seg._handleOut));\n\t\t\t\tseg._visited = true;\n\t\t\t\tvisited.push(seg);\n\t\t\t\tseg = next || seg._path.getFirstSegment();\n\t\t\t\thandleIn = next && next._handleIn;\n\t\t\t}\n\t\t\tif (finished) {\n\t\t\t\tif (closed) {\n\t\t\t\t\tpath.getFirstSegment().setHandleIn(handleIn);\n\t\t\t\t\tpath.setClosed(closed);\n\t\t\t\t}\n\t\t\t\tif (path.getArea() !== 0) {\n\t\t\t\t\tpaths.push(path);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn paths;\n\t}\n\n\treturn {\n\t\t_getWinding: function(point, dir, closed) {\n\t\t\treturn getWinding(point, this.getCurves(), dir, closed);\n\t\t},\n\n\t\tunite: function(path, options) {\n\t\t\treturn traceBoolean(this, path, 'unite', options);\n\t\t},\n\n\t\tintersect: function(path, options) {\n\t\t\treturn traceBoolean(this, path, 'intersect', options);\n\t\t},\n\n\t\tsubtract: function(path, options) {\n\t\t\treturn traceBoolean(this, path, 'subtract', options);\n\t\t},\n\n\t\texclude: function(path, options) {\n\t\t\treturn traceBoolean(this, path, 'exclude', options);\n\t\t},\n\n\t\tdivide: function(path, options) {\n\t\t\treturn options && (options.trace == false || options.stroke)\n\t\t\t\t\t? splitBoolean(this, path, 'divide')\n\t\t\t\t\t: createResult([\n\t\t\t\t\t\tthis.subtract(path, options),\n\t\t\t\t\t\tthis.intersect(path, options)\n\t\t\t\t\t], true, this, path, options);\n\t\t},\n\n\t\tresolveCrossings: function() {\n\t\t\tvar children = this._children,\n\t\t\t\tpaths = children || [this];\n\n\t\t\tfunction hasOverlap(seg, path) {\n\t\t\t\tvar inter = seg && seg._intersection;\n\t\t\t\treturn inter && inter._overlap && inter._path === path;\n\t\t\t}\n\n\t\t\tvar hasOverlaps = false,\n\t\t\t\thasCrossings = false,\n\t\t\t\tintersections = this.getIntersections(null, function(inter) {\n\t\t\t\t\treturn inter.hasOverlap() && (hasOverlaps = true) ||\n\t\t\t\t\t\t\tinter.isCrossing() && (hasCrossings = true);\n\t\t\t\t}),\n\t\t\t\tclearCurves = hasOverlaps && hasCrossings && [];\n\t\t\tintersections = CurveLocation.expand(intersections);\n\t\t\tif (hasOverlaps) {\n\t\t\t\tvar overlaps = divideLocations(intersections, function(inter) {\n\t\t\t\t\treturn inter.hasOverlap();\n\t\t\t\t}, clearCurves);\n\t\t\t\tfor (var i = overlaps.length - 1; i >= 0; i--) {\n\t\t\t\t\tvar overlap = overlaps[i],\n\t\t\t\t\t\tpath = overlap._path,\n\t\t\t\t\t\tseg = overlap._segment,\n\t\t\t\t\t\tprev = seg.getPrevious(),\n\t\t\t\t\t\tnext = seg.getNext();\n\t\t\t\t\tif (hasOverlap(prev, path) && hasOverlap(next, path)) {\n\t\t\t\t\t\tseg.remove();\n\t\t\t\t\t\tprev._handleOut._set(0, 0);\n\t\t\t\t\t\tnext._handleIn._set(0, 0);\n\t\t\t\t\t\tif (prev !== seg && !prev.getCurve().hasLength()) {\n\t\t\t\t\t\t\tnext._handleIn.set(prev._handleIn);\n\t\t\t\t\t\t\tprev.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hasCrossings) {\n\t\t\t\tdivideLocations(intersections, hasOverlaps && function(inter) {\n\t\t\t\t\tvar curve1 = inter.getCurve(),\n\t\t\t\t\t\tseg1 = inter.getSegment(),\n\t\t\t\t\t\tother = inter._intersection,\n\t\t\t\t\t\tcurve2 = other._curve,\n\t\t\t\t\t\tseg2 = other._segment;\n\t\t\t\t\tif (curve1 && curve2 && curve1._path && curve2._path)\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tif (seg1)\n\t\t\t\t\t\tseg1._intersection = null;\n\t\t\t\t\tif (seg2)\n\t\t\t\t\t\tseg2._intersection = null;\n\t\t\t\t}, clearCurves);\n\t\t\t\tif (clearCurves)\n\t\t\t\t\tclearCurveHandles(clearCurves);\n\t\t\t\tpaths = tracePaths(Base.each(paths, function(path) {\n\t\t\t\t\tthis.push.apply(this, path._segments);\n\t\t\t\t}, []));\n\t\t\t}\n\t\t\tvar length = paths.length,\n\t\t\t\titem;\n\t\t\tif (length > 1 && children) {\n\t\t\t\tif (paths !== children)\n\t\t\t\t\tthis.setChildren(paths);\n\t\t\t\titem = this;\n\t\t\t} else if (length === 1 && !children) {\n\t\t\t\tif (paths[0] !== this)\n\t\t\t\t\tthis.setSegments(paths[0].removeSegments());\n\t\t\t\titem = this;\n\t\t\t}\n\t\t\tif (!item) {\n\t\t\t\titem = new CompoundPath(Item.NO_INSERT);\n\t\t\t\titem.addChildren(paths);\n\t\t\t\titem = item.reduce();\n\t\t\t\titem.copyAttributes(this);\n\t\t\t\tthis.replaceWith(item);\n\t\t\t}\n\t\t\treturn item;\n\t\t},\n\n\t\treorient: function(nonZero, clockwise) {\n\t\t\tvar children = this._children;\n\t\t\tif (children && children.length) {\n\t\t\t\tthis.setChildren(reorientPaths(this.removeChildren(),\n\t\t\t\t\t\tfunction(w) {\n\t\t\t\t\t\t\treturn !!(nonZero ? w : w & 1);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclockwise));\n\t\t\t} else if (clockwise !== undefined) {\n\t\t\t\tthis.setClockwise(clockwise);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\n\t\tgetInteriorPoint: function() {\n\t\t\tvar bounds = this.getBounds(),\n\t\t\t\tpoint = bounds.getCenter(true);\n\t\t\tif (!this.contains(point)) {\n\t\t\t\tvar curves = this.getCurves(),\n\t\t\t\t\ty = point.y,\n\t\t\t\t\tintercepts = [],\n\t\t\t\t\troots = [];\n\t\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\t\tvar v = curves[i].getValues(),\n\t\t\t\t\t\to0 = v[1],\n\t\t\t\t\t\to1 = v[3],\n\t\t\t\t\t\to2 = v[5],\n\t\t\t\t\t\to3 = v[7];\n\t\t\t\t\tif (y >= min(o0, o1, o2, o3) && y <= max(o0, o1, o2, o3)) {\n\t\t\t\t\t\tvar monoCurves = Curve.getMonoCurves(v);\n\t\t\t\t\t\tfor (var j = 0, m = monoCurves.length; j < m; j++) {\n\t\t\t\t\t\t\tvar mv = monoCurves[j],\n\t\t\t\t\t\t\t\tmo0 = mv[1],\n\t\t\t\t\t\t\t\tmo3 = mv[7];\n\t\t\t\t\t\t\tif ((mo0 !== mo3) &&\n\t\t\t\t\t\t\t\t(y >= mo0 && y <= mo3 || y >= mo3 && y <= mo0)){\n\t\t\t\t\t\t\t\tvar x = y === mo0 ? mv[0]\n\t\t\t\t\t\t\t\t\t: y === mo3 ? mv[6]\n\t\t\t\t\t\t\t\t\t: Curve.solveCubic(mv, 1, y, roots, 0, 1)\n\t\t\t\t\t\t\t\t\t\t=== 1\n\t\t\t\t\t\t\t\t\t\t? Curve.getPoint(mv, roots[0]).x\n\t\t\t\t\t\t\t\t\t\t: (mv[0] + mv[6]) / 2;\n\t\t\t\t\t\t\t\tintercepts.push(x);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (intercepts.length > 1) {\n\t\t\t\t\tintercepts.sort(function(a, b) { return a - b; });\n\t\t\t\t\tpoint.x = (intercepts[0] + intercepts[1]) / 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn point;\n\t\t}\n\t};\n});\n\nvar PathFlattener = Base.extend({\n\t_class: 'PathFlattener',\n\n\tinitialize: function(path, flatness, maxRecursion, ignoreStraight, matrix) {\n\t\tvar curves = [],\n\t\t\tparts = [],\n\t\t\tlength = 0,\n\t\t\tminSpan = 1 / (maxRecursion || 32),\n\t\t\tsegments = path._segments,\n\t\t\tsegment1 = segments[0],\n\t\t\tsegment2;\n\n\t\tfunction addCurve(segment1, segment2) {\n\t\t\tvar curve = Curve.getValues(segment1, segment2, matrix);\n\t\t\tcurves.push(curve);\n\t\t\tcomputeParts(curve, segment1._index, 0, 1);\n\t\t}\n\n\t\tfunction computeParts(curve, index, t1, t2) {\n\t\t\tif ((t2 - t1) > minSpan\n\t\t\t\t\t&& !(ignoreStraight && Curve.isStraight(curve))\n\t\t\t\t\t&& !Curve.isFlatEnough(curve, flatness || 0.25)) {\n\t\t\t\tvar halves = Curve.subdivide(curve, 0.5),\n\t\t\t\t\ttMid = (t1 + t2) / 2;\n\t\t\t\tcomputeParts(halves[0], index, t1, tMid);\n\t\t\t\tcomputeParts(halves[1], index, tMid, t2);\n\t\t\t} else {\n\t\t\t\tvar dx = curve[6] - curve[0],\n\t\t\t\t\tdy = curve[7] - curve[1],\n\t\t\t\t\tdist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tif (dist > 0) {\n\t\t\t\t\tlength += dist;\n\t\t\t\t\tparts.push({\n\t\t\t\t\t\toffset: length,\n\t\t\t\t\t\tcurve: curve,\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\ttime: t2,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 1, l = segments.length; i < l; i++) {\n\t\t\tsegment2 = segments[i];\n\t\t\taddCurve(segment1, segment2);\n\t\t\tsegment1 = segment2;\n\t\t}\n\t\tif (path._closed)\n\t\t\taddCurve(segment2, segments[0]);\n\t\tthis.curves = curves;\n\t\tthis.parts = parts;\n\t\tthis.length = length;\n\t\tthis.index = 0;\n\t},\n\n\t_get: function(offset) {\n\t\tvar parts = this.parts,\n\t\t\tlength = parts.length,\n\t\t\tstart,\n\t\t\ti, j = this.index;\n\t\tfor (;;) {\n\t\t\ti = j;\n\t\t\tif (!j || parts[--j].offset < offset)\n\t\t\t\tbreak;\n\t\t}\n\t\tfor (; i < length; i++) {\n\t\t\tvar part = parts[i];\n\t\t\tif (part.offset >= offset) {\n\t\t\t\tthis.index = i;\n\t\t\t\tvar prev = parts[i - 1],\n\t\t\t\t\tprevTime = prev && prev.index === part.index ? prev.time : 0,\n\t\t\t\t\tprevOffset = prev ? prev.offset : 0;\n\t\t\t\treturn {\n\t\t\t\t\tindex: part.index,\n\t\t\t\t\ttime: prevTime + (part.time - prevTime)\n\t\t\t\t\t\t* (offset - prevOffset) / (part.offset - prevOffset)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tindex: parts[length - 1].index,\n\t\t\ttime: 1\n\t\t};\n\t},\n\n\tdrawPart: function(ctx, from, to) {\n\t\tvar start = this._get(from),\n\t\t\tend = this._get(to);\n\t\tfor (var i = start.index, l = end.index; i <= l; i++) {\n\t\t\tvar curve = Curve.getPart(this.curves[i],\n\t\t\t\t\ti === start.index ? start.time : 0,\n\t\t\t\t\ti === end.index ? end.time : 1);\n\t\t\tif (i === start.index)\n\t\t\t\tctx.moveTo(curve[0], curve[1]);\n\t\t\tctx.bezierCurveTo.apply(ctx, curve.slice(2));\n\t\t}\n\t}\n}, Base.each(Curve._evaluateMethods,\n\tfunction(name) {\n\t\tthis[name + 'At'] = function(offset) {\n\t\t\tvar param = this._get(offset);\n\t\t\treturn Curve[name](this.curves[param.index], param.time);\n\t\t};\n\t}, {})\n);\n\nvar PathFitter = Base.extend({\n\tinitialize: function(path) {\n\t\tvar points = this.points = [],\n\t\t\tsegments = path._segments,\n\t\t\tclosed = path._closed;\n\t\tfor (var i = 0, prev, l = segments.length; i < l; i++) {\n\t\t\tvar point = segments[i].point;\n\t\t\tif (!prev || !prev.equals(point)) {\n\t\t\t\tpoints.push(prev = point.clone());\n\t\t\t}\n\t\t}\n\t\tif (closed) {\n\t\t\tpoints.unshift(points[points.length - 1]);\n\t\t\tpoints.push(points[1]);\n\t\t}\n\t\tthis.closed = closed;\n\t},\n\n\tfit: function(error) {\n\t\tvar points = this.points,\n\t\t\tlength = points.length,\n\t\t\tsegments = null;\n\t\tif (length > 0) {\n\t\t\tsegments = [new Segment(points[0])];\n\t\t\tif (length > 1) {\n\t\t\t\tthis.fitCubic(segments, error, 0, length - 1,\n\t\t\t\t\t\tpoints[1].subtract(points[0]),\n\t\t\t\t\t\tpoints[length - 2].subtract(points[length - 1]));\n\t\t\t\tif (this.closed) {\n\t\t\t\t\tsegments.shift();\n\t\t\t\t\tsegments.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn segments;\n\t},\n\n\tfitCubic: function(segments, error, first, last, tan1, tan2) {\n\t\tvar points = this.points;\n\t\tif (last - first === 1) {\n\t\t\tvar pt1 = points[first],\n\t\t\t\tpt2 = points[last],\n\t\t\t\tdist = pt1.getDistance(pt2) / 3;\n\t\t\tthis.addCurve(segments, [pt1, pt1.add(tan1.normalize(dist)),\n\t\t\t\t\tpt2.add(tan2.normalize(dist)), pt2]);\n\t\t\treturn;\n\t\t}\n\t\tvar uPrime = this.chordLengthParameterize(first, last),\n\t\t\tmaxError = Math.max(error, error * error),\n\t\t\tsplit,\n\t\t\tparametersInOrder = true;\n\t\tfor (var i = 0; i <= 4; i++) {\n\t\t\tvar curve = this.generateBezier(first, last, uPrime, tan1, tan2);\n\t\t\tvar max = this.findMaxError(first, last, curve, uPrime);\n\t\t\tif (max.error < error && parametersInOrder) {\n\t\t\t\tthis.addCurve(segments, curve);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsplit = max.index;\n\t\t\tif (max.error >= maxError)\n\t\t\t\tbreak;\n\t\t\tparametersInOrder = this.reparameterize(first, last, uPrime, curve);\n\t\t\tmaxError = max.error;\n\t\t}\n\t\tvar tanCenter = points[split - 1].subtract(points[split + 1]);\n\t\tthis.fitCubic(segments, error, first, split, tan1, tanCenter);\n\t\tthis.fitCubic(segments, error, split, last, tanCenter.negate(), tan2);\n\t},\n\n\taddCurve: function(segments, curve) {\n\t\tvar prev = segments[segments.length - 1];\n\t\tprev.setHandleOut(curve[1].subtract(curve[0]));\n\t\tsegments.push(new Segment(curve[3], curve[2].subtract(curve[3])));\n\t},\n\n\tgenerateBezier: function(first, last, uPrime, tan1, tan2) {\n\t\tvar epsilon = 1e-12,\n\t\t\tabs = Math.abs,\n\t\t\tpoints = this.points,\n\t\t\tpt1 = points[first],\n\t\t\tpt2 = points[last],\n\t\t\tC = [[0, 0], [0, 0]],\n\t\t\tX = [0, 0];\n\n\t\tfor (var i = 0, l = last - first + 1; i < l; i++) {\n\t\t\tvar u = uPrime[i],\n\t\t\t\tt = 1 - u,\n\t\t\t\tb = 3 * u * t,\n\t\t\t\tb0 = t * t * t,\n\t\t\t\tb1 = b * t,\n\t\t\t\tb2 = b * u,\n\t\t\t\tb3 = u * u * u,\n\t\t\t\ta1 = tan1.normalize(b1),\n\t\t\t\ta2 = tan2.normalize(b2),\n\t\t\t\ttmp = points[first + i]\n\t\t\t\t\t.subtract(pt1.multiply(b0 + b1))\n\t\t\t\t\t.subtract(pt2.multiply(b2 + b3));\n\t\t\tC[0][0] += a1.dot(a1);\n\t\t\tC[0][1] += a1.dot(a2);\n\t\t\tC[1][0] = C[0][1];\n\t\t\tC[1][1] += a2.dot(a2);\n\t\t\tX[0] += a1.dot(tmp);\n\t\t\tX[1] += a2.dot(tmp);\n\t\t}\n\n\t\tvar detC0C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1],\n\t\t\talpha1,\n\t\t\talpha2;\n\t\tif (abs(detC0C1) > epsilon) {\n\t\t\tvar detC0X = C[0][0] * X[1]    - C[1][0] * X[0],\n\t\t\t\tdetXC1 = X[0]    * C[1][1] - X[1]    * C[0][1];\n\t\t\talpha1 = detXC1 / detC0C1;\n\t\t\talpha2 = detC0X / detC0C1;\n\t\t} else {\n\t\t\tvar c0 = C[0][0] + C[0][1],\n\t\t\t\tc1 = C[1][0] + C[1][1];\n\t\t\talpha1 = alpha2 = abs(c0) > epsilon ? X[0] / c0\n\t\t\t\t\t\t\t: abs(c1) > epsilon ? X[1] / c1\n\t\t\t\t\t\t\t: 0;\n\t\t}\n\n\t\tvar segLength = pt2.getDistance(pt1),\n\t\t\teps = epsilon * segLength,\n\t\t\thandle1,\n\t\t\thandle2;\n\t\tif (alpha1 < eps || alpha2 < eps) {\n\t\t\talpha1 = alpha2 = segLength / 3;\n\t\t} else {\n\t\t\tvar line = pt2.subtract(pt1);\n\t\t\thandle1 = tan1.normalize(alpha1);\n\t\t\thandle2 = tan2.normalize(alpha2);\n\t\t\tif (handle1.dot(line) - handle2.dot(line) > segLength * segLength) {\n\t\t\t\talpha1 = alpha2 = segLength / 3;\n\t\t\t\thandle1 = handle2 = null;\n\t\t\t}\n\t\t}\n\n\t\treturn [pt1,\n\t\t\t\tpt1.add(handle1 || tan1.normalize(alpha1)),\n\t\t\t\tpt2.add(handle2 || tan2.normalize(alpha2)),\n\t\t\t\tpt2];\n\t},\n\n\treparameterize: function(first, last, u, curve) {\n\t\tfor (var i = first; i <= last; i++) {\n\t\t\tu[i - first] = this.findRoot(curve, this.points[i], u[i - first]);\n\t\t}\n\t\tfor (var i = 1, l = u.length; i < l; i++) {\n\t\t\tif (u[i] <= u[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\tfindRoot: function(curve, point, u) {\n\t\tvar curve1 = [],\n\t\t\tcurve2 = [];\n\t\tfor (var i = 0; i <= 2; i++) {\n\t\t\tcurve1[i] = curve[i + 1].subtract(curve[i]).multiply(3);\n\t\t}\n\t\tfor (var i = 0; i <= 1; i++) {\n\t\t\tcurve2[i] = curve1[i + 1].subtract(curve1[i]).multiply(2);\n\t\t}\n\t\tvar pt = this.evaluate(3, curve, u),\n\t\t\tpt1 = this.evaluate(2, curve1, u),\n\t\t\tpt2 = this.evaluate(1, curve2, u),\n\t\t\tdiff = pt.subtract(point),\n\t\t\tdf = pt1.dot(pt1) + diff.dot(pt2);\n\t\treturn Numerical.isZero(df) ? u : u - diff.dot(pt1) / df;\n\t},\n\n\tevaluate: function(degree, curve, t) {\n\t\tvar tmp = curve.slice();\n\t\tfor (var i = 1; i <= degree; i++) {\n\t\t\tfor (var j = 0; j <= degree - i; j++) {\n\t\t\t\ttmp[j] = tmp[j].multiply(1 - t).add(tmp[j + 1].multiply(t));\n\t\t\t}\n\t\t}\n\t\treturn tmp[0];\n\t},\n\n\tchordLengthParameterize: function(first, last) {\n\t\tvar u = [0];\n\t\tfor (var i = first + 1; i <= last; i++) {\n\t\t\tu[i - first] = u[i - first - 1]\n\t\t\t\t\t+ this.points[i].getDistance(this.points[i - 1]);\n\t\t}\n\t\tfor (var i = 1, m = last - first; i <= m; i++) {\n\t\t\tu[i] /= u[m];\n\t\t}\n\t\treturn u;\n\t},\n\n\tfindMaxError: function(first, last, curve, u) {\n\t\tvar index = Math.floor((last - first + 1) / 2),\n\t\t\tmaxDist = 0;\n\t\tfor (var i = first + 1; i < last; i++) {\n\t\t\tvar P = this.evaluate(3, curve, u[i - first]);\n\t\t\tvar v = P.subtract(this.points[i]);\n\t\t\tvar dist = v.x * v.x + v.y * v.y;\n\t\t\tif (dist >= maxDist) {\n\t\t\t\tmaxDist = dist;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\terror: maxDist,\n\t\t\tindex: index\n\t\t};\n\t}\n});\n\nvar TextItem = Item.extend({\n\t_class: 'TextItem',\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_serializeFields: {\n\t\tcontent: null\n\t},\n\t_boundsOptions: { stroke: false, handle: false },\n\n\tinitialize: function TextItem(arg) {\n\t\tthis._content = '';\n\t\tthis._lines = [];\n\t\tvar hasProps = arg && Base.isPlainObject(arg)\n\t\t\t\t&& arg.x === undefined && arg.y === undefined;\n\t\tthis._initialize(hasProps && arg, !hasProps && Point.read(arguments));\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._content === item._content;\n\t},\n\n\tcopyContent: function(source) {\n\t\tthis.setContent(source._content);\n\t},\n\n\tgetContent: function() {\n\t\treturn this._content;\n\t},\n\n\tsetContent: function(content) {\n\t\tthis._content = '' + content;\n\t\tthis._lines = this._content.split(/\\r\\n|\\n|\\r/mg);\n\t\tthis._changed(265);\n\t},\n\n\tisEmpty: function() {\n\t\treturn !this._content;\n\t},\n\n\tgetCharacterStyle: '#getStyle',\n\tsetCharacterStyle: '#setStyle',\n\n\tgetParagraphStyle: '#getStyle',\n\tsetParagraphStyle: '#setStyle'\n});\n\nvar PointText = TextItem.extend({\n\t_class: 'PointText',\n\n\tinitialize: function PointText() {\n\t\tTextItem.apply(this, arguments);\n\t},\n\n\tgetPoint: function() {\n\t\tvar point = this._matrix.getTranslation();\n\t\treturn new LinkedPoint(point.x, point.y, this, 'setPoint');\n\t},\n\n\tsetPoint: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis.translate(point.subtract(this._matrix.getTranslation()));\n\t},\n\n\t_draw: function(ctx, param, viewMatrix) {\n\t\tif (!this._content)\n\t\t\treturn;\n\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\tvar lines = this._lines,\n\t\t\tstyle = this._style,\n\t\t\thasFill = style.hasFill(),\n\t\t\thasStroke = style.hasStroke(),\n\t\t\tleading = style.getLeading(),\n\t\t\tshadowColor = ctx.shadowColor;\n\t\tctx.font = style.getFontStyle();\n\t\tctx.textAlign = style.getJustification();\n\t\tfor (var i = 0, l = lines.length; i < l; i++) {\n\t\t\tctx.shadowColor = shadowColor;\n\t\t\tvar line = lines[i];\n\t\t\tif (hasFill) {\n\t\t\t\tctx.fillText(line, 0, 0);\n\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t}\n\t\t\tif (hasStroke)\n\t\t\t\tctx.strokeText(line, 0, 0);\n\t\t\tctx.translate(0, leading);\n\t\t}\n\t},\n\n\t_getBounds: function(matrix, options) {\n\t\tvar style = this._style,\n\t\t\tlines = this._lines,\n\t\t\tnumLines = lines.length,\n\t\t\tjustification = style.getJustification(),\n\t\t\tleading = style.getLeading(),\n\t\t\twidth = this.getView().getTextWidth(style.getFontStyle(), lines),\n\t\t\tx = 0;\n\t\tif (justification !== 'left')\n\t\t\tx -= width / (justification === 'center' ? 2: 1);\n\t\tvar rect = new Rectangle(x,\n\t\t\t\t\tnumLines ? - 0.75 * leading : 0,\n\t\t\t\t\twidth, numLines * leading);\n\t\treturn matrix ? matrix._transformBounds(rect, rect) : rect;\n\t}\n});\n\nvar Color = Base.extend(new function() {\n\tvar types = {\n\t\tgray: ['gray'],\n\t\trgb: ['red', 'green', 'blue'],\n\t\thsb: ['hue', 'saturation', 'brightness'],\n\t\thsl: ['hue', 'saturation', 'lightness'],\n\t\tgradient: ['gradient', 'origin', 'destination', 'highlight']\n\t};\n\n\tvar componentParsers = {},\n\t\tcolorCache = {},\n\t\tcolorCtx;\n\n\tfunction fromCSS(string) {\n\t\tvar match = string.match(/^#(\\w{1,2})(\\w{1,2})(\\w{1,2})$/),\n\t\t\tcomponents;\n\t\tif (match) {\n\t\t\tcomponents = [0, 0, 0];\n\t\t\tfor (var i = 0; i < 3; i++) {\n\t\t\t\tvar value = match[i + 1];\n\t\t\t\tcomponents[i] = parseInt(value.length == 1\n\t\t\t\t\t\t? value + value : value, 16) / 255;\n\t\t\t}\n\t\t} else if (match = string.match(/^rgba?\\((.*)\\)$/)) {\n\t\t\tcomponents = match[1].split(',');\n\t\t\tfor (var i = 0, l = components.length; i < l; i++) {\n\t\t\t\tvar value = +components[i];\n\t\t\t\tcomponents[i] = i < 3 ? value / 255 : value;\n\t\t\t}\n\t\t} else if (window) {\n\t\t\tvar cached = colorCache[string];\n\t\t\tif (!cached) {\n\t\t\t\tif (!colorCtx) {\n\t\t\t\t\tcolorCtx = CanvasProvider.getContext(1, 1);\n\t\t\t\t\tcolorCtx.globalCompositeOperation = 'copy';\n\t\t\t\t}\n\t\t\t\tcolorCtx.fillStyle = 'rgba(0,0,0,0)';\n\t\t\t\tcolorCtx.fillStyle = string;\n\t\t\t\tcolorCtx.fillRect(0, 0, 1, 1);\n\t\t\t\tvar data = colorCtx.getImageData(0, 0, 1, 1).data;\n\t\t\t\tcached = colorCache[string] = [\n\t\t\t\t\tdata[0] / 255,\n\t\t\t\t\tdata[1] / 255,\n\t\t\t\t\tdata[2] / 255\n\t\t\t\t];\n\t\t\t}\n\t\t\tcomponents = cached.slice();\n\t\t} else {\n\t\t\tcomponents = [0, 0, 0];\n\t\t}\n\t\treturn components;\n\t}\n\n\tvar hsbIndices = [\n\t\t[0, 3, 1],\n\t\t[2, 0, 1],\n\t\t[1, 0, 3],\n\t\t[1, 2, 0],\n\t\t[3, 1, 0],\n\t\t[0, 1, 2]\n\t];\n\n\tvar converters = {\n\t\t'rgb-hsb': function(r, g, b) {\n\t\t\tvar max = Math.max(r, g, b),\n\t\t\t\tmin = Math.min(r, g, b),\n\t\t\t\tdelta = max - min,\n\t\t\t\th = delta === 0 ? 0\n\t\t\t\t\t:   ( max == r ? (g - b) / delta + (g < b ? 6 : 0)\n\t\t\t\t\t\t: max == g ? (b - r) / delta + 2\n\t\t\t\t\t\t:            (r - g) / delta + 4) * 60;\n\t\t\treturn [h, max === 0 ? 0 : delta / max, max];\n\t\t},\n\n\t\t'hsb-rgb': function(h, s, b) {\n\t\t\th = (((h / 60) % 6) + 6) % 6;\n\t\t\tvar i = Math.floor(h),\n\t\t\t\tf = h - i,\n\t\t\t\ti = hsbIndices[i],\n\t\t\t\tv = [\n\t\t\t\t\tb,\n\t\t\t\t\tb * (1 - s),\n\t\t\t\t\tb * (1 - s * f),\n\t\t\t\t\tb * (1 - s * (1 - f))\n\t\t\t\t];\n\t\t\treturn [v[i[0]], v[i[1]], v[i[2]]];\n\t\t},\n\n\t\t'rgb-hsl': function(r, g, b) {\n\t\t\tvar max = Math.max(r, g, b),\n\t\t\t\tmin = Math.min(r, g, b),\n\t\t\t\tdelta = max - min,\n\t\t\t\tachromatic = delta === 0,\n\t\t\t\th = achromatic ? 0\n\t\t\t\t\t:   ( max == r ? (g - b) / delta + (g < b ? 6 : 0)\n\t\t\t\t\t\t: max == g ? (b - r) / delta + 2\n\t\t\t\t\t\t:            (r - g) / delta + 4) * 60,\n\t\t\t\tl = (max + min) / 2,\n\t\t\t\ts = achromatic ? 0 : l < 0.5\n\t\t\t\t\t\t? delta / (max + min)\n\t\t\t\t\t\t: delta / (2 - max - min);\n\t\t\treturn [h, s, l];\n\t\t},\n\n\t\t'hsl-rgb': function(h, s, l) {\n\t\t\th = (((h / 360) % 1) + 1) % 1;\n\t\t\tif (s === 0)\n\t\t\t\treturn [l, l, l];\n\t\t\tvar t3s = [ h + 1 / 3, h, h - 1 / 3 ],\n\t\t\t\tt2 = l < 0.5 ? l * (1 + s) : l + s - l * s,\n\t\t\t\tt1 = 2 * l - t2,\n\t\t\t\tc = [];\n\t\t\tfor (var i = 0; i < 3; i++) {\n\t\t\t\tvar t3 = t3s[i];\n\t\t\t\tif (t3 < 0) t3 += 1;\n\t\t\t\tif (t3 > 1) t3 -= 1;\n\t\t\t\tc[i] = 6 * t3 < 1\n\t\t\t\t\t? t1 + (t2 - t1) * 6 * t3\n\t\t\t\t\t: 2 * t3 < 1\n\t\t\t\t\t\t? t2\n\t\t\t\t\t\t: 3 * t3 < 2\n\t\t\t\t\t\t\t? t1 + (t2 - t1) * ((2 / 3) - t3) * 6\n\t\t\t\t\t\t\t: t1;\n\t\t\t}\n\t\t\treturn c;\n\t\t},\n\n\t\t'rgb-gray': function(r, g, b) {\n\t\t\treturn [r * 0.2989 + g * 0.587 + b * 0.114];\n\t\t},\n\n\t\t'gray-rgb': function(g) {\n\t\t\treturn [g, g, g];\n\t\t},\n\n\t\t'gray-hsb': function(g) {\n\t\t\treturn [0, 0, g];\n\t\t},\n\n\t\t'gray-hsl': function(g) {\n\t\t\treturn [0, 0, g];\n\t\t},\n\n\t\t'gradient-rgb': function() {\n\t\t\treturn [];\n\t\t},\n\n\t\t'rgb-gradient': function() {\n\t\t\treturn [];\n\t\t}\n\n\t};\n\n\treturn Base.each(types, function(properties, type) {\n\t\tcomponentParsers[type] = [];\n\t\tBase.each(properties, function(name, index) {\n\t\t\tvar part = Base.capitalize(name),\n\t\t\t\thasOverlap = /^(hue|saturation)$/.test(name),\n\t\t\t\tparser = componentParsers[type][index] = name === 'gradient'\n\t\t\t\t\t? function(value) {\n\t\t\t\t\t\tvar current = this._components[0];\n\t\t\t\t\t\tvalue = Gradient.read(Array.isArray(value) ? value\n\t\t\t\t\t\t\t\t: arguments, 0, { readNull: true });\n\t\t\t\t\t\tif (current !== value) {\n\t\t\t\t\t\t\tif (current)\n\t\t\t\t\t\t\t\tcurrent._removeOwner(this);\n\t\t\t\t\t\t\tif (value)\n\t\t\t\t\t\t\t\tvalue._addOwner(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t\t: type === 'gradient'\n\t\t\t\t\t\t? function() {\n\t\t\t\t\t\t\treturn Point.read(arguments, 0, {\n\t\t\t\t\t\t\t\t\treadNull: name === 'highlight',\n\t\t\t\t\t\t\t\t\tclone: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t: function(value) {\n\t\t\t\t\t\t\treturn value == null || isNaN(value) ? 0 : value;\n\t\t\t\t\t\t};\n\n\t\t\tthis['get' + part] = function() {\n\t\t\t\treturn this._type === type\n\t\t\t\t\t|| hasOverlap && /^hs[bl]$/.test(this._type)\n\t\t\t\t\t\t? this._components[index]\n\t\t\t\t\t\t: this._convert(type)[index];\n\t\t\t};\n\n\t\t\tthis['set' + part] = function(value) {\n\t\t\t\tif (this._type !== type\n\t\t\t\t\t\t&& !(hasOverlap && /^hs[bl]$/.test(this._type))) {\n\t\t\t\t\tthis._components = this._convert(type);\n\t\t\t\t\tthis._properties = types[type];\n\t\t\t\t\tthis._type = type;\n\t\t\t\t}\n\t\t\t\tthis._components[index] = parser.call(this, value);\n\t\t\t\tthis._changed();\n\t\t\t};\n\t\t}, this);\n\t}, {\n\t\t_class: 'Color',\n\t\t_readIndex: true,\n\n\t\tinitialize: function Color(arg) {\n\t\t\tvar args = arguments,\n\t\t\t\treading = this.__read,\n\t\t\t\tread = 0,\n\t\t\t\ttype,\n\t\t\t\tcomponents,\n\t\t\t\talpha,\n\t\t\t\tvalues;\n\t\t\tif (Array.isArray(arg)) {\n\t\t\t\targs = arg;\n\t\t\t\targ = args[0];\n\t\t\t}\n\t\t\tvar argType = arg != null && typeof arg;\n\t\t\tif (argType === 'string' && arg in types) {\n\t\t\t\ttype = arg;\n\t\t\t\targ = args[1];\n\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\tcomponents = arg;\n\t\t\t\t\talpha = args[2];\n\t\t\t\t} else {\n\t\t\t\t\tif (reading)\n\t\t\t\t\t\tread = 1;\n\t\t\t\t\targs = Base.slice(args, 1);\n\t\t\t\t\targType = typeof arg;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!components) {\n\t\t\t\tvalues = argType === 'number'\n\t\t\t\t\t\t? args\n\t\t\t\t\t\t: argType === 'object' && arg.length != null\n\t\t\t\t\t\t\t? arg\n\t\t\t\t\t\t\t: null;\n\t\t\t\tif (values) {\n\t\t\t\t\tif (!type)\n\t\t\t\t\t\ttype = values.length >= 3\n\t\t\t\t\t\t\t\t? 'rgb'\n\t\t\t\t\t\t\t\t: 'gray';\n\t\t\t\t\tvar length = types[type].length;\n\t\t\t\t\talpha = values[length];\n\t\t\t\t\tif (reading) {\n\t\t\t\t\t\tread += values === arguments\n\t\t\t\t\t\t\t? length + (alpha != null ? 1 : 0)\n\t\t\t\t\t\t\t: 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (values.length > length)\n\t\t\t\t\t\tvalues = Base.slice(values, 0, length);\n\t\t\t\t} else if (argType === 'string') {\n\t\t\t\t\ttype = 'rgb';\n\t\t\t\t\tcomponents = fromCSS(arg);\n\t\t\t\t\tif (components.length === 4) {\n\t\t\t\t\t\talpha = components[3];\n\t\t\t\t\t\tcomponents.length--;\n\t\t\t\t\t}\n\t\t\t\t} else if (argType === 'object') {\n\t\t\t\t\tif (arg.constructor === Color) {\n\t\t\t\t\t\ttype = arg._type;\n\t\t\t\t\t\tcomponents = arg._components.slice();\n\t\t\t\t\t\talpha = arg._alpha;\n\t\t\t\t\t\tif (type === 'gradient') {\n\t\t\t\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {\n\t\t\t\t\t\t\t\tvar point = components[i];\n\t\t\t\t\t\t\t\tif (point)\n\t\t\t\t\t\t\t\t\tcomponents[i] = point.clone();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (arg.constructor === Gradient) {\n\t\t\t\t\t\ttype = 'gradient';\n\t\t\t\t\t\tvalues = args;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = 'hue' in arg\n\t\t\t\t\t\t\t? 'lightness' in arg\n\t\t\t\t\t\t\t\t? 'hsl'\n\t\t\t\t\t\t\t\t: 'hsb'\n\t\t\t\t\t\t\t: 'gradient' in arg || 'stops' in arg\n\t\t\t\t\t\t\t\t\t|| 'radial' in arg\n\t\t\t\t\t\t\t\t? 'gradient'\n\t\t\t\t\t\t\t\t: 'gray' in arg\n\t\t\t\t\t\t\t\t\t? 'gray'\n\t\t\t\t\t\t\t\t\t: 'rgb';\n\t\t\t\t\t\tvar properties = types[type],\n\t\t\t\t\t\t\tparsers = componentParsers[type];\n\t\t\t\t\t\tthis._components = components = [];\n\t\t\t\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {\n\t\t\t\t\t\t\tvar value = arg[properties[i]];\n\t\t\t\t\t\t\tif (value == null && !i && type === 'gradient'\n\t\t\t\t\t\t\t\t\t&& 'stops' in arg) {\n\t\t\t\t\t\t\t\tvalue = {\n\t\t\t\t\t\t\t\t\tstops: arg.stops,\n\t\t\t\t\t\t\t\t\tradial: arg.radial\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvalue = parsers[i].call(this, value);\n\t\t\t\t\t\t\tif (value != null)\n\t\t\t\t\t\t\t\tcomponents[i] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\talpha = arg.alpha;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (reading && type)\n\t\t\t\t\tread = 1;\n\t\t\t}\n\t\t\tthis._type = type || 'rgb';\n\t\t\tif (!components) {\n\t\t\t\tthis._components = components = [];\n\t\t\t\tvar parsers = componentParsers[this._type];\n\t\t\t\tfor (var i = 0, l = parsers.length; i < l; i++) {\n\t\t\t\t\tvar value = parsers[i].call(this, values && values[i]);\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t\tcomponents[i] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._components = components;\n\t\t\tthis._properties = types[this._type];\n\t\t\tthis._alpha = alpha;\n\t\t\tif (reading)\n\t\t\t\tthis.__read = read;\n\t\t\treturn this;\n\t\t},\n\n\t\tset: '#initialize',\n\n\t\t_serialize: function(options, dictionary) {\n\t\t\tvar components = this.getComponents();\n\t\t\treturn Base.serialize(\n\t\t\t\t\t/^(gray|rgb)$/.test(this._type)\n\t\t\t\t\t\t? components\n\t\t\t\t\t\t: [this._type].concat(components),\n\t\t\t\t\toptions, true, dictionary);\n\t\t},\n\n\t\t_changed: function() {\n\t\t\tthis._canvasStyle = null;\n\t\t\tif (this._owner)\n\t\t\t\tthis._owner._changed(65);\n\t\t},\n\n\t\t_convert: function(type) {\n\t\t\tvar converter;\n\t\t\treturn this._type === type\n\t\t\t\t\t? this._components.slice()\n\t\t\t\t\t: (converter = converters[this._type + '-' + type])\n\t\t\t\t\t\t? converter.apply(this, this._components)\n\t\t\t\t\t\t: converters['rgb-' + type].apply(this,\n\t\t\t\t\t\t\tconverters[this._type + '-rgb'].apply(this,\n\t\t\t\t\t\t\t\tthis._components));\n\t\t},\n\n\t\tconvert: function(type) {\n\t\t\treturn new Color(type, this._convert(type), this._alpha);\n\t\t},\n\n\t\tgetType: function() {\n\t\t\treturn this._type;\n\t\t},\n\n\t\tsetType: function(type) {\n\t\t\tthis._components = this._convert(type);\n\t\t\tthis._properties = types[type];\n\t\t\tthis._type = type;\n\t\t},\n\n\t\tgetComponents: function() {\n\t\t\tvar components = this._components.slice();\n\t\t\tif (this._alpha != null)\n\t\t\t\tcomponents.push(this._alpha);\n\t\t\treturn components;\n\t\t},\n\n\t\tgetAlpha: function() {\n\t\t\treturn this._alpha != null ? this._alpha : 1;\n\t\t},\n\n\t\tsetAlpha: function(alpha) {\n\t\t\tthis._alpha = alpha == null ? null : Math.min(Math.max(alpha, 0), 1);\n\t\t\tthis._changed();\n\t\t},\n\n\t\thasAlpha: function() {\n\t\t\treturn this._alpha != null;\n\t\t},\n\n\t\tequals: function(color) {\n\t\t\tvar col = Base.isPlainValue(color, true)\n\t\t\t\t\t? Color.read(arguments)\n\t\t\t\t\t: color;\n\t\t\treturn col === this || col && this._class === col._class\n\t\t\t\t\t&& this._type === col._type\n\t\t\t\t\t&& this.getAlpha() === col.getAlpha()\n\t\t\t\t\t&& Base.equals(this._components, col._components)\n\t\t\t\t\t|| false;\n\t\t},\n\n\t\ttoString: function() {\n\t\t\tvar properties = this._properties,\n\t\t\t\tparts = [],\n\t\t\t\tisGradient = this._type === 'gradient',\n\t\t\t\tf = Formatter.instance;\n\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {\n\t\t\t\tvar value = this._components[i];\n\t\t\t\tif (value != null)\n\t\t\t\t\tparts.push(properties[i] + ': '\n\t\t\t\t\t\t\t+ (isGradient ? value : f.number(value)));\n\t\t\t}\n\t\t\tif (this._alpha != null)\n\t\t\t\tparts.push('alpha: ' + f.number(this._alpha));\n\t\t\treturn '{ ' + parts.join(', ') + ' }';\n\t\t},\n\n\t\ttoCSS: function(hex) {\n\t\t\tvar components = this._convert('rgb'),\n\t\t\t\talpha = hex || this._alpha == null ? 1 : this._alpha;\n\t\t\tfunction convert(val) {\n\t\t\t\treturn Math.round((val < 0 ? 0 : val > 1 ? 1 : val) * 255);\n\t\t\t}\n\t\t\tcomponents = [\n\t\t\t\tconvert(components[0]),\n\t\t\t\tconvert(components[1]),\n\t\t\t\tconvert(components[2])\n\t\t\t];\n\t\t\tif (alpha < 1)\n\t\t\t\tcomponents.push(alpha < 0 ? 0 : alpha);\n\t\t\treturn hex\n\t\t\t\t\t? '#' + ((1 << 24) + (components[0] << 16)\n\t\t\t\t\t\t+ (components[1] << 8)\n\t\t\t\t\t\t+ components[2]).toString(16).slice(1)\n\t\t\t\t\t: (components.length == 4 ? 'rgba(' : 'rgb(')\n\t\t\t\t\t\t+ components.join(',') + ')';\n\t\t},\n\n\t\ttoCanvasStyle: function(ctx, matrix) {\n\t\t\tif (this._canvasStyle)\n\t\t\t\treturn this._canvasStyle;\n\t\t\tif (this._type !== 'gradient')\n\t\t\t\treturn this._canvasStyle = this.toCSS();\n\t\t\tvar components = this._components,\n\t\t\t\tgradient = components[0],\n\t\t\t\tstops = gradient._stops,\n\t\t\t\torigin = components[1],\n\t\t\t\tdestination = components[2],\n\t\t\t\thighlight = components[3],\n\t\t\t\tinverse = matrix && matrix.inverted(),\n\t\t\t\tcanvasGradient;\n\t\t\tif (inverse) {\n\t\t\t\torigin = inverse._transformPoint(origin);\n\t\t\t\tdestination = inverse._transformPoint(destination);\n\t\t\t\tif (highlight)\n\t\t\t\t\thighlight = inverse._transformPoint(highlight);\n\t\t\t}\n\t\t\tif (gradient._radial) {\n\t\t\t\tvar radius = destination.getDistance(origin);\n\t\t\t\tif (highlight) {\n\t\t\t\t\tvar vector = highlight.subtract(origin);\n\t\t\t\t\tif (vector.getLength() > radius)\n\t\t\t\t\t\thighlight = origin.add(vector.normalize(radius - 0.1));\n\t\t\t\t}\n\t\t\t\tvar start = highlight || origin;\n\t\t\t\tcanvasGradient = ctx.createRadialGradient(start.x, start.y,\n\t\t\t\t\t\t0, origin.x, origin.y, radius);\n\t\t\t} else {\n\t\t\t\tcanvasGradient = ctx.createLinearGradient(origin.x, origin.y,\n\t\t\t\t\t\tdestination.x, destination.y);\n\t\t\t}\n\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {\n\t\t\t\tvar stop = stops[i],\n\t\t\t\t\toffset = stop._offset;\n\t\t\t\tcanvasGradient.addColorStop(\n\t\t\t\t\t\toffset == null ? i / (l - 1) : offset,\n\t\t\t\t\t\tstop._color.toCanvasStyle());\n\t\t\t}\n\t\t\treturn this._canvasStyle = canvasGradient;\n\t\t},\n\n\t\ttransform: function(matrix) {\n\t\t\tif (this._type === 'gradient') {\n\t\t\t\tvar components = this._components;\n\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {\n\t\t\t\t\tvar point = components[i];\n\t\t\t\t\tmatrix._transformPoint(point, point, true);\n\t\t\t\t}\n\t\t\t\tthis._changed();\n\t\t\t}\n\t\t},\n\n\t\tstatics: {\n\t\t\t_types: types,\n\n\t\t\trandom: function() {\n\t\t\t\tvar random = Math.random;\n\t\t\t\treturn new Color(random(), random(), random());\n\t\t\t}\n\t\t}\n\t});\n},\nnew function() {\n\tvar operators = {\n\t\tadd: function(a, b) {\n\t\t\treturn a + b;\n\t\t},\n\n\t\tsubtract: function(a, b) {\n\t\t\treturn a - b;\n\t\t},\n\n\t\tmultiply: function(a, b) {\n\t\t\treturn a * b;\n\t\t},\n\n\t\tdivide: function(a, b) {\n\t\t\treturn a / b;\n\t\t}\n\t};\n\n\treturn Base.each(operators, function(operator, name) {\n\t\tthis[name] = function(color) {\n\t\t\tcolor = Color.read(arguments);\n\t\t\tvar type = this._type,\n\t\t\t\tcomponents1 = this._components,\n\t\t\t\tcomponents2 = color._convert(type);\n\t\t\tfor (var i = 0, l = components1.length; i < l; i++)\n\t\t\t\tcomponents2[i] = operator(components1[i], components2[i]);\n\t\t\treturn new Color(type, components2,\n\t\t\t\t\tthis._alpha != null\n\t\t\t\t\t\t\t? operator(this._alpha, color.getAlpha())\n\t\t\t\t\t\t\t: null);\n\t\t};\n\t}, {\n\t});\n});\n\nvar Gradient = Base.extend({\n\t_class: 'Gradient',\n\n\tinitialize: function Gradient(stops, radial) {\n\t\tthis._id = UID.get();\n\t\tif (stops && Base.isPlainObject(stops)) {\n\t\t\tthis.set(stops);\n\t\t\tstops = radial = null;\n\t\t}\n\t\tif (this._stops == null) {\n\t\t\tthis.setStops(stops || ['white', 'black']);\n\t\t}\n\t\tif (this._radial == null) {\n\t\t\tthis.setRadial(typeof radial === 'string' && radial === 'radial'\n\t\t\t\t\t|| radial || false);\n\t\t}\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn dictionary.add(this, function() {\n\t\t\treturn Base.serialize([this._stops, this._radial],\n\t\t\t\t\toptions, true, dictionary);\n\t\t});\n\t},\n\n\t_changed: function() {\n\t\tfor (var i = 0, l = this._owners && this._owners.length; i < l; i++) {\n\t\t\tthis._owners[i]._changed();\n\t\t}\n\t},\n\n\t_addOwner: function(color) {\n\t\tif (!this._owners)\n\t\t\tthis._owners = [];\n\t\tthis._owners.push(color);\n\t},\n\n\t_removeOwner: function(color) {\n\t\tvar index = this._owners ? this._owners.indexOf(color) : -1;\n\t\tif (index != -1) {\n\t\t\tthis._owners.splice(index, 1);\n\t\t\tif (!this._owners.length)\n\t\t\t\tthis._owners = undefined;\n\t\t}\n\t},\n\n\tclone: function() {\n\t\tvar stops = [];\n\t\tfor (var i = 0, l = this._stops.length; i < l; i++) {\n\t\t\tstops[i] = this._stops[i].clone();\n\t\t}\n\t\treturn new Gradient(stops, this._radial);\n\t},\n\n\tgetStops: function() {\n\t\treturn this._stops;\n\t},\n\n\tsetStops: function(stops) {\n\t\tif (stops.length < 2) {\n\t\t\tthrow new Error(\n\t\t\t\t\t'Gradient stop list needs to contain at least two stops.');\n\t\t}\n\t\tvar _stops = this._stops;\n\t\tif (_stops) {\n\t\t\tfor (var i = 0, l = _stops.length; i < l; i++)\n\t\t\t\t_stops[i]._owner = undefined;\n\t\t}\n\t\t_stops = this._stops = GradientStop.readList(stops, 0, { clone: true });\n\t\tfor (var i = 0, l = _stops.length; i < l; i++)\n\t\t\t_stops[i]._owner = this;\n\t\tthis._changed();\n\t},\n\n\tgetRadial: function() {\n\t\treturn this._radial;\n\t},\n\n\tsetRadial: function(radial) {\n\t\tthis._radial = radial;\n\t\tthis._changed();\n\t},\n\n\tequals: function(gradient) {\n\t\tif (gradient === this)\n\t\t\treturn true;\n\t\tif (gradient && this._class === gradient._class) {\n\t\t\tvar stops1 = this._stops,\n\t\t\t\tstops2 = gradient._stops,\n\t\t\t\tlength = stops1.length;\n\t\t\tif (length === stops2.length) {\n\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\tif (!stops1[i].equals(stops2[i]))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n});\n\nvar GradientStop = Base.extend({\n\t_class: 'GradientStop',\n\n\tinitialize: function GradientStop(arg0, arg1) {\n\t\tvar color = arg0,\n\t\t\toffset = arg1;\n\t\tif (typeof arg0 === 'object' && arg1 === undefined) {\n\t\t\tif (Array.isArray(arg0) && typeof arg0[0] !== 'number') {\n\t\t\t\tcolor = arg0[0];\n\t\t\t\toffset = arg0[1];\n\t\t\t} else if ('color' in arg0 || 'offset' in arg0\n\t\t\t\t\t|| 'rampPoint' in arg0) {\n\t\t\t\tcolor = arg0.color;\n\t\t\t\toffset = arg0.offset || arg0.rampPoint || 0;\n\t\t\t}\n\t\t}\n\t\tthis.setColor(color);\n\t\tthis.setOffset(offset);\n\t},\n\n\tclone: function() {\n\t\treturn new GradientStop(this._color.clone(), this._offset);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\tvar color = this._color,\n\t\t\toffset = this._offset;\n\t\treturn Base.serialize(offset == null ? [color] : [color, offset],\n\t\t\t\toptions, true, dictionary);\n\t},\n\n\t_changed: function() {\n\t\tif (this._owner)\n\t\t\tthis._owner._changed(65);\n\t},\n\n\tgetOffset: function() {\n\t\treturn this._offset;\n\t},\n\n\tsetOffset: function(offset) {\n\t\tthis._offset = offset;\n\t\tthis._changed();\n\t},\n\n\tgetRampPoint: '#getOffset',\n\tsetRampPoint: '#setOffset',\n\n\tgetColor: function() {\n\t\treturn this._color;\n\t},\n\n\tsetColor: function() {\n\t\tvar color = Color.read(arguments, 0, { clone: true });\n\t\tif (color)\n\t\t\tcolor._owner = this;\n\t\tthis._color = color;\n\t\tthis._changed();\n\t},\n\n\tequals: function(stop) {\n\t\treturn stop === this || stop && this._class === stop._class\n\t\t\t\t&& this._color.equals(stop._color)\n\t\t\t\t&& this._offset == stop._offset\n\t\t\t\t|| false;\n\t}\n});\n\nvar Style = Base.extend(new function() {\n\tvar itemDefaults = {\n\t\tfillColor: null,\n\t\tfillRule: 'nonzero',\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tstrokeCap: 'butt',\n\t\tstrokeJoin: 'miter',\n\t\tstrokeScaling: true,\n\t\tmiterLimit: 10,\n\t\tdashOffset: 0,\n\t\tdashArray: [],\n\t\tshadowColor: null,\n\t\tshadowBlur: 0,\n\t\tshadowOffset: new Point(),\n\t\tselectedColor: null\n\t},\n\tgroupDefaults = Base.set({}, itemDefaults, {\n\t\tfontFamily: 'sans-serif',\n\t\tfontWeight: 'normal',\n\t\tfontSize: 12,\n\t\tleading: null,\n\t\tjustification: 'left'\n\t}),\n\ttextDefaults = Base.set({}, groupDefaults, {\n\t\tfillColor: new Color()\n\t}),\n\tflags = {\n\t\tstrokeWidth: 97,\n\t\tstrokeCap: 97,\n\t\tstrokeJoin: 97,\n\t\tstrokeScaling: 105,\n\t\tmiterLimit: 97,\n\t\tfontFamily: 9,\n\t\tfontWeight: 9,\n\t\tfontSize: 9,\n\t\tfont: 9,\n\t\tleading: 9,\n\t\tjustification: 9\n\t},\n\titem = {\n\t\tbeans: true\n\t},\n\tfields = {\n\t\t_class: 'Style',\n\t\tbeans: true,\n\n\t\tinitialize: function Style(style, _owner, _project) {\n\t\t\tthis._values = {};\n\t\t\tthis._owner = _owner;\n\t\t\tthis._project = _owner && _owner._project || _project\n\t\t\t\t\t|| paper.project;\n\t\t\tthis._defaults = !_owner || _owner instanceof Group ? groupDefaults\n\t\t\t\t\t: _owner instanceof TextItem ? textDefaults\n\t\t\t\t\t: itemDefaults;\n\t\t\tif (style)\n\t\t\t\tthis.set(style);\n\t\t}\n\t};\n\n\tBase.each(groupDefaults, function(value, key) {\n\t\tvar isColor = /Color$/.test(key),\n\t\t\tisPoint = key === 'shadowOffset',\n\t\t\tpart = Base.capitalize(key),\n\t\t\tflag = flags[key],\n\t\t\tset = 'set' + part,\n\t\t\tget = 'get' + part;\n\n\t\tfields[set] = function(value) {\n\t\t\tvar owner = this._owner,\n\t\t\t\tchildren = owner && owner._children;\n\t\t\tif (children && children.length > 0\n\t\t\t\t\t&& !(owner instanceof CompoundPath)) {\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\t\tchildren[i]._style[set](value);\n\t\t\t} else if (key in this._defaults) {\n\t\t\t\tvar old = this._values[key];\n\t\t\t\tif (old !== value) {\n\t\t\t\t\tif (isColor) {\n\t\t\t\t\t\tif (old && old._owner !== undefined)\n\t\t\t\t\t\t\told._owner = undefined;\n\t\t\t\t\t\tif (value && value.constructor === Color) {\n\t\t\t\t\t\t\tif (value._owner)\n\t\t\t\t\t\t\t\tvalue = value.clone();\n\t\t\t\t\t\t\tvalue._owner = owner;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._values[key] = value;\n\t\t\t\t\tif (owner)\n\t\t\t\t\t\towner._changed(flag || 65);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfields[get] = function(_dontMerge) {\n\t\t\tvar owner = this._owner,\n\t\t\t\tchildren = owner && owner._children,\n\t\t\t\tvalue;\n\t\t\tif (key in this._defaults && (!children || !children.length\n\t\t\t\t\t|| _dontMerge || owner instanceof CompoundPath)) {\n\t\t\t\tvar value = this._values[key];\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\tvalue = this._defaults[key];\n\t\t\t\t\tif (value && value.clone)\n\t\t\t\t\t\tvalue = value.clone();\n\t\t\t\t} else {\n\t\t\t\t\tvar ctor = isColor ? Color : isPoint ? Point : null;\n\t\t\t\t\tif (ctor && !(value && value.constructor === ctor)) {\n\t\t\t\t\t\tthis._values[key] = value = ctor.read([value], 0,\n\t\t\t\t\t\t\t\t{ readNull: true, clone: true });\n\t\t\t\t\t\tif (value && isColor)\n\t\t\t\t\t\t\tvalue._owner = owner;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (children) {\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tvar childValue = children[i]._style[get]();\n\t\t\t\t\tif (!i) {\n\t\t\t\t\t\tvalue = childValue;\n\t\t\t\t\t} else if (!Base.equals(value, childValue)) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\t\titem[get] = function(_dontMerge) {\n\t\t\treturn this._style[get](_dontMerge);\n\t\t};\n\n\t\titem[set] = function(value) {\n\t\t\tthis._style[set](value);\n\t\t};\n\t});\n\n\tBase.each({\n\t\tFont: 'FontFamily',\n\t\tWindingRule: 'FillRule'\n\t}, function(value, key) {\n\t\tvar get = 'get' + key,\n\t\t\tset = 'set' + key;\n\t\tfields[get] = item[get] = '#get' + value;\n\t\tfields[set] = item[set] = '#set' + value;\n\t});\n\n\tItem.inject(item);\n\treturn fields;\n}, {\n\tset: function(style) {\n\t\tvar isStyle = style instanceof Style,\n\t\t\tvalues = isStyle ? style._values : style;\n\t\tif (values) {\n\t\t\tfor (var key in values) {\n\t\t\t\tif (key in this._defaults) {\n\t\t\t\t\tvar value = values[key];\n\t\t\t\t\tthis[key] = value && isStyle && value.clone\n\t\t\t\t\t\t\t? value.clone() : value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tequals: function(style) {\n\t\tfunction compare(style1, style2, secondary) {\n\t\t\tvar values1 = style1._values,\n\t\t\t\tvalues2 = style2._values,\n\t\t\t\tdefaults2 = style2._defaults;\n\t\t\tfor (var key in values1) {\n\t\t\t\tvar value1 = values1[key],\n\t\t\t\t\tvalue2 = values2[key];\n\t\t\t\tif (!(secondary && key in values2) && !Base.equals(value1,\n\t\t\t\t\t\tvalue2 === undefined ? defaults2[key] : value2))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn style === this || style && this._class === style._class\n\t\t\t\t&& compare(this, style)\n\t\t\t\t&& compare(style, this, true)\n\t\t\t\t|| false;\n\t},\n\n\thasFill: function() {\n\t\tvar color = this.getFillColor();\n\t\treturn !!color && color.alpha > 0;\n\t},\n\n\thasStroke: function() {\n\t\tvar color = this.getStrokeColor();\n\t\treturn !!color && color.alpha > 0 && this.getStrokeWidth() > 0;\n\t},\n\n\thasShadow: function() {\n\t\tvar color = this.getShadowColor();\n\t\treturn !!color && color.alpha > 0 && (this.getShadowBlur() > 0\n\t\t\t\t|| !this.getShadowOffset().isZero());\n\t},\n\n\tgetView: function() {\n\t\treturn this._project._view;\n\t},\n\n\tgetFontStyle: function() {\n\t\tvar fontSize = this.getFontSize();\n\t\treturn this.getFontWeight()\n\t\t\t\t+ ' ' + fontSize + (/[a-z]/i.test(fontSize + '') ? ' ' : 'px ')\n\t\t\t\t+ this.getFontFamily();\n\t},\n\n\tgetFont: '#getFontFamily',\n\tsetFont: '#setFontFamily',\n\n\tgetLeading: function getLeading() {\n\t\tvar leading = getLeading.base.call(this),\n\t\t\tfontSize = this.getFontSize();\n\t\tif (/pt|em|%|px/.test(fontSize))\n\t\t\tfontSize = this.getView().getPixelSize(fontSize);\n\t\treturn leading != null ? leading : fontSize * 1.2;\n\t}\n\n});\n\nvar DomElement = new function() {\n\tfunction handlePrefix(el, name, set, value) {\n\t\tvar prefixes = ['', 'webkit', 'moz', 'Moz', 'ms', 'o'],\n\t\t\tsuffix = name[0].toUpperCase() + name.substring(1);\n\t\tfor (var i = 0; i < 6; i++) {\n\t\t\tvar prefix = prefixes[i],\n\t\t\t\tkey = prefix ? prefix + suffix : name;\n\t\t\tif (key in el) {\n\t\t\t\tif (set) {\n\t\t\t\t\tel[key] = value;\n\t\t\t\t} else {\n\t\t\t\t\treturn el[key];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tgetStyles: function(el) {\n\t\t\tvar doc = el && el.nodeType !== 9 ? el.ownerDocument : el,\n\t\t\t\tview = doc && doc.defaultView;\n\t\t\treturn view && view.getComputedStyle(el, '');\n\t\t},\n\n\t\tgetBounds: function(el, viewport) {\n\t\t\tvar doc = el.ownerDocument,\n\t\t\t\tbody = doc.body,\n\t\t\t\thtml = doc.documentElement,\n\t\t\t\trect;\n\t\t\ttry {\n\t\t\t\trect = el.getBoundingClientRect();\n\t\t\t} catch (e) {\n\t\t\t\trect = { left: 0, top: 0, width: 0, height: 0 };\n\t\t\t}\n\t\t\tvar x = rect.left - (html.clientLeft || body.clientLeft || 0),\n\t\t\t\ty = rect.top - (html.clientTop || body.clientTop || 0);\n\t\t\tif (!viewport) {\n\t\t\t\tvar view = doc.defaultView;\n\t\t\t\tx += view.pageXOffset || html.scrollLeft || body.scrollLeft;\n\t\t\t\ty += view.pageYOffset || html.scrollTop || body.scrollTop;\n\t\t\t}\n\t\t\treturn new Rectangle(x, y, rect.width, rect.height);\n\t\t},\n\n\t\tgetViewportBounds: function(el) {\n\t\t\tvar doc = el.ownerDocument,\n\t\t\t\tview = doc.defaultView,\n\t\t\t\thtml = doc.documentElement;\n\t\t\treturn new Rectangle(0, 0,\n\t\t\t\tview.innerWidth || html.clientWidth,\n\t\t\t\tview.innerHeight || html.clientHeight\n\t\t\t);\n\t\t},\n\n\t\tgetOffset: function(el, viewport) {\n\t\t\treturn DomElement.getBounds(el, viewport).getPoint();\n\t\t},\n\n\t\tgetSize: function(el) {\n\t\t\treturn DomElement.getBounds(el, true).getSize();\n\t\t},\n\n\t\tisInvisible: function(el) {\n\t\t\treturn DomElement.getSize(el).equals(new Size(0, 0));\n\t\t},\n\n\t\tisInView: function(el) {\n\t\t\treturn !DomElement.isInvisible(el)\n\t\t\t\t\t&& DomElement.getViewportBounds(el).intersects(\n\t\t\t\t\t\tDomElement.getBounds(el, true));\n\t\t},\n\n\t\tisInserted: function(el) {\n\t\t\treturn document.body.contains(el);\n\t\t},\n\n\t\tgetPrefixed: function(el, name) {\n\t\t\treturn el && handlePrefix(el, name);\n\t\t},\n\n\t\tsetPrefixed: function(el, name, value) {\n\t\t\tif (typeof name === 'object') {\n\t\t\t\tfor (var key in name)\n\t\t\t\t\thandlePrefix(el, key, true, name[key]);\n\t\t\t} else {\n\t\t\t\thandlePrefix(el, name, true, value);\n\t\t\t}\n\t\t}\n\t};\n};\n\nvar DomEvent = {\n\tadd: function(el, events) {\n\t\tif (el) {\n\t\t\tfor (var type in events) {\n\t\t\t\tvar func = events[type],\n\t\t\t\t\tparts = type.split(/[\\s,]+/g);\n\t\t\t\tfor (var i = 0, l = parts.length; i < l; i++)\n\t\t\t\t\tel.addEventListener(parts[i], func, false);\n\t\t\t}\n\t\t}\n\t},\n\n\tremove: function(el, events) {\n\t\tif (el) {\n\t\t\tfor (var type in events) {\n\t\t\t\tvar func = events[type],\n\t\t\t\t\tparts = type.split(/[\\s,]+/g);\n\t\t\t\tfor (var i = 0, l = parts.length; i < l; i++)\n\t\t\t\t\tel.removeEventListener(parts[i], func, false);\n\t\t\t}\n\t\t}\n\t},\n\n\tgetPoint: function(event) {\n\t\tvar pos = event.targetTouches\n\t\t\t\t? event.targetTouches.length\n\t\t\t\t\t? event.targetTouches[0]\n\t\t\t\t\t: event.changedTouches[0]\n\t\t\t\t: event;\n\t\treturn new Point(\n\t\t\tpos.pageX || pos.clientX + document.documentElement.scrollLeft,\n\t\t\tpos.pageY || pos.clientY + document.documentElement.scrollTop\n\t\t);\n\t},\n\n\tgetTarget: function(event) {\n\t\treturn event.target || event.srcElement;\n\t},\n\n\tgetRelatedTarget: function(event) {\n\t\treturn event.relatedTarget || event.toElement;\n\t},\n\n\tgetOffset: function(event, target) {\n\t\treturn DomEvent.getPoint(event).subtract(DomElement.getOffset(\n\t\t\t\ttarget || DomEvent.getTarget(event)));\n\t}\n};\n\nDomEvent.requestAnimationFrame = new function() {\n\tvar nativeRequest = DomElement.getPrefixed(window, 'requestAnimationFrame'),\n\t\trequested = false,\n\t\tcallbacks = [],\n\t\ttimer;\n\n\tfunction handleCallbacks() {\n\t\tvar functions = callbacks;\n\t\tcallbacks = [];\n\t\tfor (var i = 0, l = functions.length; i < l; i++)\n\t\t\tfunctions[i]();\n\t\trequested = nativeRequest && callbacks.length;\n\t\tif (requested)\n\t\t\tnativeRequest(handleCallbacks);\n\t}\n\n\treturn function(callback) {\n\t\tcallbacks.push(callback);\n\t\tif (nativeRequest) {\n\t\t\tif (!requested) {\n\t\t\t\tnativeRequest(handleCallbacks);\n\t\t\t\trequested = true;\n\t\t\t}\n\t\t} else if (!timer) {\n\t\t\ttimer = setInterval(handleCallbacks, 1000 / 60);\n\t\t}\n\t};\n};\n\nvar View = Base.extend(Emitter, {\n\t_class: 'View',\n\n\tinitialize: function View(project, element) {\n\n\t\tfunction getSize(name) {\n\t\t\treturn element[name] || parseInt(element.getAttribute(name), 10);\n\t\t}\n\n\t\tfunction getCanvasSize() {\n\t\t\tvar size = DomElement.getSize(element);\n\t\t\treturn size.isNaN() || size.isZero()\n\t\t\t\t\t? new Size(getSize('width'), getSize('height'))\n\t\t\t\t\t: size;\n\t\t}\n\n\t\tvar size;\n\t\tif (window && element) {\n\t\t\tthis._id = element.getAttribute('id');\n\t\t\tif (this._id == null)\n\t\t\t\telement.setAttribute('id', this._id = 'view-' + View._id++);\n\t\t\tDomEvent.add(element, this._viewEvents);\n\t\t\tvar none = 'none';\n\t\t\tDomElement.setPrefixed(element.style, {\n\t\t\t\tuserDrag: none,\n\t\t\t\tuserSelect: none,\n\t\t\t\ttouchCallout: none,\n\t\t\t\tcontentZooming: none,\n\t\t\t\ttapHighlightColor: 'rgba(0,0,0,0)'\n\t\t\t});\n\n\t\t\tif (PaperScope.hasAttribute(element, 'resize')) {\n\t\t\t\tvar that = this;\n\t\t\t\tDomEvent.add(window, this._windowEvents = {\n\t\t\t\t\tresize: function() {\n\t\t\t\t\t\tthat.setViewSize(getCanvasSize());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tsize = getCanvasSize();\n\n\t\t\tif (PaperScope.hasAttribute(element, 'stats')\n\t\t\t\t\t&& typeof Stats !== 'undefined') {\n\t\t\t\tthis._stats = new Stats();\n\t\t\t\tvar stats = this._stats.domElement,\n\t\t\t\t\tstyle = stats.style,\n\t\t\t\t\toffset = DomElement.getOffset(element);\n\t\t\t\tstyle.position = 'absolute';\n\t\t\t\tstyle.left = offset.x + 'px';\n\t\t\t\tstyle.top = offset.y + 'px';\n\t\t\t\tdocument.body.appendChild(stats);\n\t\t\t}\n\t\t} else {\n\t\t\tsize = new Size(element);\n\t\t\telement = null;\n\t\t}\n\t\tthis._project = project;\n\t\tthis._scope = project._scope;\n\t\tthis._element = element;\n\t\tif (!this._pixelRatio)\n\t\t\tthis._pixelRatio = window && window.devicePixelRatio || 1;\n\t\tthis._setElementSize(size.width, size.height);\n\t\tthis._viewSize = size;\n\t\tView._views.push(this);\n\t\tView._viewsById[this._id] = this;\n\t\t(this._matrix = new Matrix())._owner = this;\n\t\tif (!View._focused)\n\t\t\tView._focused = this;\n\t\tthis._frameItems = {};\n\t\tthis._frameItemCount = 0;\n\t\tthis._itemEvents = { native: {}, virtual: {} };\n\t\tthis._autoUpdate = !paper.agent.node;\n\t\tthis._needsUpdate = false;\n\t},\n\n\tremove: function() {\n\t\tif (!this._project)\n\t\t\treturn false;\n\t\tif (View._focused === this)\n\t\t\tView._focused = null;\n\t\tView._views.splice(View._views.indexOf(this), 1);\n\t\tdelete View._viewsById[this._id];\n\t\tvar project = this._project;\n\t\tif (project._view === this)\n\t\t\tproject._view = null;\n\t\tDomEvent.remove(this._element, this._viewEvents);\n\t\tDomEvent.remove(window, this._windowEvents);\n\t\tthis._element = this._project = null;\n\t\tthis.off('frame');\n\t\tthis._animate = false;\n\t\tthis._frameItems = {};\n\t\treturn true;\n\t},\n\n\t_events: Base.each(\n\t\tItem._itemHandlers.concat(['onResize', 'onKeyDown', 'onKeyUp']),\n\t\tfunction(name) {\n\t\t\tthis[name] = {};\n\t\t}, {\n\t\t\tonFrame: {\n\t\t\t\tinstall: function() {\n\t\t\t\t\tthis.play();\n\t\t\t\t},\n\n\t\t\t\tuninstall: function() {\n\t\t\t\t\tthis.pause();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t),\n\n\t_animate: false,\n\t_time: 0,\n\t_count: 0,\n\n\tgetAutoUpdate: function() {\n\t\treturn this._autoUpdate;\n\t},\n\n\tsetAutoUpdate: function(autoUpdate) {\n\t\tthis._autoUpdate = autoUpdate;\n\t\tif (autoUpdate)\n\t\t\tthis.requestUpdate();\n\t},\n\n\tupdate: function() {\n\t},\n\n\tdraw: function() {\n\t\tthis.update();\n\t},\n\n\trequestUpdate: function() {\n\t\tif (!this._requested) {\n\t\t\tvar that = this;\n\t\t\tDomEvent.requestAnimationFrame(function() {\n\t\t\t\tthat._requested = false;\n\t\t\t\tif (that._animate) {\n\t\t\t\t\tthat.requestUpdate();\n\t\t\t\t\tvar element = that._element;\n\t\t\t\t\tif ((!DomElement.getPrefixed(document, 'hidden')\n\t\t\t\t\t\t\t|| PaperScope.getAttribute(element, 'keepalive')\n\t\t\t\t\t\t\t\t=== 'true') && DomElement.isInView(element)) {\n\t\t\t\t\t\tthat._handleFrame();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (that._autoUpdate)\n\t\t\t\t\tthat.update();\n\t\t\t});\n\t\t\tthis._requested = true;\n\t\t}\n\t},\n\n\tplay: function() {\n\t\tthis._animate = true;\n\t\tthis.requestUpdate();\n\t},\n\n\tpause: function() {\n\t\tthis._animate = false;\n\t},\n\n\t_handleFrame: function() {\n\t\tpaper = this._scope;\n\t\tvar now = Date.now() / 1000,\n\t\t\tdelta = this._last ? now - this._last : 0;\n\t\tthis._last = now;\n\t\tthis.emit('frame', new Base({\n\t\t\tdelta: delta,\n\t\t\ttime: this._time += delta,\n\t\t\tcount: this._count++\n\t\t}));\n\t\tif (this._stats)\n\t\t\tthis._stats.update();\n\t},\n\n\t_animateItem: function(item, animate) {\n\t\tvar items = this._frameItems;\n\t\tif (animate) {\n\t\t\titems[item._id] = {\n\t\t\t\titem: item,\n\t\t\t\ttime: 0,\n\t\t\t\tcount: 0\n\t\t\t};\n\t\t\tif (++this._frameItemCount === 1)\n\t\t\t\tthis.on('frame', this._handleFrameItems);\n\t\t} else {\n\t\t\tdelete items[item._id];\n\t\t\tif (--this._frameItemCount === 0) {\n\t\t\t\tthis.off('frame', this._handleFrameItems);\n\t\t\t}\n\t\t}\n\t},\n\n\t_handleFrameItems: function(event) {\n\t\tfor (var i in this._frameItems) {\n\t\t\tvar entry = this._frameItems[i];\n\t\t\tentry.item.emit('frame', new Base(event, {\n\t\t\t\ttime: entry.time += event.delta,\n\t\t\t\tcount: entry.count++\n\t\t\t}));\n\t\t}\n\t},\n\n\t_changed: function() {\n\t\tthis._project._changed(2049);\n\t\tthis._bounds = this._decomposed = undefined;\n\t},\n\n\tgetElement: function() {\n\t\treturn this._element;\n\t},\n\n\tgetPixelRatio: function() {\n\t\treturn this._pixelRatio;\n\t},\n\n\tgetResolution: function() {\n\t\treturn this._pixelRatio * 72;\n\t},\n\n\tgetViewSize: function() {\n\t\tvar size = this._viewSize;\n\t\treturn new LinkedSize(size.width, size.height, this, 'setViewSize');\n\t},\n\n\tsetViewSize: function() {\n\t\tvar size = Size.read(arguments),\n\t\t\tdelta = size.subtract(this._viewSize);\n\t\tif (delta.isZero())\n\t\t\treturn;\n\t\tthis._setElementSize(size.width, size.height);\n\t\tthis._viewSize.set(size);\n\t\tthis._changed();\n\t\tthis.emit('resize', { size: size, delta: delta });\n\t\tif (this._autoUpdate) {\n\t\t\tthis.update();\n\t\t}\n\t},\n\n\t_setElementSize: function(width, height) {\n\t\tvar element = this._element;\n\t\tif (element) {\n\t\t\tif (element.width !== width)\n\t\t\t\telement.width = width;\n\t\t\tif (element.height !== height)\n\t\t\t\telement.height = height;\n\t\t}\n\t},\n\n\tgetBounds: function() {\n\t\tif (!this._bounds)\n\t\t\tthis._bounds = this._matrix.inverted()._transformBounds(\n\t\t\t\t\tnew Rectangle(new Point(), this._viewSize));\n\t\treturn this._bounds;\n\t},\n\n\tgetSize: function() {\n\t\treturn this.getBounds().getSize();\n\t},\n\n\tisVisible: function() {\n\t\treturn DomElement.isInView(this._element);\n\t},\n\n\tisInserted: function() {\n\t\treturn DomElement.isInserted(this._element);\n\t},\n\n\tgetPixelSize: function(size) {\n\t\tvar element = this._element,\n\t\t\tpixels;\n\t\tif (element) {\n\t\t\tvar parent = element.parentNode,\n\t\t\t\ttemp = document.createElement('div');\n\t\t\ttemp.style.fontSize = size;\n\t\t\tparent.appendChild(temp);\n\t\t\tpixels = parseFloat(DomElement.getStyles(temp).fontSize);\n\t\t\tparent.removeChild(temp);\n\t\t} else {\n\t\t\tpixels = parseFloat(pixels);\n\t\t}\n\t\treturn pixels;\n\t},\n\n\tgetTextWidth: function(font, lines) {\n\t\treturn 0;\n\t}\n}, Base.each(['rotate', 'scale', 'shear', 'skew'], function(key) {\n\tvar rotate = key === 'rotate';\n\tthis[key] = function() {\n\t\tvar value = (rotate ? Base : Point).read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\treturn this.transform(new Matrix()[key](value,\n\t\t\t\tcenter || this.getCenter(true)));\n\t};\n}, {\n\t_decompose: function() {\n\t\treturn this._decomposed || (this._decomposed = this._matrix.decompose());\n\t},\n\n\ttranslate: function() {\n\t\tvar mx = new Matrix();\n\t\treturn this.transform(mx.translate.apply(mx, arguments));\n\t},\n\n\tgetCenter: function() {\n\t\treturn this.getBounds().getCenter();\n\t},\n\n\tsetCenter: function() {\n\t\tvar center = Point.read(arguments);\n\t\tthis.translate(this.getCenter().subtract(center));\n\t},\n\n\tgetZoom: function() {\n\t\tvar decomposed = this._decompose(),\n\t\t\tscaling = decomposed && decomposed.scaling;\n\t\treturn scaling ? (scaling.x + scaling.y) / 2 : 0;\n\t},\n\n\tsetZoom: function(zoom) {\n\t\tthis.transform(new Matrix().scale(zoom / this.getZoom(),\n\t\t\tthis.getCenter()));\n\t},\n\n\tgetRotation: function() {\n\t\tvar decomposed = this._decompose();\n\t\treturn decomposed && decomposed.rotation;\n\t},\n\n\tsetRotation: function(rotation) {\n\t\tvar current = this.getRotation();\n\t\tif (current != null && rotation != null) {\n\t\t\tthis.rotate(rotation - current);\n\t\t}\n\t},\n\n\tgetScaling: function() {\n\t\tvar decomposed = this._decompose(),\n\t\t\tscaling = decomposed && decomposed.scaling;\n\t\treturn scaling\n\t\t\t\t? new LinkedPoint(scaling.x, scaling.y, this, 'setScaling')\n\t\t\t\t: undefined;\n\t},\n\n\tsetScaling: function() {\n\t\tvar current = this.getScaling(),\n\t\t\tscaling = Point.read(arguments, 0, { clone: true, readNull: true });\n\t\tif (current && scaling) {\n\t\t\tthis.scale(scaling.x / current.x, scaling.y / current.y);\n\t\t}\n\t},\n\n\tgetMatrix: function() {\n\t\treturn this._matrix;\n\t},\n\n\tsetMatrix: function() {\n\t\tvar matrix = this._matrix;\n\t\tmatrix.initialize.apply(matrix, arguments);\n\t},\n\n\ttransform: function(matrix) {\n\t\tthis._matrix.append(matrix);\n\t},\n\n\tscrollBy: function() {\n\t\tthis.translate(Point.read(arguments).negate());\n\t}\n}), {\n\n\tprojectToView: function() {\n\t\treturn this._matrix._transformPoint(Point.read(arguments));\n\t},\n\n\tviewToProject: function() {\n\t\treturn this._matrix._inverseTransform(Point.read(arguments));\n\t},\n\n\tgetEventPoint: function(event) {\n\t\treturn this.viewToProject(DomEvent.getOffset(event, this._element));\n\t},\n\n}, {\n\tstatics: {\n\t\t_views: [],\n\t\t_viewsById: {},\n\t\t_id: 0,\n\n\t\tcreate: function(project, element) {\n\t\t\tif (document && typeof element === 'string')\n\t\t\t\telement = document.getElementById(element);\n\t\t\tvar ctor = window ? CanvasView : View;\n\t\t\treturn new ctor(project, element);\n\t\t}\n\t}\n},\nnew function() {\n\tif (!window)\n\t\treturn;\n\tvar prevFocus,\n\t\ttempFocus,\n\t\tdragging = false,\n\t\tmouseDown = false;\n\n\tfunction getView(event) {\n\t\tvar target = DomEvent.getTarget(event);\n\t\treturn target.getAttribute && View._viewsById[\n\t\t\t\ttarget.getAttribute('id')];\n\t}\n\n\tfunction updateFocus() {\n\t\tvar view = View._focused;\n\t\tif (!view || !view.isVisible()) {\n\t\t\tfor (var i = 0, l = View._views.length; i < l; i++) {\n\t\t\t\tif ((view = View._views[i]).isVisible()) {\n\t\t\t\t\tView._focused = tempFocus = view;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction handleMouseMove(view, event, point) {\n\t\tview._handleMouseEvent('mousemove', event, point);\n\t}\n\n\tvar navigator = window.navigator,\n\t\tmousedown, mousemove, mouseup;\n\tif (navigator.pointerEnabled || navigator.msPointerEnabled) {\n\t\tmousedown = 'pointerdown MSPointerDown';\n\t\tmousemove = 'pointermove MSPointerMove';\n\t\tmouseup = 'pointerup pointercancel MSPointerUp MSPointerCancel';\n\t} else {\n\t\tmousedown = 'touchstart';\n\t\tmousemove = 'touchmove';\n\t\tmouseup = 'touchend touchcancel';\n\t\tif (!('ontouchstart' in window && navigator.userAgent.match(\n\t\t\t\t/mobile|tablet|ip(ad|hone|od)|android|silk/i))) {\n\t\t\tmousedown += ' mousedown';\n\t\t\tmousemove += ' mousemove';\n\t\t\tmouseup += ' mouseup';\n\t\t}\n\t}\n\n\tvar viewEvents = {},\n\t\tdocEvents = {\n\t\t\tmouseout: function(event) {\n\t\t\t\tvar view = View._focused,\n\t\t\t\t\ttarget = DomEvent.getRelatedTarget(event);\n\t\t\t\tif (view && (!target || target.nodeName === 'HTML')) {\n\t\t\t\t\tvar offset = DomEvent.getOffset(event, view._element),\n\t\t\t\t\t\tx = offset.x,\n\t\t\t\t\t\tabs = Math.abs,\n\t\t\t\t\t\tax = abs(x),\n\t\t\t\t\t\tmax = 1 << 25,\n\t\t\t\t\t\tdiff = ax - max;\n\t\t\t\t\toffset.x = abs(diff) < ax ? diff * (x < 0 ? -1 : 1) : x;\n\t\t\t\t\thandleMouseMove(view, event, view.viewToProject(offset));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tscroll: updateFocus\n\t\t};\n\n\tviewEvents[mousedown] = function(event) {\n\t\tvar view = View._focused = getView(event);\n\t\tif (!dragging) {\n\t\t\tdragging = true;\n\t\t\tview._handleMouseEvent('mousedown', event);\n\t\t}\n\t};\n\n\tdocEvents[mousemove] = function(event) {\n\t\tvar view = View._focused;\n\t\tif (!mouseDown) {\n\t\t\tvar target = getView(event);\n\t\t\tif (target) {\n\t\t\t\tif (view !== target) {\n\t\t\t\t\tif (view)\n\t\t\t\t\t\thandleMouseMove(view, event);\n\t\t\t\t\tif (!prevFocus)\n\t\t\t\t\t\tprevFocus = view;\n\t\t\t\t\tview = View._focused = tempFocus = target;\n\t\t\t\t}\n\t\t\t} else if (tempFocus && tempFocus === view) {\n\t\t\t\tif (prevFocus && !prevFocus.isInserted())\n\t\t\t\t\tprevFocus = null;\n\t\t\t\tview = View._focused = prevFocus;\n\t\t\t\tprevFocus = null;\n\t\t\t\tupdateFocus();\n\t\t\t}\n\t\t}\n\t\tif (view)\n\t\t\thandleMouseMove(view, event);\n\t};\n\n\tdocEvents[mousedown] = function() {\n\t\tmouseDown = true;\n\t};\n\n\tdocEvents[mouseup] = function(event) {\n\t\tvar view = View._focused;\n\t\tif (view && dragging)\n\t\t\tview._handleMouseEvent('mouseup', event);\n\t\tmouseDown = dragging = false;\n\t};\n\n\tDomEvent.add(document, docEvents);\n\n\tDomEvent.add(window, {\n\t\tload: updateFocus\n\t});\n\n\tvar called = false,\n\t\tprevented = false,\n\t\tfallbacks = {\n\t\t\tdoubleclick: 'click',\n\t\t\tmousedrag: 'mousemove'\n\t\t},\n\t\twasInView = false,\n\t\toverView,\n\t\tdownPoint,\n\t\tlastPoint,\n\t\tdownItem,\n\t\toverItem,\n\t\tdragItem,\n\t\tclickItem,\n\t\tclickTime,\n\t\tdblClick;\n\n\tfunction emitMouseEvent(obj, target, type, event, point, prevPoint,\n\t\t\tstopItem) {\n\t\tvar stopped = false,\n\t\t\tmouseEvent;\n\n\t\tfunction emit(obj, type) {\n\t\t\tif (obj.responds(type)) {\n\t\t\t\tif (!mouseEvent) {\n\t\t\t\t\tmouseEvent = new MouseEvent(type, event, point,\n\t\t\t\t\t\t\ttarget || obj,\n\t\t\t\t\t\t\tprevPoint ? point.subtract(prevPoint) : null);\n\t\t\t\t}\n\t\t\t\tif (obj.emit(type, mouseEvent)) {\n\t\t\t\t\tcalled = true;\n\t\t\t\t\tif (mouseEvent.prevented)\n\t\t\t\t\t\tprevented = true;\n\t\t\t\t\tif (mouseEvent.stopped)\n\t\t\t\t\t\treturn stopped = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar fallback = fallbacks[type];\n\t\t\t\tif (fallback)\n\t\t\t\t\treturn emit(obj, fallback);\n\t\t\t}\n\t\t}\n\n\t\twhile (obj && obj !== stopItem) {\n\t\t\tif (emit(obj, type))\n\t\t\t\tbreak;\n\t\t\tobj = obj._parent;\n\t\t}\n\t\treturn stopped;\n\t}\n\n\tfunction emitMouseEvents(view, hitItem, type, event, point, prevPoint) {\n\t\tview._project.removeOn(type);\n\t\tprevented = called = false;\n\t\treturn (dragItem && emitMouseEvent(dragItem, null, type, event,\n\t\t\t\t\tpoint, prevPoint)\n\t\t\t|| hitItem && hitItem !== dragItem\n\t\t\t\t&& !hitItem.isDescendant(dragItem)\n\t\t\t\t&& emitMouseEvent(hitItem, null, type, event, point, prevPoint,\n\t\t\t\t\tdragItem)\n\t\t\t|| emitMouseEvent(view, dragItem || hitItem || view, type, event,\n\t\t\t\t\tpoint, prevPoint));\n\t}\n\n\tvar itemEventsMap = {\n\t\tmousedown: {\n\t\t\tmousedown: 1,\n\t\t\tmousedrag: 1,\n\t\t\tclick: 1,\n\t\t\tdoubleclick: 1\n\t\t},\n\t\tmouseup: {\n\t\t\tmouseup: 1,\n\t\t\tmousedrag: 1,\n\t\t\tclick: 1,\n\t\t\tdoubleclick: 1\n\t\t},\n\t\tmousemove: {\n\t\t\tmousedrag: 1,\n\t\t\tmousemove: 1,\n\t\t\tmouseenter: 1,\n\t\t\tmouseleave: 1\n\t\t}\n\t};\n\n\treturn {\n\t\t_viewEvents: viewEvents,\n\n\t\t_handleMouseEvent: function(type, event, point) {\n\t\t\tvar itemEvents = this._itemEvents,\n\t\t\t\thitItems = itemEvents.native[type],\n\t\t\t\tnativeMove = type === 'mousemove',\n\t\t\t\ttool = this._scope.tool,\n\t\t\t\tview = this;\n\n\t\t\tfunction responds(type) {\n\t\t\t\treturn itemEvents.virtual[type] || view.responds(type)\n\t\t\t\t\t\t|| tool && tool.responds(type);\n\t\t\t}\n\n\t\t\tif (nativeMove && dragging && responds('mousedrag'))\n\t\t\t\ttype = 'mousedrag';\n\t\t\tif (!point)\n\t\t\t\tpoint = this.getEventPoint(event);\n\n\t\t\tvar inView = this.getBounds().contains(point),\n\t\t\t\thit = hitItems && inView && view._project.hitTest(point, {\n\t\t\t\t\ttolerance: 0,\n\t\t\t\t\tfill: true,\n\t\t\t\t\tstroke: true\n\t\t\t\t}),\n\t\t\t\thitItem = hit && hit.item || null,\n\t\t\t\thandle = false,\n\t\t\t\tmouse = {};\n\t\t\tmouse[type.substr(5)] = true;\n\n\t\t\tif (hitItems && hitItem !== overItem) {\n\t\t\t\tif (overItem) {\n\t\t\t\t\temitMouseEvent(overItem, null, 'mouseleave', event, point);\n\t\t\t\t}\n\t\t\t\tif (hitItem) {\n\t\t\t\t\temitMouseEvent(hitItem, null, 'mouseenter', event, point);\n\t\t\t\t}\n\t\t\t\toverItem = hitItem;\n\t\t\t}\n\t\t\tif (wasInView ^ inView) {\n\t\t\t\temitMouseEvent(this, null, inView ? 'mouseenter' : 'mouseleave',\n\t\t\t\t\t\tevent, point);\n\t\t\t\toverView = inView ? this : null;\n\t\t\t\thandle = true;\n\t\t\t}\n\t\t\tif ((inView || mouse.drag) && !point.equals(lastPoint)) {\n\t\t\t\temitMouseEvents(this, hitItem, nativeMove ? type : 'mousemove',\n\t\t\t\t\t\tevent, point, lastPoint);\n\t\t\t\thandle = true;\n\t\t\t}\n\t\t\twasInView = inView;\n\t\t\tif (mouse.down && inView || mouse.up && downPoint) {\n\t\t\t\temitMouseEvents(this, hitItem, type, event, point, downPoint);\n\t\t\t\tif (mouse.down) {\n\t\t\t\t\tdblClick = hitItem === clickItem\n\t\t\t\t\t\t&& (Date.now() - clickTime < 300);\n\t\t\t\t\tdownItem = clickItem = hitItem;\n\t\t\t\t\tif (!prevented && hitItem) {\n\t\t\t\t\t\tvar item = hitItem;\n\t\t\t\t\t\twhile (item && !item.responds('mousedrag'))\n\t\t\t\t\t\t\titem = item._parent;\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\tdragItem = hitItem;\n\t\t\t\t\t}\n\t\t\t\t\tdownPoint = point;\n\t\t\t\t} else if (mouse.up) {\n\t\t\t\t\tif (!prevented && hitItem === downItem) {\n\t\t\t\t\t\tclickTime = Date.now();\n\t\t\t\t\t\temitMouseEvents(this, hitItem, dblClick ? 'doubleclick'\n\t\t\t\t\t\t\t\t: 'click', event, point, downPoint);\n\t\t\t\t\t\tdblClick = false;\n\t\t\t\t\t}\n\t\t\t\t\tdownItem = dragItem = null;\n\t\t\t\t}\n\t\t\t\twasInView = false;\n\t\t\t\thandle = true;\n\t\t\t}\n\t\t\tlastPoint = point;\n\t\t\tif (handle && tool) {\n\t\t\t\tcalled = tool._handleMouseEvent(type, event, point, mouse)\n\t\t\t\t\t|| called;\n\t\t\t}\n\n\t\t\tif (called && !mouse.move || mouse.down && responds('mouseup'))\n\t\t\t\tevent.preventDefault();\n\t\t},\n\n\t\t_handleKeyEvent: function(type, event, key, character) {\n\t\t\tvar scope = this._scope,\n\t\t\t\ttool = scope.tool,\n\t\t\t\tkeyEvent;\n\n\t\t\tfunction emit(obj) {\n\t\t\t\tif (obj.responds(type)) {\n\t\t\t\t\tpaper = scope;\n\t\t\t\t\tobj.emit(type, keyEvent = keyEvent\n\t\t\t\t\t\t\t|| new KeyEvent(type, event, key, character));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isVisible()) {\n\t\t\t\temit(this);\n\t\t\t\tif (tool && tool.responds(type))\n\t\t\t\t\temit(tool);\n\t\t\t}\n\t\t},\n\n\t\t_countItemEvent: function(type, sign) {\n\t\t\tvar itemEvents = this._itemEvents,\n\t\t\t\tnative = itemEvents.native,\n\t\t\t\tvirtual = itemEvents.virtual;\n\t\t\tfor (var key in itemEventsMap) {\n\t\t\t\tnative[key] = (native[key] || 0)\n\t\t\t\t\t\t+ (itemEventsMap[key][type] || 0) * sign;\n\t\t\t}\n\t\t\tvirtual[type] = (virtual[type] || 0) + sign;\n\t\t},\n\n\t\tstatics: {\n\t\t\tupdateFocus: updateFocus\n\t\t}\n\t};\n});\n\nvar CanvasView = View.extend({\n\t_class: 'CanvasView',\n\n\tinitialize: function CanvasView(project, canvas) {\n\t\tif (!(canvas instanceof window.HTMLCanvasElement)) {\n\t\t\tvar size = Size.read(arguments, 1);\n\t\t\tif (size.isZero())\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Cannot create CanvasView with the provided argument: '\n\t\t\t\t\t\t+ Base.slice(arguments, 1));\n\t\t\tcanvas = CanvasProvider.getCanvas(size);\n\t\t}\n\t\tvar ctx = this._context = canvas.getContext('2d');\n\t\tctx.save();\n\t\tthis._pixelRatio = 1;\n\t\tif (!/^off|false$/.test(PaperScope.getAttribute(canvas, 'hidpi'))) {\n\t\t\tvar deviceRatio = window.devicePixelRatio || 1,\n\t\t\t\tbackingStoreRatio = DomElement.getPrefixed(ctx,\n\t\t\t\t\t\t'backingStorePixelRatio') || 1;\n\t\t\tthis._pixelRatio = deviceRatio / backingStoreRatio;\n\t\t}\n\t\tView.call(this, project, canvas);\n\t\tthis._needsUpdate = true;\n\t},\n\n\tremove: function remove() {\n\t\tthis._context.restore();\n\t\treturn remove.base.call(this);\n\t},\n\n\t_setElementSize: function _setElementSize(width, height) {\n\t\tvar pixelRatio = this._pixelRatio;\n\t\t_setElementSize.base.call(this, width * pixelRatio, height * pixelRatio);\n\t\tif (pixelRatio !== 1) {\n\t\t\tvar element = this._element,\n\t\t\t\tctx = this._context;\n\t\t\tif (!PaperScope.hasAttribute(element, 'resize')) {\n\t\t\t\tvar style = element.style;\n\t\t\t\tstyle.width = width + 'px';\n\t\t\t\tstyle.height = height + 'px';\n\t\t\t}\n\t\t\tctx.restore();\n\t\t\tctx.save();\n\t\t\tctx.scale(pixelRatio, pixelRatio);\n\t\t}\n\t},\n\n\tgetPixelSize: function getPixelSize(size) {\n\t\tvar agent = paper.agent,\n\t\t\tpixels;\n\t\tif (agent && agent.firefox) {\n\t\t\tpixels = getPixelSize.base.call(this, size);\n\t\t} else {\n\t\t\tvar ctx = this._context,\n\t\t\t\tprevFont = ctx.font;\n\t\t\tctx.font = size + ' serif';\n\t\t\tpixels = parseFloat(ctx.font);\n\t\t\tctx.font = prevFont;\n\t\t}\n\t\treturn pixels;\n\t},\n\n\tgetTextWidth: function(font, lines) {\n\t\tvar ctx = this._context,\n\t\t\tprevFont = ctx.font,\n\t\t\twidth = 0;\n\t\tctx.font = font;\n\t\tfor (var i = 0, l = lines.length; i < l; i++)\n\t\t\twidth = Math.max(width, ctx.measureText(lines[i]).width);\n\t\tctx.font = prevFont;\n\t\treturn width;\n\t},\n\n\tupdate: function() {\n\t\tif (!this._needsUpdate)\n\t\t\treturn false;\n\t\tvar project = this._project,\n\t\t\tctx = this._context,\n\t\t\tsize = this._viewSize;\n\t\tctx.clearRect(0, 0, size.width + 1, size.height + 1);\n\t\tif (project)\n\t\t\tproject.draw(ctx, this._matrix, this._pixelRatio);\n\t\tthis._needsUpdate = false;\n\t\treturn true;\n\t}\n});\n\nvar Event = Base.extend({\n\t_class: 'Event',\n\n\tinitialize: function Event(event) {\n\t\tthis.event = event;\n\t\tthis.type = event && event.type;\n\t},\n\n\tprevented: false,\n\tstopped: false,\n\n\tpreventDefault: function() {\n\t\tthis.prevented = true;\n\t\tthis.event.preventDefault();\n\t},\n\n\tstopPropagation: function() {\n\t\tthis.stopped = true;\n\t\tthis.event.stopPropagation();\n\t},\n\n\tstop: function() {\n\t\tthis.stopPropagation();\n\t\tthis.preventDefault();\n\t},\n\n\tgetTimeStamp: function() {\n\t\treturn this.event.timeStamp;\n\t},\n\n\tgetModifiers: function() {\n\t\treturn Key.modifiers;\n\t}\n});\n\nvar KeyEvent = Event.extend({\n\t_class: 'KeyEvent',\n\n\tinitialize: function KeyEvent(type, event, key, character) {\n\t\tthis.type = type;\n\t\tthis.event = event;\n\t\tthis.key = key;\n\t\tthis.character = character;\n\t},\n\n\ttoString: function() {\n\t\treturn \"{ type: '\" + this.type\n\t\t\t\t+ \"', key: '\" + this.key\n\t\t\t\t+ \"', character: '\" + this.character\n\t\t\t\t+ \"', modifiers: \" + this.getModifiers()\n\t\t\t\t+ \" }\";\n\t}\n});\n\nvar Key = new function() {\n\tvar keyLookup = {\n\t\t\t'\\t': 'tab',\n\t\t\t' ': 'space',\n\t\t\t'\\b': 'backspace',\n\t\t\t'\\x7f': 'delete',\n\t\t\t'Spacebar': 'space',\n\t\t\t'Del': 'delete',\n\t\t\t'Win': 'meta',\n\t\t\t'Esc': 'escape'\n\t\t},\n\n\t\tcharLookup = {\n\t\t\t'tab': '\\t',\n\t\t\t'space': ' ',\n\t\t\t'enter': '\\r'\n\t\t},\n\n\t\tkeyMap = {},\n\t\tcharMap = {},\n\t\tmetaFixMap,\n\t\tdownKey,\n\n\t\tmodifiers = new Base({\n\t\t\tshift: false,\n\t\t\tcontrol: false,\n\t\t\talt: false,\n\t\t\tmeta: false,\n\t\t\tcapsLock: false,\n\t\t\tspace: false\n\t\t}).inject({\n\t\t\toption: {\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.alt;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcommand: {\n\t\t\t\tget: function() {\n\t\t\t\t\tvar agent = paper && paper.agent;\n\t\t\t\t\treturn agent && agent.mac ? this.meta : this.control;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\tfunction getKey(event) {\n\t\tvar key = event.key || event.keyIdentifier;\n\t\tkey = /^U\\+/.test(key)\n\t\t\t\t? String.fromCharCode(parseInt(key.substr(2), 16))\n\t\t\t\t: /^Arrow[A-Z]/.test(key) ? key.substr(5)\n\t\t\t\t: key === 'Unidentified'  || key === undefined\n\t\t\t\t\t? String.fromCharCode(event.keyCode)\n\t\t\t\t\t: key;\n\t\treturn keyLookup[key] ||\n\t\t\t\t(key.length > 1 ? Base.hyphenate(key) : key.toLowerCase());\n\t}\n\n\tfunction handleKey(down, key, character, event) {\n\t\tvar type = down ? 'keydown' : 'keyup',\n\t\t\tview = View._focused,\n\t\t\tname;\n\t\tkeyMap[key] = down;\n\t\tif (down) {\n\t\t\tcharMap[key] = character;\n\t\t} else {\n\t\t\tdelete charMap[key];\n\t\t}\n\t\tif (key.length > 1 && (name = Base.camelize(key)) in modifiers) {\n\t\t\tmodifiers[name] = down;\n\t\t\tvar agent = paper && paper.agent;\n\t\t\tif (name === 'meta' && agent && agent.mac) {\n\t\t\t\tif (down) {\n\t\t\t\t\tmetaFixMap = {};\n\t\t\t\t} else {\n\t\t\t\t\tfor (var k in metaFixMap) {\n\t\t\t\t\t\tif (k in charMap)\n\t\t\t\t\t\t\thandleKey(false, k, metaFixMap[k], event);\n\t\t\t\t\t}\n\t\t\t\t\tmetaFixMap = null;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (down && metaFixMap) {\n\t\t\tmetaFixMap[key] = character;\n\t\t}\n\t\tif (view) {\n\t\t\tview._handleKeyEvent(down ? 'keydown' : 'keyup', event, key,\n\t\t\t\t\tcharacter);\n\t\t}\n\t}\n\n\tDomEvent.add(document, {\n\t\tkeydown: function(event) {\n\t\t\tvar key = getKey(event),\n\t\t\t\tagent = paper && paper.agent;\n\t\t\tif (key.length > 1 || agent && (agent.chrome && (event.altKey\n\t\t\t\t\t\t|| agent.mac && event.metaKey\n\t\t\t\t\t\t|| !agent.mac && event.ctrlKey))) {\n\t\t\t\thandleKey(true, key,\n\t\t\t\t\t\tcharLookup[key] || (key.length > 1 ? '' : key), event);\n\t\t\t} else {\n\t\t\t\tdownKey = key;\n\t\t\t}\n\t\t},\n\n\t\tkeypress: function(event) {\n\t\t\tif (downKey) {\n\t\t\t\tvar key = getKey(event),\n\t\t\t\t\tcode = event.charCode,\n\t\t\t\t\tcharacter = code >= 32 ? String.fromCharCode(code)\n\t\t\t\t\t\t: key.length > 1 ? '' : key;\n\t\t\t\tif (key !== downKey) {\n\t\t\t\t\tkey = character.toLowerCase();\n\t\t\t\t}\n\t\t\t\thandleKey(true, key, character, event);\n\t\t\t\tdownKey = null;\n\t\t\t}\n\t\t},\n\n\t\tkeyup: function(event) {\n\t\t\tvar key = getKey(event);\n\t\t\tif (key in charMap)\n\t\t\t\thandleKey(false, key, charMap[key], event);\n\t\t}\n\t});\n\n\tDomEvent.add(window, {\n\t\tblur: function(event) {\n\t\t\tfor (var key in charMap)\n\t\t\t\thandleKey(false, key, charMap[key], event);\n\t\t}\n\t});\n\n\treturn {\n\t\tmodifiers: modifiers,\n\n\t\tisDown: function(key) {\n\t\t\treturn !!keyMap[key];\n\t\t}\n\t};\n};\n\nvar MouseEvent = Event.extend({\n\t_class: 'MouseEvent',\n\n\tinitialize: function MouseEvent(type, event, point, target, delta) {\n\t\tthis.type = type;\n\t\tthis.event = event;\n\t\tthis.point = point;\n\t\tthis.target = target;\n\t\tthis.delta = delta;\n\t},\n\n\ttoString: function() {\n\t\treturn \"{ type: '\" + this.type\n\t\t\t\t+ \"', point: \" + this.point\n\t\t\t\t+ ', target: ' + this.target\n\t\t\t\t+ (this.delta ? ', delta: ' + this.delta : '')\n\t\t\t\t+ ', modifiers: ' + this.getModifiers()\n\t\t\t\t+ ' }';\n\t}\n});\n\nvar ToolEvent = Event.extend({\n\t_class: 'ToolEvent',\n\t_item: null,\n\n\tinitialize: function ToolEvent(tool, type, event) {\n\t\tthis.tool = tool;\n\t\tthis.type = type;\n\t\tthis.event = event;\n\t},\n\n\t_choosePoint: function(point, toolPoint) {\n\t\treturn point ? point : toolPoint ? toolPoint.clone() : null;\n\t},\n\n\tgetPoint: function() {\n\t\treturn this._choosePoint(this._point, this.tool._point);\n\t},\n\n\tsetPoint: function(point) {\n\t\tthis._point = point;\n\t},\n\n\tgetLastPoint: function() {\n\t\treturn this._choosePoint(this._lastPoint, this.tool._lastPoint);\n\t},\n\n\tsetLastPoint: function(lastPoint) {\n\t\tthis._lastPoint = lastPoint;\n\t},\n\n\tgetDownPoint: function() {\n\t\treturn this._choosePoint(this._downPoint, this.tool._downPoint);\n\t},\n\n\tsetDownPoint: function(downPoint) {\n\t\tthis._downPoint = downPoint;\n\t},\n\n\tgetMiddlePoint: function() {\n\t\tif (!this._middlePoint && this.tool._lastPoint) {\n\t\t\treturn this.tool._point.add(this.tool._lastPoint).divide(2);\n\t\t}\n\t\treturn this._middlePoint;\n\t},\n\n\tsetMiddlePoint: function(middlePoint) {\n\t\tthis._middlePoint = middlePoint;\n\t},\n\n\tgetDelta: function() {\n\t\treturn !this._delta && this.tool._lastPoint\n\t\t\t\t? this.tool._point.subtract(this.tool._lastPoint)\n\t\t\t\t: this._delta;\n\t},\n\n\tsetDelta: function(delta) {\n\t\tthis._delta = delta;\n\t},\n\n\tgetCount: function() {\n\t\treturn this.tool[/^mouse(down|up)$/.test(this.type)\n\t\t\t\t? '_downCount' : '_moveCount'];\n\t},\n\n\tsetCount: function(count) {\n\t\tthis.tool[/^mouse(down|up)$/.test(this.type) ? 'downCount' : 'count']\n\t\t\t= count;\n\t},\n\n\tgetItem: function() {\n\t\tif (!this._item) {\n\t\t\tvar result = this.tool._scope.project.hitTest(this.getPoint());\n\t\t\tif (result) {\n\t\t\t\tvar item = result.item,\n\t\t\t\t\tparent = item._parent;\n\t\t\t\twhile (/^(Group|CompoundPath)$/.test(parent._class)) {\n\t\t\t\t\titem = parent;\n\t\t\t\t\tparent = parent._parent;\n\t\t\t\t}\n\t\t\t\tthis._item = item;\n\t\t\t}\n\t\t}\n\t\treturn this._item;\n\t},\n\n\tsetItem: function(item) {\n\t\tthis._item = item;\n\t},\n\n\ttoString: function() {\n\t\treturn '{ type: ' + this.type\n\t\t\t\t+ ', point: ' + this.getPoint()\n\t\t\t\t+ ', count: ' + this.getCount()\n\t\t\t\t+ ', modifiers: ' + this.getModifiers()\n\t\t\t\t+ ' }';\n\t}\n});\n\nvar Tool = PaperScopeItem.extend({\n\t_class: 'Tool',\n\t_list: 'tools',\n\t_reference: 'tool',\n\t_events: ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onMouseMove',\n\t\t\t'onActivate', 'onDeactivate', 'onEditOptions', 'onKeyDown',\n\t\t\t'onKeyUp'],\n\n\tinitialize: function Tool(props) {\n\t\tPaperScopeItem.call(this);\n\t\tthis._moveCount = -1;\n\t\tthis._downCount = -1;\n\t\tthis.set(props);\n\t},\n\n\tgetMinDistance: function() {\n\t\treturn this._minDistance;\n\t},\n\n\tsetMinDistance: function(minDistance) {\n\t\tthis._minDistance = minDistance;\n\t\tif (minDistance != null && this._maxDistance != null\n\t\t\t\t&& minDistance > this._maxDistance) {\n\t\t\tthis._maxDistance = minDistance;\n\t\t}\n\t},\n\n\tgetMaxDistance: function() {\n\t\treturn this._maxDistance;\n\t},\n\n\tsetMaxDistance: function(maxDistance) {\n\t\tthis._maxDistance = maxDistance;\n\t\tif (this._minDistance != null && maxDistance != null\n\t\t\t\t&& maxDistance < this._minDistance) {\n\t\t\tthis._minDistance = maxDistance;\n\t\t}\n\t},\n\n\tgetFixedDistance: function() {\n\t\treturn this._minDistance == this._maxDistance\n\t\t\t? this._minDistance : null;\n\t},\n\n\tsetFixedDistance: function(distance) {\n\t\tthis._minDistance = this._maxDistance = distance;\n\t},\n\n\t_handleMouseEvent: function(type, event, point, mouse) {\n\t\tpaper = this._scope;\n\t\tif (mouse.drag && !this.responds(type))\n\t\t\ttype = 'mousemove';\n\t\tvar move = mouse.move || mouse.drag,\n\t\t\tresponds = this.responds(type),\n\t\t\tminDistance = this.minDistance,\n\t\t\tmaxDistance = this.maxDistance,\n\t\t\tcalled = false,\n\t\t\ttool = this;\n\t\tfunction update(minDistance, maxDistance) {\n\t\t\tvar pt = point,\n\t\t\t\ttoolPoint = move ? tool._point : (tool._downPoint || pt);\n\t\t\tif (move) {\n\t\t\t\tif (tool._moveCount && pt.equals(toolPoint)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (toolPoint && (minDistance != null || maxDistance != null)) {\n\t\t\t\t\tvar vector = pt.subtract(toolPoint),\n\t\t\t\t\t\tdistance = vector.getLength();\n\t\t\t\t\tif (distance < (minDistance || 0))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif (maxDistance) {\n\t\t\t\t\t\tpt = toolPoint.add(vector.normalize(\n\t\t\t\t\t\t\t\tMath.min(distance, maxDistance)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttool._moveCount++;\n\t\t\t}\n\t\t\ttool._point = pt;\n\t\t\ttool._lastPoint = toolPoint || pt;\n\t\t\tif (mouse.down) {\n\t\t\t\ttool._moveCount = -1;\n\t\t\t\ttool._downPoint = pt;\n\t\t\t\ttool._downCount++;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tfunction emit() {\n\t\t\tif (responds) {\n\t\t\t\tcalled = tool.emit(type, new ToolEvent(tool, type, event))\n\t\t\t\t\t\t|| called;\n\t\t\t}\n\t\t}\n\n\t\tif (mouse.down) {\n\t\t\tupdate();\n\t\t\temit();\n\t\t} else if (mouse.up) {\n\t\t\tupdate(null, maxDistance);\n\t\t\temit();\n\t\t} else if (responds) {\n\t\t\twhile (update(minDistance, maxDistance))\n\t\t\t\temit();\n\t\t}\n\t\treturn called;\n\t}\n\n});\n\nvar Http = {\n\trequest: function(options) {\n\t\tvar xhr = new self.XMLHttpRequest();\n\t\txhr.open((options.method || 'get').toUpperCase(), options.url,\n\t\t\t\tBase.pick(options.async, true));\n\t\tif (options.mimeType)\n\t\t\txhr.overrideMimeType(options.mimeType);\n\t\txhr.onload = function() {\n\t\t\tvar status = xhr.status;\n\t\t\tif (status === 0 || status === 200) {\n\t\t\t\tif (options.onLoad) {\n\t\t\t\t\toptions.onLoad.call(xhr, xhr.responseText);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\txhr.onerror();\n\t\t\t}\n\t\t};\n\t\txhr.onerror = function() {\n\t\t\tvar status = xhr.status,\n\t\t\t\tmessage = 'Could not load \"' + options.url + '\" (Status: '\n\t\t\t\t\t\t+ status + ')';\n\t\t\tif (options.onError) {\n\t\t\t\toptions.onError(message, status);\n\t\t\t} else {\n\t\t\t\tthrow new Error(message);\n\t\t\t}\n\t\t};\n\t\treturn xhr.send(null);\n\t}\n};\n\nvar CanvasProvider = {\n\tcanvases: [],\n\n\tgetCanvas: function(width, height) {\n\t\tif (!window)\n\t\t\treturn null;\n\t\tvar canvas,\n\t\t\tclear = true;\n\t\tif (typeof width === 'object') {\n\t\t\theight = width.height;\n\t\t\twidth = width.width;\n\t\t}\n\t\tif (this.canvases.length) {\n\t\t\tcanvas = this.canvases.pop();\n\t\t} else {\n\t\t\tcanvas = document.createElement('canvas');\n\t\t\tclear = false;\n\t\t}\n\t\tvar ctx = canvas.getContext('2d');\n\t\tif (!ctx) {\n\t\t\tthrow new Error('Canvas ' + canvas +\n\t\t\t\t\t' is unable to provide a 2D context.');\n\t\t}\n\t\tif (canvas.width === width && canvas.height === height) {\n\t\t\tif (clear)\n\t\t\t\tctx.clearRect(0, 0, width + 1, height + 1);\n\t\t} else {\n\t\t\tcanvas.width = width;\n\t\t\tcanvas.height = height;\n\t\t}\n\t\tctx.save();\n\t\treturn canvas;\n\t},\n\n\tgetContext: function(width, height) {\n\t\tvar canvas = this.getCanvas(width, height);\n\t\treturn canvas ? canvas.getContext('2d') : null;\n\t},\n\n\trelease: function(obj) {\n\t\tvar canvas = obj && obj.canvas ? obj.canvas : obj;\n\t\tif (canvas && canvas.getContext) {\n\t\t\tcanvas.getContext('2d').restore();\n\t\t\tthis.canvases.push(canvas);\n\t\t}\n\t}\n};\n\nvar BlendMode = new function() {\n\tvar min = Math.min,\n\t\tmax = Math.max,\n\t\tabs = Math.abs,\n\t\tsr, sg, sb, sa,\n\t\tbr, bg, bb, ba,\n\t\tdr, dg, db;\n\n\tfunction getLum(r, g, b) {\n\t\treturn 0.2989 * r + 0.587 * g + 0.114 * b;\n\t}\n\n\tfunction setLum(r, g, b, l) {\n\t\tvar d = l - getLum(r, g, b);\n\t\tdr = r + d;\n\t\tdg = g + d;\n\t\tdb = b + d;\n\t\tvar l = getLum(dr, dg, db),\n\t\t\tmn = min(dr, dg, db),\n\t\t\tmx = max(dr, dg, db);\n\t\tif (mn < 0) {\n\t\t\tvar lmn = l - mn;\n\t\t\tdr = l + (dr - l) * l / lmn;\n\t\t\tdg = l + (dg - l) * l / lmn;\n\t\t\tdb = l + (db - l) * l / lmn;\n\t\t}\n\t\tif (mx > 255) {\n\t\t\tvar ln = 255 - l,\n\t\t\t\tmxl = mx - l;\n\t\t\tdr = l + (dr - l) * ln / mxl;\n\t\t\tdg = l + (dg - l) * ln / mxl;\n\t\t\tdb = l + (db - l) * ln / mxl;\n\t\t}\n\t}\n\n\tfunction getSat(r, g, b) {\n\t\treturn max(r, g, b) - min(r, g, b);\n\t}\n\n\tfunction setSat(r, g, b, s) {\n\t\tvar col = [r, g, b],\n\t\t\tmx = max(r, g, b),\n\t\t\tmn = min(r, g, b),\n\t\t\tmd;\n\t\tmn = mn === r ? 0 : mn === g ? 1 : 2;\n\t\tmx = mx === r ? 0 : mx === g ? 1 : 2;\n\t\tmd = min(mn, mx) === 0 ? max(mn, mx) === 1 ? 2 : 1 : 0;\n\t\tif (col[mx] > col[mn]) {\n\t\t\tcol[md] = (col[md] - col[mn]) * s / (col[mx] - col[mn]);\n\t\t\tcol[mx] = s;\n\t\t} else {\n\t\t\tcol[md] = col[mx] = 0;\n\t\t}\n\t\tcol[mn] = 0;\n\t\tdr = col[0];\n\t\tdg = col[1];\n\t\tdb = col[2];\n\t}\n\n\tvar modes = {\n\t\tmultiply: function() {\n\t\t\tdr = br * sr / 255;\n\t\t\tdg = bg * sg / 255;\n\t\t\tdb = bb * sb / 255;\n\t\t},\n\n\t\tscreen: function() {\n\t\t\tdr = br + sr - (br * sr / 255);\n\t\t\tdg = bg + sg - (bg * sg / 255);\n\t\t\tdb = bb + sb - (bb * sb / 255);\n\t\t},\n\n\t\toverlay: function() {\n\t\t\tdr = br < 128 ? 2 * br * sr / 255 : 255 - 2 * (255 - br) * (255 - sr) / 255;\n\t\t\tdg = bg < 128 ? 2 * bg * sg / 255 : 255 - 2 * (255 - bg) * (255 - sg) / 255;\n\t\t\tdb = bb < 128 ? 2 * bb * sb / 255 : 255 - 2 * (255 - bb) * (255 - sb) / 255;\n\t\t},\n\n\t\t'soft-light': function() {\n\t\t\tvar t = sr * br / 255;\n\t\t\tdr = t + br * (255 - (255 - br) * (255 - sr) / 255 - t) / 255;\n\t\t\tt = sg * bg / 255;\n\t\t\tdg = t + bg * (255 - (255 - bg) * (255 - sg) / 255 - t) / 255;\n\t\t\tt = sb * bb / 255;\n\t\t\tdb = t + bb * (255 - (255 - bb) * (255 - sb) / 255 - t) / 255;\n\t\t},\n\n\t\t'hard-light': function() {\n\t\t\tdr = sr < 128 ? 2 * sr * br / 255 : 255 - 2 * (255 - sr) * (255 - br) / 255;\n\t\t\tdg = sg < 128 ? 2 * sg * bg / 255 : 255 - 2 * (255 - sg) * (255 - bg) / 255;\n\t\t\tdb = sb < 128 ? 2 * sb * bb / 255 : 255 - 2 * (255 - sb) * (255 - bb) / 255;\n\t\t},\n\n\t\t'color-dodge': function() {\n\t\t\tdr = br === 0 ? 0 : sr === 255 ? 255 : min(255, 255 * br / (255 - sr));\n\t\t\tdg = bg === 0 ? 0 : sg === 255 ? 255 : min(255, 255 * bg / (255 - sg));\n\t\t\tdb = bb === 0 ? 0 : sb === 255 ? 255 : min(255, 255 * bb / (255 - sb));\n\t\t},\n\n\t\t'color-burn': function() {\n\t\t\tdr = br === 255 ? 255 : sr === 0 ? 0 : max(0, 255 - (255 - br) * 255 / sr);\n\t\t\tdg = bg === 255 ? 255 : sg === 0 ? 0 : max(0, 255 - (255 - bg) * 255 / sg);\n\t\t\tdb = bb === 255 ? 255 : sb === 0 ? 0 : max(0, 255 - (255 - bb) * 255 / sb);\n\t\t},\n\n\t\tdarken: function() {\n\t\t\tdr = br < sr ? br : sr;\n\t\t\tdg = bg < sg ? bg : sg;\n\t\t\tdb = bb < sb ? bb : sb;\n\t\t},\n\n\t\tlighten: function() {\n\t\t\tdr = br > sr ? br : sr;\n\t\t\tdg = bg > sg ? bg : sg;\n\t\t\tdb = bb > sb ? bb : sb;\n\t\t},\n\n\t\tdifference: function() {\n\t\t\tdr = br - sr;\n\t\t\tif (dr < 0)\n\t\t\t\tdr = -dr;\n\t\t\tdg = bg - sg;\n\t\t\tif (dg < 0)\n\t\t\t\tdg = -dg;\n\t\t\tdb = bb - sb;\n\t\t\tif (db < 0)\n\t\t\t\tdb = -db;\n\t\t},\n\n\t\texclusion: function() {\n\t\t\tdr = br + sr * (255 - br - br) / 255;\n\t\t\tdg = bg + sg * (255 - bg - bg) / 255;\n\t\t\tdb = bb + sb * (255 - bb - bb) / 255;\n\t\t},\n\n\t\thue: function() {\n\t\t\tsetSat(sr, sg, sb, getSat(br, bg, bb));\n\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));\n\t\t},\n\n\t\tsaturation: function() {\n\t\t\tsetSat(br, bg, bb, getSat(sr, sg, sb));\n\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));\n\t\t},\n\n\t\tluminosity: function() {\n\t\t\tsetLum(br, bg, bb, getLum(sr, sg, sb));\n\t\t},\n\n\t\tcolor: function() {\n\t\t\tsetLum(sr, sg, sb, getLum(br, bg, bb));\n\t\t},\n\n\t\tadd: function() {\n\t\t\tdr = min(br + sr, 255);\n\t\t\tdg = min(bg + sg, 255);\n\t\t\tdb = min(bb + sb, 255);\n\t\t},\n\n\t\tsubtract: function() {\n\t\t\tdr = max(br - sr, 0);\n\t\t\tdg = max(bg - sg, 0);\n\t\t\tdb = max(bb - sb, 0);\n\t\t},\n\n\t\taverage: function() {\n\t\t\tdr = (br + sr) / 2;\n\t\t\tdg = (bg + sg) / 2;\n\t\t\tdb = (bb + sb) / 2;\n\t\t},\n\n\t\tnegation: function() {\n\t\t\tdr = 255 - abs(255 - sr - br);\n\t\t\tdg = 255 - abs(255 - sg - bg);\n\t\t\tdb = 255 - abs(255 - sb - bb);\n\t\t}\n\t};\n\n\tvar nativeModes = this.nativeModes = Base.each([\n\t\t'source-over', 'source-in', 'source-out', 'source-atop',\n\t\t'destination-over', 'destination-in', 'destination-out',\n\t\t'destination-atop', 'lighter', 'darker', 'copy', 'xor'\n\t], function(mode) {\n\t\tthis[mode] = true;\n\t}, {});\n\n\tvar ctx = CanvasProvider.getContext(1, 1);\n\tif (ctx) {\n\t\tBase.each(modes, function(func, mode) {\n\t\t\tvar darken = mode === 'darken',\n\t\t\t\tok = false;\n\t\t\tctx.save();\n\t\t\ttry {\n\t\t\t\tctx.fillStyle = darken ? '#300' : '#a00';\n\t\t\t\tctx.fillRect(0, 0, 1, 1);\n\t\t\t\tctx.globalCompositeOperation = mode;\n\t\t\t\tif (ctx.globalCompositeOperation === mode) {\n\t\t\t\t\tctx.fillStyle = darken ? '#a00' : '#300';\n\t\t\t\t\tctx.fillRect(0, 0, 1, 1);\n\t\t\t\t\tok = ctx.getImageData(0, 0, 1, 1).data[0] !== darken\n\t\t\t\t\t\t\t? 170 : 51;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t\tctx.restore();\n\t\t\tnativeModes[mode] = ok;\n\t\t});\n\t\tCanvasProvider.release(ctx);\n\t}\n\n\tthis.process = function(mode, srcContext, dstContext, alpha, offset) {\n\t\tvar srcCanvas = srcContext.canvas,\n\t\t\tnormal = mode === 'normal';\n\t\tif (normal || nativeModes[mode]) {\n\t\t\tdstContext.save();\n\t\t\tdstContext.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\tdstContext.globalAlpha = alpha;\n\t\t\tif (!normal)\n\t\t\t\tdstContext.globalCompositeOperation = mode;\n\t\t\tdstContext.drawImage(srcCanvas, offset.x, offset.y);\n\t\t\tdstContext.restore();\n\t\t} else {\n\t\t\tvar process = modes[mode];\n\t\t\tif (!process)\n\t\t\t\treturn;\n\t\t\tvar dstData = dstContext.getImageData(offset.x, offset.y,\n\t\t\t\t\tsrcCanvas.width, srcCanvas.height),\n\t\t\t\tdst = dstData.data,\n\t\t\t\tsrc = srcContext.getImageData(0, 0,\n\t\t\t\t\tsrcCanvas.width, srcCanvas.height).data;\n\t\t\tfor (var i = 0, l = dst.length; i < l; i += 4) {\n\t\t\t\tsr = src[i];\n\t\t\t\tbr = dst[i];\n\t\t\t\tsg = src[i + 1];\n\t\t\t\tbg = dst[i + 1];\n\t\t\t\tsb = src[i + 2];\n\t\t\t\tbb = dst[i + 2];\n\t\t\t\tsa = src[i + 3];\n\t\t\t\tba = dst[i + 3];\n\t\t\t\tprocess();\n\t\t\t\tvar a1 = sa * alpha / 255,\n\t\t\t\t\ta2 = 1 - a1;\n\t\t\t\tdst[i] = a1 * dr + a2 * br;\n\t\t\t\tdst[i + 1] = a1 * dg + a2 * bg;\n\t\t\t\tdst[i + 2] = a1 * db + a2 * bb;\n\t\t\t\tdst[i + 3] = sa * alpha + a2 * ba;\n\t\t\t}\n\t\t\tdstContext.putImageData(dstData, offset.x, offset.y);\n\t\t}\n\t};\n};\n\nvar SvgElement = new function() {\n\tvar svg = 'http://www.w3.org/2000/svg',\n\t\txmlns = 'http://www.w3.org/2000/xmlns',\n\t\txlink = 'http://www.w3.org/1999/xlink',\n\t\tattributeNamespace = {\n\t\t\thref: xlink,\n\t\t\txlink: xmlns,\n\t\t\txmlns: xmlns + '/',\n\t\t\t'xmlns:xlink': xmlns + '/'\n\t\t};\n\n\tfunction create(tag, attributes, formatter) {\n\t\treturn set(document.createElementNS(svg, tag), attributes, formatter);\n\t}\n\n\tfunction get(node, name) {\n\t\tvar namespace = attributeNamespace[name],\n\t\t\tvalue = namespace\n\t\t\t\t? node.getAttributeNS(namespace, name)\n\t\t\t\t: node.getAttribute(name);\n\t\treturn value === 'null' ? null : value;\n\t}\n\n\tfunction set(node, attributes, formatter) {\n\t\tfor (var name in attributes) {\n\t\t\tvar value = attributes[name],\n\t\t\t\tnamespace = attributeNamespace[name];\n\t\t\tif (typeof value === 'number' && formatter)\n\t\t\t\tvalue = formatter.number(value);\n\t\t\tif (namespace) {\n\t\t\t\tnode.setAttributeNS(namespace, name, value);\n\t\t\t} else {\n\t\t\t\tnode.setAttribute(name, value);\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\n\treturn {\n\t\tsvg: svg,\n\t\txmlns: xmlns,\n\t\txlink: xlink,\n\n\t\tcreate: create,\n\t\tget: get,\n\t\tset: set\n\t};\n};\n\nvar SvgStyles = Base.each({\n\tfillColor: ['fill', 'color'],\n\tfillRule: ['fill-rule', 'string'],\n\tstrokeColor: ['stroke', 'color'],\n\tstrokeWidth: ['stroke-width', 'number'],\n\tstrokeCap: ['stroke-linecap', 'string'],\n\tstrokeJoin: ['stroke-linejoin', 'string'],\n\tstrokeScaling: ['vector-effect', 'lookup', {\n\t\ttrue: 'none',\n\t\tfalse: 'non-scaling-stroke'\n\t}, function(item, value) {\n\t\treturn !value\n\t\t\t\t&& (item instanceof PathItem\n\t\t\t\t\t|| item instanceof Shape\n\t\t\t\t\t|| item instanceof TextItem);\n\t}],\n\tmiterLimit: ['stroke-miterlimit', 'number'],\n\tdashArray: ['stroke-dasharray', 'array'],\n\tdashOffset: ['stroke-dashoffset', 'number'],\n\tfontFamily: ['font-family', 'string'],\n\tfontWeight: ['font-weight', 'string'],\n\tfontSize: ['font-size', 'number'],\n\tjustification: ['text-anchor', 'lookup', {\n\t\tleft: 'start',\n\t\tcenter: 'middle',\n\t\tright: 'end'\n\t}],\n\topacity: ['opacity', 'number'],\n\tblendMode: ['mix-blend-mode', 'style']\n}, function(entry, key) {\n\tvar part = Base.capitalize(key),\n\t\tlookup = entry[2];\n\tthis[key] = {\n\t\ttype: entry[1],\n\t\tproperty: key,\n\t\tattribute: entry[0],\n\t\ttoSVG: lookup,\n\t\tfromSVG: lookup && Base.each(lookup, function(value, name) {\n\t\t\tthis[value] = name;\n\t\t}, {}),\n\t\texportFilter: entry[3],\n\t\tget: 'get' + part,\n\t\tset: 'set' + part\n\t};\n}, {});\n\nnew function() {\n\tvar formatter;\n\n\tfunction getTransform(matrix, coordinates, center) {\n\t\tvar attrs = new Base(),\n\t\t\ttrans = matrix.getTranslation();\n\t\tif (coordinates) {\n\t\t\tmatrix = matrix._shiftless();\n\t\t\tvar point = matrix._inverseTransform(trans);\n\t\t\tattrs[center ? 'cx' : 'x'] = point.x;\n\t\t\tattrs[center ? 'cy' : 'y'] = point.y;\n\t\t\ttrans = null;\n\t\t}\n\t\tif (!matrix.isIdentity()) {\n\t\t\tvar decomposed = matrix.decompose();\n\t\t\tif (decomposed) {\n\t\t\t\tvar parts = [],\n\t\t\t\t\tangle = decomposed.rotation,\n\t\t\t\t\tscale = decomposed.scaling,\n\t\t\t\t\tskew = decomposed.skewing;\n\t\t\t\tif (trans && !trans.isZero())\n\t\t\t\t\tparts.push('translate(' + formatter.point(trans) + ')');\n\t\t\t\tif (angle)\n\t\t\t\t\tparts.push('rotate(' + formatter.number(angle) + ')');\n\t\t\t\tif (!Numerical.isZero(scale.x - 1)\n\t\t\t\t\t\t|| !Numerical.isZero(scale.y - 1))\n\t\t\t\t\tparts.push('scale(' + formatter.point(scale) +')');\n\t\t\t\tif (skew.x)\n\t\t\t\t\tparts.push('skewX(' + formatter.number(skew.x) + ')');\n\t\t\t\tif (skew.y)\n\t\t\t\t\tparts.push('skewY(' + formatter.number(skew.y) + ')');\n\t\t\t\tattrs.transform = parts.join(' ');\n\t\t\t} else {\n\t\t\t\tattrs.transform = 'matrix(' + matrix.getValues().join(',') + ')';\n\t\t\t}\n\t\t}\n\t\treturn attrs;\n\t}\n\n\tfunction exportGroup(item, options) {\n\t\tvar attrs = getTransform(item._matrix),\n\t\t\tchildren = item._children;\n\t\tvar node = SvgElement.create('g', attrs, formatter);\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar child = children[i];\n\t\t\tvar childNode = exportSVG(child, options);\n\t\t\tif (childNode) {\n\t\t\t\tif (child.isClipMask()) {\n\t\t\t\t\tvar clip = SvgElement.create('clipPath');\n\t\t\t\t\tclip.appendChild(childNode);\n\t\t\t\t\tsetDefinition(child, clip, 'clip');\n\t\t\t\t\tSvgElement.set(node, {\n\t\t\t\t\t\t'clip-path': 'url(#' + clip.id + ')'\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\n\tfunction exportRaster(item, options) {\n\t\tvar attrs = getTransform(item._matrix, true),\n\t\t\tsize = item.getSize(),\n\t\t\timage = item.getImage();\n\t\tattrs.x -= size.width / 2;\n\t\tattrs.y -= size.height / 2;\n\t\tattrs.width = size.width;\n\t\tattrs.height = size.height;\n\t\tattrs.href = options.embedImages == false && image && image.src\n\t\t\t\t|| item.toDataURL();\n\t\treturn SvgElement.create('image', attrs, formatter);\n\t}\n\n\tfunction exportPath(item, options) {\n\t\tvar matchShapes = options.matchShapes;\n\t\tif (matchShapes) {\n\t\t\tvar shape = item.toShape(false);\n\t\t\tif (shape)\n\t\t\t\treturn exportShape(shape, options);\n\t\t}\n\t\tvar segments = item._segments,\n\t\t\tlength = segments.length,\n\t\t\ttype,\n\t\t\tattrs = getTransform(item._matrix);\n\t\tif (matchShapes && length >= 2 && !item.hasHandles()) {\n\t\t\tif (length > 2) {\n\t\t\t\ttype = item._closed ? 'polygon' : 'polyline';\n\t\t\t\tvar parts = [];\n\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\tparts.push(formatter.point(segments[i]._point));\n\t\t\t\t}\n\t\t\t\tattrs.points = parts.join(' ');\n\t\t\t} else {\n\t\t\t\ttype = 'line';\n\t\t\t\tvar start = segments[0]._point,\n\t\t\t\t\tend = segments[1]._point;\n\t\t\t\tattrs.set({\n\t\t\t\t\tx1: start.x,\n\t\t\t\t\ty1: start.y,\n\t\t\t\t\tx2: end.x,\n\t\t\t\t\ty2: end.y\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\ttype = 'path';\n\t\t\tattrs.d = item.getPathData(null, options.precision);\n\t\t}\n\t\treturn SvgElement.create(type, attrs, formatter);\n\t}\n\n\tfunction exportShape(item) {\n\t\tvar type = item._type,\n\t\t\tradius = item._radius,\n\t\t\tattrs = getTransform(item._matrix, true, type !== 'rectangle');\n\t\tif (type === 'rectangle') {\n\t\t\ttype = 'rect';\n\t\t\tvar size = item._size,\n\t\t\t\twidth = size.width,\n\t\t\t\theight = size.height;\n\t\t\tattrs.x -= width / 2;\n\t\t\tattrs.y -= height / 2;\n\t\t\tattrs.width = width;\n\t\t\tattrs.height = height;\n\t\t\tif (radius.isZero())\n\t\t\t\tradius = null;\n\t\t}\n\t\tif (radius) {\n\t\t\tif (type === 'circle') {\n\t\t\t\tattrs.r = radius;\n\t\t\t} else {\n\t\t\t\tattrs.rx = radius.width;\n\t\t\t\tattrs.ry = radius.height;\n\t\t\t}\n\t\t}\n\t\treturn SvgElement.create(type, attrs, formatter);\n\t}\n\n\tfunction exportCompoundPath(item, options) {\n\t\tvar attrs = getTransform(item._matrix);\n\t\tvar data = item.getPathData(null, options.precision);\n\t\tif (data)\n\t\t\tattrs.d = data;\n\t\treturn SvgElement.create('path', attrs, formatter);\n\t}\n\n\tfunction exportSymbolItem(item, options) {\n\t\tvar attrs = getTransform(item._matrix, true),\n\t\t\tdefinition = item._definition,\n\t\t\tnode = getDefinition(definition, 'symbol'),\n\t\t\tdefinitionItem = definition._item,\n\t\t\tbounds = definitionItem.getBounds();\n\t\tif (!node) {\n\t\t\tnode = SvgElement.create('symbol', {\n\t\t\t\tviewBox: formatter.rectangle(bounds)\n\t\t\t});\n\t\t\tnode.appendChild(exportSVG(definitionItem, options));\n\t\t\tsetDefinition(definition, node, 'symbol');\n\t\t}\n\t\tattrs.href = '#' + node.id;\n\t\tattrs.x += bounds.x;\n\t\tattrs.y += bounds.y;\n\t\tattrs.width = bounds.width;\n\t\tattrs.height = bounds.height;\n\t\tattrs.overflow = 'visible';\n\t\treturn SvgElement.create('use', attrs, formatter);\n\t}\n\n\tfunction exportGradient(color) {\n\t\tvar gradientNode = getDefinition(color, 'color');\n\t\tif (!gradientNode) {\n\t\t\tvar gradient = color.getGradient(),\n\t\t\t\tradial = gradient._radial,\n\t\t\t\torigin = color.getOrigin(),\n\t\t\t\tdestination = color.getDestination(),\n\t\t\t\tattrs;\n\t\t\tif (radial) {\n\t\t\t\tattrs = {\n\t\t\t\t\tcx: origin.x,\n\t\t\t\t\tcy: origin.y,\n\t\t\t\t\tr: origin.getDistance(destination)\n\t\t\t\t};\n\t\t\t\tvar highlight = color.getHighlight();\n\t\t\t\tif (highlight) {\n\t\t\t\t\tattrs.fx = highlight.x;\n\t\t\t\t\tattrs.fy = highlight.y;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tattrs = {\n\t\t\t\t\tx1: origin.x,\n\t\t\t\t\ty1: origin.y,\n\t\t\t\t\tx2: destination.x,\n\t\t\t\t\ty2: destination.y\n\t\t\t\t};\n\t\t\t}\n\t\t\tattrs.gradientUnits = 'userSpaceOnUse';\n\t\t\tgradientNode = SvgElement.create((radial ? 'radial' : 'linear')\n\t\t\t\t\t+ 'Gradient', attrs, formatter);\n\t\t\tvar stops = gradient._stops;\n\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {\n\t\t\t\tvar stop = stops[i],\n\t\t\t\t\tstopColor = stop._color,\n\t\t\t\t\talpha = stopColor.getAlpha(),\n\t\t\t\t\toffset = stop._offset;\n\t\t\t\tattrs = {\n\t\t\t\t\toffset: offset == null ? i / (l - 1) : offset\n\t\t\t\t};\n\t\t\t\tif (stopColor)\n\t\t\t\t\tattrs['stop-color'] = stopColor.toCSS(true);\n\t\t\t\tif (alpha < 1)\n\t\t\t\t\tattrs['stop-opacity'] = alpha;\n\t\t\t\tgradientNode.appendChild(\n\t\t\t\t\t\tSvgElement.create('stop', attrs, formatter));\n\t\t\t}\n\t\t\tsetDefinition(color, gradientNode, 'color');\n\t\t}\n\t\treturn 'url(#' + gradientNode.id + ')';\n\t}\n\n\tfunction exportText(item) {\n\t\tvar node = SvgElement.create('text', getTransform(item._matrix, true),\n\t\t\t\tformatter);\n\t\tnode.textContent = item._content;\n\t\treturn node;\n\t}\n\n\tvar exporters = {\n\t\tGroup: exportGroup,\n\t\tLayer: exportGroup,\n\t\tRaster: exportRaster,\n\t\tPath: exportPath,\n\t\tShape: exportShape,\n\t\tCompoundPath: exportCompoundPath,\n\t\tSymbolItem: exportSymbolItem,\n\t\tPointText: exportText\n\t};\n\n\tfunction applyStyle(item, node, isRoot) {\n\t\tvar attrs = {},\n\t\t\tparent = !isRoot && item.getParent(),\n\t\t\tstyle = [];\n\n\t\tif (item._name != null)\n\t\t\tattrs.id = item._name;\n\n\t\tBase.each(SvgStyles, function(entry) {\n\t\t\tvar get = entry.get,\n\t\t\t\ttype = entry.type,\n\t\t\t\tvalue = item[get]();\n\t\t\tif (entry.exportFilter\n\t\t\t\t\t? entry.exportFilter(item, value)\n\t\t\t\t\t: !parent || !Base.equals(parent[get](), value)) {\n\t\t\t\tif (type === 'color' && value != null) {\n\t\t\t\t\tvar alpha = value.getAlpha();\n\t\t\t\t\tif (alpha < 1)\n\t\t\t\t\t\tattrs[entry.attribute + '-opacity'] = alpha;\n\t\t\t\t}\n\t\t\t\tif (type === 'style') {\n\t\t\t\t\tstyle.push(entry.attribute + ': ' + value);\n\t\t\t\t} else {\n\t\t\t\t\tattrs[entry.attribute] = value == null ? 'none'\n\t\t\t\t\t\t\t: type === 'color' ? value.gradient\n\t\t\t\t\t\t\t\t? exportGradient(value, item)\n\t\t\t\t\t\t\t\t: value.toCSS(true)\n\t\t\t\t\t\t\t: type === 'array' ? value.join(',')\n\t\t\t\t\t\t\t: type === 'lookup' ? entry.toSVG[value]\n\t\t\t\t\t\t\t: value;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (style.length)\n\t\t\tattrs.style = style.join(';');\n\n\t\tif (attrs.opacity === 1)\n\t\t\tdelete attrs.opacity;\n\n\t\tif (!item._visible)\n\t\t\tattrs.visibility = 'hidden';\n\n\t\treturn SvgElement.set(node, attrs, formatter);\n\t}\n\n\tvar definitions;\n\tfunction getDefinition(item, type) {\n\t\tif (!definitions)\n\t\t\tdefinitions = { ids: {}, svgs: {} };\n\t\treturn item && definitions.svgs[type + '-'\n\t\t\t\t+ (item._id || item.__id || (item.__id = UID.get('svg')))];\n\t}\n\n\tfunction setDefinition(item, node, type) {\n\t\tif (!definitions)\n\t\t\tgetDefinition();\n\t\tvar typeId = definitions.ids[type] = (definitions.ids[type] || 0) + 1;\n\t\tnode.id = type + '-' + typeId;\n\t\tdefinitions.svgs[type + '-' + (item._id || item.__id)] = node;\n\t}\n\n\tfunction exportDefinitions(node, options) {\n\t\tvar svg = node,\n\t\t\tdefs = null;\n\t\tif (definitions) {\n\t\t\tsvg = node.nodeName.toLowerCase() === 'svg' && node;\n\t\t\tfor (var i in definitions.svgs) {\n\t\t\t\tif (!defs) {\n\t\t\t\t\tif (!svg) {\n\t\t\t\t\t\tsvg = SvgElement.create('svg');\n\t\t\t\t\t\tsvg.appendChild(node);\n\t\t\t\t\t}\n\t\t\t\t\tdefs = svg.insertBefore(SvgElement.create('defs'),\n\t\t\t\t\t\t\tsvg.firstChild);\n\t\t\t\t}\n\t\t\t\tdefs.appendChild(definitions.svgs[i]);\n\t\t\t}\n\t\t\tdefinitions = null;\n\t\t}\n\t\treturn options.asString\n\t\t\t\t? new self.XMLSerializer().serializeToString(svg)\n\t\t\t\t: svg;\n\t}\n\n\tfunction exportSVG(item, options, isRoot) {\n\t\tvar exporter = exporters[item._class],\n\t\t\tnode = exporter && exporter(item, options);\n\t\tif (node) {\n\t\t\tvar onExport = options.onExport;\n\t\t\tif (onExport)\n\t\t\t\tnode = onExport(item, node, options) || node;\n\t\t\tvar data = JSON.stringify(item._data);\n\t\t\tif (data && data !== '{}' && data !== 'null')\n\t\t\t\tnode.setAttribute('data-paper-data', data);\n\t\t}\n\t\treturn node && applyStyle(item, node, isRoot);\n\t}\n\n\tfunction setOptions(options) {\n\t\tif (!options)\n\t\t\toptions = {};\n\t\tformatter = new Formatter(options.precision);\n\t\treturn options;\n\t}\n\n\tItem.inject({\n\t\texportSVG: function(options) {\n\t\t\toptions = setOptions(options);\n\t\t\treturn exportDefinitions(exportSVG(this, options, true), options);\n\t\t}\n\t});\n\n\tProject.inject({\n\t\texportSVG: function(options) {\n\t\t\toptions = setOptions(options);\n\t\t\tvar children = this._children,\n\t\t\t\tview = this.getView(),\n\t\t\t\tbounds = Base.pick(options.bounds, 'view'),\n\t\t\t\tmx = options.matrix || bounds === 'view' && view._matrix,\n\t\t\t\tmatrix = mx && Matrix.read([mx]),\n\t\t\t\trect = bounds === 'view'\n\t\t\t\t\t? new Rectangle([0, 0], view.getViewSize())\n\t\t\t\t\t: bounds === 'content'\n\t\t\t\t\t\t? Item._getBounds(children, matrix, { stroke: true })\n\t\t\t\t\t\t\t.rect\n\t\t\t\t\t\t: Rectangle.read([bounds], 0, { readNull: true }),\n\t\t\t\tattrs = {\n\t\t\t\t\tversion: '1.1',\n\t\t\t\t\txmlns: SvgElement.svg,\n\t\t\t\t\t'xmlns:xlink': SvgElement.xlink,\n\t\t\t\t};\n\t\t\tif (rect) {\n\t\t\t\tattrs.width = rect.width;\n\t\t\t\tattrs.height = rect.height;\n\t\t\t\tif (rect.x || rect.y)\n\t\t\t\t\tattrs.viewBox = formatter.rectangle(rect);\n\t\t\t}\n\t\t\tvar node = SvgElement.create('svg', attrs, formatter),\n\t\t\t\tparent = node;\n\t\t\tif (matrix && !matrix.isIdentity()) {\n\t\t\t\tparent = node.appendChild(SvgElement.create('g',\n\t\t\t\t\t\tgetTransform(matrix), formatter));\n\t\t\t}\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tparent.appendChild(exportSVG(children[i], options, true));\n\t\t\t}\n\t\t\treturn exportDefinitions(node, options);\n\t\t}\n\t});\n};\n\nnew function() {\n\n\tvar definitions = {},\n\t\trootSize;\n\n\tfunction getValue(node, name, isString, allowNull, allowPercent) {\n\t\tvar value = SvgElement.get(node, name),\n\t\t\tres = value == null\n\t\t\t\t? allowNull\n\t\t\t\t\t? null\n\t\t\t\t\t: isString ? '' : 0\n\t\t\t\t: isString\n\t\t\t\t\t? value\n\t\t\t\t\t: parseFloat(value);\n\t\treturn /%\\s*$/.test(value)\n\t\t\t? (res / 100) * (allowPercent ? 1\n\t\t\t\t: rootSize[/x|^width/.test(name) ? 'width' : 'height'])\n\t\t\t: res;\n\t}\n\n\tfunction getPoint(node, x, y, allowNull, allowPercent) {\n\t\tx = getValue(node, x || 'x', false, allowNull, allowPercent);\n\t\ty = getValue(node, y || 'y', false, allowNull, allowPercent);\n\t\treturn allowNull && (x == null || y == null) ? null\n\t\t\t\t: new Point(x, y);\n\t}\n\n\tfunction getSize(node, w, h, allowNull, allowPercent) {\n\t\tw = getValue(node, w || 'width', false, allowNull, allowPercent);\n\t\th = getValue(node, h || 'height', false, allowNull, allowPercent);\n\t\treturn allowNull && (w == null || h == null) ? null\n\t\t\t\t: new Size(w, h);\n\t}\n\n\tfunction convertValue(value, type, lookup) {\n\t\treturn value === 'none' ? null\n\t\t\t\t: type === 'number' ? parseFloat(value)\n\t\t\t\t: type === 'array' ?\n\t\t\t\t\tvalue ? value.split(/[\\s,]+/g).map(parseFloat) : []\n\t\t\t\t: type === 'color' ? getDefinition(value) || value\n\t\t\t\t: type === 'lookup' ? lookup[value]\n\t\t\t\t: value;\n\t}\n\n\tfunction importGroup(node, type, options, isRoot) {\n\t\tvar nodes = node.childNodes,\n\t\t\tisClip = type === 'clippath',\n\t\t\tisDefs = type === 'defs',\n\t\t\titem = new Group(),\n\t\t\tproject = item._project,\n\t\t\tcurrentStyle = project._currentStyle,\n\t\t\tchildren = [];\n\t\tif (!isClip && !isDefs) {\n\t\t\titem = applyAttributes(item, node, isRoot);\n\t\t\tproject._currentStyle = item._style.clone();\n\t\t}\n\t\tif (isRoot) {\n\t\t\tvar defs = node.querySelectorAll('defs');\n\t\t\tfor (var i = 0, l = defs.length; i < l; i++) {\n\t\t\t\timportNode(defs[i], options, false);\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\tvar childNode = nodes[i],\n\t\t\t\tchild;\n\t\t\tif (childNode.nodeType === 1\n\t\t\t\t\t&& !/^defs$/i.test(childNode.nodeName)\n\t\t\t\t\t&& (child = importNode(childNode, options, false))\n\t\t\t\t\t&& !(child instanceof SymbolDefinition))\n\t\t\t\tchildren.push(child);\n\t\t}\n\t\titem.addChildren(children);\n\t\tif (isClip)\n\t\t\titem = applyAttributes(item.reduce(), node, isRoot);\n\t\tproject._currentStyle = currentStyle;\n\t\tif (isClip || isDefs) {\n\t\t\titem.remove();\n\t\t\titem = null;\n\t\t}\n\t\treturn item;\n\t}\n\n\tfunction importPoly(node, type) {\n\t\tvar coords = node.getAttribute('points').match(\n\t\t\t\t\t/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g),\n\t\t\tpoints = [];\n\t\tfor (var i = 0, l = coords.length; i < l; i += 2)\n\t\t\tpoints.push(new Point(\n\t\t\t\t\tparseFloat(coords[i]),\n\t\t\t\t\tparseFloat(coords[i + 1])));\n\t\tvar path = new Path(points);\n\t\tif (type === 'polygon')\n\t\t\tpath.closePath();\n\t\treturn path;\n\t}\n\n\tfunction importPath(node) {\n\t\treturn PathItem.create(node.getAttribute('d'));\n\t}\n\n\tfunction importGradient(node, type) {\n\t\tvar id = (getValue(node, 'href', true) || '').substring(1),\n\t\t\tradial = type === 'radialgradient',\n\t\t\tgradient;\n\t\tif (id) {\n\t\t\tgradient = definitions[id].getGradient();\n\t\t\tif (gradient._radial ^ radial) {\n\t\t\t\tgradient = gradient.clone();\n\t\t\t\tgradient._radial = radial;\n\t\t\t}\n\t\t} else {\n\t\t\tvar nodes = node.childNodes,\n\t\t\t\tstops = [];\n\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\t\tvar child = nodes[i];\n\t\t\t\tif (child.nodeType === 1)\n\t\t\t\t\tstops.push(applyAttributes(new GradientStop(), child));\n\t\t\t}\n\t\t\tgradient = new Gradient(stops, radial);\n\t\t}\n\t\tvar origin, destination, highlight,\n\t\t\tscaleToBounds = getValue(node, 'gradientUnits', true) !==\n\t\t\t\t'userSpaceOnUse';\n\t\tif (radial) {\n\t\t\torigin = getPoint(node, 'cx', 'cy', false, scaleToBounds);\n\t\t\tdestination = origin.add(\n\t\t\t\t\tgetValue(node, 'r', false, false, scaleToBounds), 0);\n\t\t\thighlight = getPoint(node, 'fx', 'fy', true, scaleToBounds);\n\t\t} else {\n\t\t\torigin = getPoint(node, 'x1', 'y1', false, scaleToBounds);\n\t\t\tdestination = getPoint(node, 'x2', 'y2', false, scaleToBounds);\n\t\t}\n\t\tvar color = applyAttributes(\n\t\t\t\tnew Color(gradient, origin, destination, highlight), node);\n\t\tcolor._scaleToBounds = scaleToBounds;\n\t\treturn null;\n\t}\n\n\tvar importers = {\n\t\t'#document': function (node, type, options, isRoot) {\n\t\t\tvar nodes = node.childNodes;\n\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\t\tvar child = nodes[i];\n\t\t\t\tif (child.nodeType === 1)\n\t\t\t\t\treturn importNode(child, options, isRoot);\n\t\t\t}\n\t\t},\n\t\tg: importGroup,\n\t\tsvg: importGroup,\n\t\tclippath: importGroup,\n\t\tpolygon: importPoly,\n\t\tpolyline: importPoly,\n\t\tpath: importPath,\n\t\tlineargradient: importGradient,\n\t\tradialgradient: importGradient,\n\n\t\timage: function (node) {\n\t\t\tvar raster = new Raster(getValue(node, 'href', true));\n\t\t\traster.on('load', function() {\n\t\t\t\tvar size = getSize(node);\n\t\t\t\tthis.setSize(size);\n\t\t\t\tvar center = this._matrix._transformPoint(\n\t\t\t\t\t\tgetPoint(node).add(size.divide(2)));\n\t\t\t\tthis.translate(center);\n\t\t\t});\n\t\t\treturn raster;\n\t\t},\n\n\t\tsymbol: function(node, type, options, isRoot) {\n\t\t\treturn new SymbolDefinition(\n\t\t\t\t\timportGroup(node, type, options, isRoot), true);\n\t\t},\n\n\t\tdefs: importGroup,\n\n\t\tuse: function(node) {\n\t\t\tvar id = (getValue(node, 'href', true) || '').substring(1),\n\t\t\t\tdefinition = definitions[id],\n\t\t\t\tpoint = getPoint(node);\n\t\t\treturn definition\n\t\t\t\t\t? definition instanceof SymbolDefinition\n\t\t\t\t\t\t? definition.place(point)\n\t\t\t\t\t\t: definition.clone().translate(point)\n\t\t\t\t\t: null;\n\t\t},\n\n\t\tcircle: function(node) {\n\t\t\treturn new Shape.Circle(\n\t\t\t\t\tgetPoint(node, 'cx', 'cy'),\n\t\t\t\t\tgetValue(node, 'r'));\n\t\t},\n\n\t\tellipse: function(node) {\n\t\t\treturn new Shape.Ellipse({\n\t\t\t\tcenter: getPoint(node, 'cx', 'cy'),\n\t\t\t\tradius: getSize(node, 'rx', 'ry')\n\t\t\t});\n\t\t},\n\n\t\trect: function(node) {\n\t\t\treturn new Shape.Rectangle(new Rectangle(\n\t\t\t\t\t\tgetPoint(node),\n\t\t\t\t\t\tgetSize(node)\n\t\t\t\t\t), getSize(node, 'rx', 'ry'));\n\t\t\t},\n\n\t\tline: function(node) {\n\t\t\treturn new Path.Line(\n\t\t\t\t\tgetPoint(node, 'x1', 'y1'),\n\t\t\t\t\tgetPoint(node, 'x2', 'y2'));\n\t\t},\n\n\t\ttext: function(node) {\n\t\t\tvar text = new PointText(getPoint(node).add(\n\t\t\t\t\tgetPoint(node, 'dx', 'dy')));\n\t\t\ttext.setContent(node.textContent.trim() || '');\n\t\t\treturn text;\n\t\t}\n\t};\n\n\tfunction applyTransform(item, value, name, node) {\n\t\tif (item.transform) {\n\t\t\tvar transforms = (node.getAttribute(name) || '').split(/\\)\\s*/g),\n\t\t\t\tmatrix = new Matrix();\n\t\t\tfor (var i = 0, l = transforms.length; i < l; i++) {\n\t\t\t\tvar transform = transforms[i];\n\t\t\t\tif (!transform)\n\t\t\t\t\tbreak;\n\t\t\t\tvar parts = transform.split(/\\(\\s*/),\n\t\t\t\t\tcommand = parts[0],\n\t\t\t\t\tv = parts[1].split(/[\\s,]+/g);\n\t\t\t\tfor (var j = 0, m = v.length; j < m; j++)\n\t\t\t\t\tv[j] = parseFloat(v[j]);\n\t\t\t\tswitch (command) {\n\t\t\t\tcase 'matrix':\n\t\t\t\t\tmatrix.append(\n\t\t\t\t\t\t\tnew Matrix(v[0], v[1], v[2], v[3], v[4], v[5]));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rotate':\n\t\t\t\t\tmatrix.rotate(v[0], v[1], v[2]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'translate':\n\t\t\t\t\tmatrix.translate(v[0], v[1]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'scale':\n\t\t\t\t\tmatrix.scale(v);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'skewX':\n\t\t\t\t\tmatrix.skew(v[0], 0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'skewY':\n\t\t\t\t\tmatrix.skew(0, v[0]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\titem.transform(matrix);\n\t\t}\n\t}\n\n\tfunction applyOpacity(item, value, name) {\n\t\tvar key = name === 'fill-opacity' ? 'getFillColor' : 'getStrokeColor',\n\t\t\tcolor = item[key] && item[key]();\n\t\tif (color)\n\t\t\tcolor.setAlpha(parseFloat(value));\n\t}\n\n\tvar attributes = Base.set(Base.each(SvgStyles, function(entry) {\n\t\tthis[entry.attribute] = function(item, value) {\n\t\t\tif (item[entry.set]) {\n\t\t\t\titem[entry.set](convertValue(value, entry.type, entry.fromSVG));\n\t\t\t\tif (entry.type === 'color') {\n\t\t\t\t\tvar color = item[entry.get]();\n\t\t\t\t\tif (color) {\n\t\t\t\t\t\tif (color._scaleToBounds) {\n\t\t\t\t\t\t\tvar bounds = item.getBounds();\n\t\t\t\t\t\t\tcolor.transform(new Matrix()\n\t\t\t\t\t\t\t\t.translate(bounds.getPoint())\n\t\t\t\t\t\t\t\t.scale(bounds.getSize()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}, {}), {\n\t\tid: function(item, value) {\n\t\t\tdefinitions[value] = item;\n\t\t\tif (item.setName)\n\t\t\t\titem.setName(value);\n\t\t},\n\n\t\t'clip-path': function(item, value) {\n\t\t\tvar clip = getDefinition(value);\n\t\t\tif (clip) {\n\t\t\t\tclip = clip.clone();\n\t\t\t\tclip.setClipMask(true);\n\t\t\t\tif (item instanceof Group) {\n\t\t\t\t\titem.insertChild(0, clip);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Group(clip, item);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgradientTransform: applyTransform,\n\t\ttransform: applyTransform,\n\n\t\t'fill-opacity': applyOpacity,\n\t\t'stroke-opacity': applyOpacity,\n\n\t\tvisibility: function(item, value) {\n\t\t\tif (item.setVisible)\n\t\t\t\titem.setVisible(value === 'visible');\n\t\t},\n\n\t\tdisplay: function(item, value) {\n\t\t\tif (item.setVisible)\n\t\t\t\titem.setVisible(value !== null);\n\t\t},\n\n\t\t'stop-color': function(item, value) {\n\t\t\tif (item.setColor)\n\t\t\t\titem.setColor(value);\n\t\t},\n\n\t\t'stop-opacity': function(item, value) {\n\t\t\tif (item._color)\n\t\t\t\titem._color.setAlpha(parseFloat(value));\n\t\t},\n\n\t\toffset: function(item, value) {\n\t\t\tif (item.setOffset) {\n\t\t\t\tvar percent = value.match(/(.*)%$/);\n\t\t\t\titem.setOffset(percent ? percent[1] / 100 : parseFloat(value));\n\t\t\t}\n\t\t},\n\n\t\tviewBox: function(item, value, name, node, styles) {\n\t\t\tvar rect = new Rectangle(convertValue(value, 'array')),\n\t\t\t\tsize = getSize(node, null, null, true),\n\t\t\t\tgroup,\n\t\t\t\tmatrix;\n\t\t\tif (item instanceof Group) {\n\t\t\t\tvar scale = size ? size.divide(rect.getSize()) : 1,\n\t\t\t\tmatrix = new Matrix().scale(scale)\n\t\t\t\t\t\t.translate(rect.getPoint().negate());\n\t\t\t\tgroup = item;\n\t\t\t} else if (item instanceof SymbolDefinition) {\n\t\t\t\tif (size)\n\t\t\t\t\trect.setSize(size);\n\t\t\t\tgroup = item._item;\n\t\t\t}\n\t\t\tif (group)  {\n\t\t\t\tif (getAttribute(node, 'overflow', styles) !== 'visible') {\n\t\t\t\t\tvar clip = new Shape.Rectangle(rect);\n\t\t\t\t\tclip.setClipMask(true);\n\t\t\t\t\tgroup.addChild(clip);\n\t\t\t\t}\n\t\t\t\tif (matrix)\n\t\t\t\t\tgroup.transform(matrix);\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction getAttribute(node, name, styles) {\n\t\tvar attr = node.attributes[name],\n\t\t\tvalue = attr && attr.value;\n\t\tif (!value) {\n\t\t\tvar style = Base.camelize(name);\n\t\t\tvalue = node.style[style];\n\t\t\tif (!value && styles.node[style] !== styles.parent[style])\n\t\t\t\tvalue = styles.node[style];\n\t\t}\n\t\treturn !value ? undefined\n\t\t\t\t: value === 'none' ? null\n\t\t\t\t: value;\n\t}\n\n\tfunction applyAttributes(item, node, isRoot) {\n\t\tif (node.style) {\n\t\t\tvar parent = node.parentNode,\n\t\t\t\tstyles = {\n\t\t\t\t\tnode: DomElement.getStyles(node) || {},\n\t\t\t\t\tparent: !isRoot && !/^defs$/i.test(parent.tagName)\n\t\t\t\t\t\t\t&& DomElement.getStyles(parent) || {}\n\t\t\t\t};\n\t\t\tBase.each(attributes, function(apply, name) {\n\t\t\t\tvar value = getAttribute(node, name, styles);\n\t\t\t\titem = value !== undefined\n\t\t\t\t\t\t&& apply(item, value, name, node, styles) || item;\n\t\t\t});\n\t\t}\n\t\treturn item;\n\t}\n\n\tfunction getDefinition(value) {\n\t\tvar match = value && value.match(/\\((?:[\"'#]*)([^\"')]+)/),\n\t\t\tname = match && match[1],\n\t\t\tres = name && definitions[window\n\t\t\t\t\t? name.replace(window.location.href.split('#')[0] + '#', '')\n\t\t\t\t\t: name];\n\t\tif (res && res._scaleToBounds) {\n\t\t\tres = res.clone();\n\t\t\tres._scaleToBounds = true;\n\t\t}\n\t\treturn res;\n\t}\n\n\tfunction importNode(node, options, isRoot) {\n\t\tvar type = node.nodeName.toLowerCase(),\n\t\t\tisElement = type !== '#document',\n\t\t\tbody = document.body,\n\t\t\tcontainer,\n\t\t\tparent,\n\t\t\tnext;\n\t\tif (isRoot && isElement) {\n\t\t\trootSize = paper.getView().getSize();\n\t\t\trootSize = getSize(node, null, null, true) || rootSize;\n\t\t\tcontainer = SvgElement.create('svg', {\n\t\t\t\tstyle: 'stroke-width: 1px; stroke-miterlimit: 10'\n\t\t\t});\n\t\t\tparent = node.parentNode;\n\t\t\tnext = node.nextSibling;\n\t\t\tcontainer.appendChild(node);\n\t\t\tbody.appendChild(container);\n\t\t}\n\t\tvar settings = paper.settings,\n\t\t\tapplyMatrix = settings.applyMatrix,\n\t\t\tinsertItems = settings.insertItems;\n\t\tsettings.applyMatrix = false;\n\t\tsettings.insertItems = false;\n\t\tvar importer = importers[type],\n\t\t\titem = importer && importer(node, type, options, isRoot) || null;\n\t\tsettings.insertItems = insertItems;\n\t\tsettings.applyMatrix = applyMatrix;\n\t\tif (item) {\n\t\t\tif (isElement && !(item instanceof Group))\n\t\t\t\titem = applyAttributes(item, node, isRoot);\n\t\t\tvar onImport = options.onImport,\n\t\t\t\tdata = isElement && node.getAttribute('data-paper-data');\n\t\t\tif (onImport)\n\t\t\t\titem = onImport(node, item, options) || item;\n\t\t\tif (options.expandShapes && item instanceof Shape) {\n\t\t\t\titem.remove();\n\t\t\t\titem = item.toPath();\n\t\t\t}\n\t\t\tif (data)\n\t\t\t\titem._data = JSON.parse(data);\n\t\t}\n\t\tif (container) {\n\t\t\tbody.removeChild(container);\n\t\t\tif (parent) {\n\t\t\t\tif (next) {\n\t\t\t\t\tparent.insertBefore(node, next);\n\t\t\t\t} else {\n\t\t\t\t\tparent.appendChild(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (isRoot) {\n\t\t\tdefinitions = {};\n\t\t\tif (item && Base.pick(options.applyMatrix, applyMatrix))\n\t\t\t\titem.matrix.apply(true, true);\n\t\t}\n\t\treturn item;\n\t}\n\n\tfunction importSVG(source, options, owner) {\n\t\tif (!source)\n\t\t\treturn null;\n\t\toptions = typeof options === 'function' ? { onLoad: options }\n\t\t\t\t: options || {};\n\t\tvar scope = paper,\n\t\t\titem = null;\n\n\t\tfunction onLoad(svg) {\n\t\t\ttry {\n\t\t\t\tvar node = typeof svg === 'object' ? svg : new self.DOMParser()\n\t\t\t\t\t\t.parseFromString(svg, 'image/svg+xml');\n\t\t\t\tif (!node.nodeName) {\n\t\t\t\t\tnode = null;\n\t\t\t\t\tthrow new Error('Unsupported SVG source: ' + source);\n\t\t\t\t}\n\t\t\t\tpaper = scope;\n\t\t\t\titem = importNode(node, options, true);\n\t\t\t\tif (!options || options.insert !== false) {\n\t\t\t\t\towner._insertItem(undefined, item);\n\t\t\t\t}\n\t\t\t\tvar onLoad = options.onLoad;\n\t\t\t\tif (onLoad)\n\t\t\t\t\tonLoad(item, svg);\n\t\t\t} catch (e) {\n\t\t\t\tonError(e);\n\t\t\t}\n\t\t}\n\n\t\tfunction onError(message, status) {\n\t\t\tvar onError = options.onError;\n\t\t\tif (onError) {\n\t\t\t\tonError(message, status);\n\t\t\t} else {\n\t\t\t\tthrow new Error(message);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof source === 'string' && !/^.*</.test(source)) {\n\t\t\tvar node = document.getElementById(source);\n\t\t\tif (node) {\n\t\t\t\tonLoad(node);\n\t\t\t} else {\n\t\t\t\tHttp.request({\n\t\t\t\t\turl: source,\n\t\t\t\t\tasync: true,\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (typeof File !== 'undefined' && source instanceof File) {\n\t\t\tvar reader = new FileReader();\n\t\t\treader.onload = function() {\n\t\t\t\tonLoad(reader.result);\n\t\t\t};\n\t\t\treader.onerror = function() {\n\t\t\t\tonError(reader.error);\n\t\t\t};\n\t\t\treturn reader.readAsText(source);\n\t\t} else {\n\t\t\tonLoad(source);\n\t\t}\n\n\t\treturn item;\n\t}\n\n\tItem.inject({\n\t\timportSVG: function(node, options) {\n\t\t\treturn importSVG(node, options, this);\n\t\t}\n\t});\n\n\tProject.inject({\n\t\timportSVG: function(node, options) {\n\t\t\tthis.activate();\n\t\t\treturn importSVG(node, options, this);\n\t\t}\n\t});\n};\n\nBase.exports.PaperScript = function() {\n\tvar global = this,\n\t\tacorn = global.acorn;\n\tif (!acorn && \"function\" !== 'undefined') {\n\t\ttry { acorn = __webpack_require__(/*! acorn */ \"./node_modules/acorn/dist/acorn.js\"); } catch(e) {}\n\t}\n\tif (!acorn) {\n\t\tvar exports, module;\n\t\tacorn = exports = module = {};\n\n(function(root, mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports);\n  if (true) return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  mod(root.acorn || (root.acorn = {}));\n})(this, function(exports) {\n  \"use strict\";\n\n  exports.version = \"0.5.0\";\n\n  var options, input, inputLen, sourceFile;\n\n  exports.parse = function(inpt, opts) {\n\tinput = String(inpt); inputLen = input.length;\n\tsetOptions(opts);\n\tinitTokenState();\n\treturn parseTopLevel(options.program);\n  };\n\n  var defaultOptions = exports.defaultOptions = {\n\tecmaVersion: 5,\n\tstrictSemicolons: false,\n\tallowTrailingCommas: true,\n\tforbidReserved: false,\n\tallowReturnOutsideFunction: false,\n\tlocations: false,\n\tonComment: null,\n\tranges: false,\n\tprogram: null,\n\tsourceFile: null,\n\tdirectSourceFile: null\n  };\n\n  function setOptions(opts) {\n\toptions = opts || {};\n\tfor (var opt in defaultOptions) if (!Object.prototype.hasOwnProperty.call(options, opt))\n\t  options[opt] = defaultOptions[opt];\n\tsourceFile = options.sourceFile || null;\n  }\n\n  var getLineInfo = exports.getLineInfo = function(input, offset) {\n\tfor (var line = 1, cur = 0;;) {\n\t  lineBreak.lastIndex = cur;\n\t  var match = lineBreak.exec(input);\n\t  if (match && match.index < offset) {\n\t\t++line;\n\t\tcur = match.index + match[0].length;\n\t  } else break;\n\t}\n\treturn {line: line, column: offset - cur};\n  };\n\n  exports.tokenize = function(inpt, opts) {\n\tinput = String(inpt); inputLen = input.length;\n\tsetOptions(opts);\n\tinitTokenState();\n\n\tvar t = {};\n\tfunction getToken(forceRegexp) {\n\t  lastEnd = tokEnd;\n\t  readToken(forceRegexp);\n\t  t.start = tokStart; t.end = tokEnd;\n\t  t.startLoc = tokStartLoc; t.endLoc = tokEndLoc;\n\t  t.type = tokType; t.value = tokVal;\n\t  return t;\n\t}\n\tgetToken.jumpTo = function(pos, reAllowed) {\n\t  tokPos = pos;\n\t  if (options.locations) {\n\t\ttokCurLine = 1;\n\t\ttokLineStart = lineBreak.lastIndex = 0;\n\t\tvar match;\n\t\twhile ((match = lineBreak.exec(input)) && match.index < pos) {\n\t\t  ++tokCurLine;\n\t\t  tokLineStart = match.index + match[0].length;\n\t\t}\n\t  }\n\t  tokRegexpAllowed = reAllowed;\n\t  skipSpace();\n\t};\n\treturn getToken;\n  };\n\n  var tokPos;\n\n  var tokStart, tokEnd;\n\n  var tokStartLoc, tokEndLoc;\n\n  var tokType, tokVal;\n\n  var tokRegexpAllowed;\n\n  var tokCurLine, tokLineStart;\n\n  var lastStart, lastEnd, lastEndLoc;\n\n  var inFunction, labels, strict;\n\n  function raise(pos, message) {\n\tvar loc = getLineInfo(input, pos);\n\tmessage += \" (\" + loc.line + \":\" + loc.column + \")\";\n\tvar err = new SyntaxError(message);\n\terr.pos = pos; err.loc = loc; err.raisedAt = tokPos;\n\tthrow err;\n  }\n\n  var empty = [];\n\n  var _num = {type: \"num\"}, _regexp = {type: \"regexp\"}, _string = {type: \"string\"};\n  var _name = {type: \"name\"}, _eof = {type: \"eof\"};\n\n  var _break = {keyword: \"break\"}, _case = {keyword: \"case\", beforeExpr: true}, _catch = {keyword: \"catch\"};\n  var _continue = {keyword: \"continue\"}, _debugger = {keyword: \"debugger\"}, _default = {keyword: \"default\"};\n  var _do = {keyword: \"do\", isLoop: true}, _else = {keyword: \"else\", beforeExpr: true};\n  var _finally = {keyword: \"finally\"}, _for = {keyword: \"for\", isLoop: true}, _function = {keyword: \"function\"};\n  var _if = {keyword: \"if\"}, _return = {keyword: \"return\", beforeExpr: true}, _switch = {keyword: \"switch\"};\n  var _throw = {keyword: \"throw\", beforeExpr: true}, _try = {keyword: \"try\"}, _var = {keyword: \"var\"};\n  var _while = {keyword: \"while\", isLoop: true}, _with = {keyword: \"with\"}, _new = {keyword: \"new\", beforeExpr: true};\n  var _this = {keyword: \"this\"};\n\n  var _null = {keyword: \"null\", atomValue: null}, _true = {keyword: \"true\", atomValue: true};\n  var _false = {keyword: \"false\", atomValue: false};\n\n  var _in = {keyword: \"in\", binop: 7, beforeExpr: true};\n\n  var keywordTypes = {\"break\": _break, \"case\": _case, \"catch\": _catch,\n\t\t\t\t\t  \"continue\": _continue, \"debugger\": _debugger, \"default\": _default,\n\t\t\t\t\t  \"do\": _do, \"else\": _else, \"finally\": _finally, \"for\": _for,\n\t\t\t\t\t  \"function\": _function, \"if\": _if, \"return\": _return, \"switch\": _switch,\n\t\t\t\t\t  \"throw\": _throw, \"try\": _try, \"var\": _var, \"while\": _while, \"with\": _with,\n\t\t\t\t\t  \"null\": _null, \"true\": _true, \"false\": _false, \"new\": _new, \"in\": _in,\n\t\t\t\t\t  \"instanceof\": {keyword: \"instanceof\", binop: 7, beforeExpr: true}, \"this\": _this,\n\t\t\t\t\t  \"typeof\": {keyword: \"typeof\", prefix: true, beforeExpr: true},\n\t\t\t\t\t  \"void\": {keyword: \"void\", prefix: true, beforeExpr: true},\n\t\t\t\t\t  \"delete\": {keyword: \"delete\", prefix: true, beforeExpr: true}};\n\n  var _bracketL = {type: \"[\", beforeExpr: true}, _bracketR = {type: \"]\"}, _braceL = {type: \"{\", beforeExpr: true};\n  var _braceR = {type: \"}\"}, _parenL = {type: \"(\", beforeExpr: true}, _parenR = {type: \")\"};\n  var _comma = {type: \",\", beforeExpr: true}, _semi = {type: \";\", beforeExpr: true};\n  var _colon = {type: \":\", beforeExpr: true}, _dot = {type: \".\"}, _question = {type: \"?\", beforeExpr: true};\n\n  var _slash = {binop: 10, beforeExpr: true}, _eq = {isAssign: true, beforeExpr: true};\n  var _assign = {isAssign: true, beforeExpr: true};\n  var _incDec = {postfix: true, prefix: true, isUpdate: true}, _prefix = {prefix: true, beforeExpr: true};\n  var _logicalOR = {binop: 1, beforeExpr: true};\n  var _logicalAND = {binop: 2, beforeExpr: true};\n  var _bitwiseOR = {binop: 3, beforeExpr: true};\n  var _bitwiseXOR = {binop: 4, beforeExpr: true};\n  var _bitwiseAND = {binop: 5, beforeExpr: true};\n  var _equality = {binop: 6, beforeExpr: true};\n  var _relational = {binop: 7, beforeExpr: true};\n  var _bitShift = {binop: 8, beforeExpr: true};\n  var _plusMin = {binop: 9, prefix: true, beforeExpr: true};\n  var _multiplyModulo = {binop: 10, beforeExpr: true};\n\n  exports.tokTypes = {bracketL: _bracketL, bracketR: _bracketR, braceL: _braceL, braceR: _braceR,\n\t\t\t\t\t  parenL: _parenL, parenR: _parenR, comma: _comma, semi: _semi, colon: _colon,\n\t\t\t\t\t  dot: _dot, question: _question, slash: _slash, eq: _eq, name: _name, eof: _eof,\n\t\t\t\t\t  num: _num, regexp: _regexp, string: _string};\n  for (var kw in keywordTypes) exports.tokTypes[\"_\" + kw] = keywordTypes[kw];\n\n  function makePredicate(words) {\n\twords = words.split(\" \");\n\tvar f = \"\", cats = [];\n\tout: for (var i = 0; i < words.length; ++i) {\n\t  for (var j = 0; j < cats.length; ++j)\n\t\tif (cats[j][0].length == words[i].length) {\n\t\t  cats[j].push(words[i]);\n\t\t  continue out;\n\t\t}\n\t  cats.push([words[i]]);\n\t}\n\tfunction compareTo(arr) {\n\t  if (arr.length == 1) return f += \"return str === \" + JSON.stringify(arr[0]) + \";\";\n\t  f += \"switch(str){\";\n\t  for (var i = 0; i < arr.length; ++i) f += \"case \" + JSON.stringify(arr[i]) + \":\";\n\t  f += \"return true}return false;\";\n\t}\n\n\tif (cats.length > 3) {\n\t  cats.sort(function(a, b) {return b.length - a.length;});\n\t  f += \"switch(str.length){\";\n\t  for (var i = 0; i < cats.length; ++i) {\n\t\tvar cat = cats[i];\n\t\tf += \"case \" + cat[0].length + \":\";\n\t\tcompareTo(cat);\n\t  }\n\t  f += \"}\";\n\n\t} else {\n\t  compareTo(words);\n\t}\n\treturn new Function(\"str\", f);\n  }\n\n  var isReservedWord3 = makePredicate(\"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\");\n\n  var isReservedWord5 = makePredicate(\"class enum extends super const export import\");\n\n  var isStrictReservedWord = makePredicate(\"implements interface let package private protected public static yield\");\n\n  var isStrictBadIdWord = makePredicate(\"eval arguments\");\n\n  var isKeyword = makePredicate(\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\");\n\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n  var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n  var newline = /[\\n\\r\\u2028\\u2029]/;\n\n  var lineBreak = /\\r\\n|[\\n\\r\\u2028\\u2029]/g;\n\n  var isIdentifierStart = exports.isIdentifierStart = function(code) {\n\tif (code < 65) return code === 36;\n\tif (code < 91) return true;\n\tif (code < 97) return code === 95;\n\tif (code < 123)return true;\n\treturn code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  };\n\n  var isIdentifierChar = exports.isIdentifierChar = function(code) {\n\tif (code < 48) return code === 36;\n\tif (code < 58) return true;\n\tif (code < 65) return false;\n\tif (code < 91) return true;\n\tif (code < 97) return code === 95;\n\tif (code < 123)return true;\n\treturn code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  };\n\n  function line_loc_t() {\n\tthis.line = tokCurLine;\n\tthis.column = tokPos - tokLineStart;\n  }\n\n  function initTokenState() {\n\ttokCurLine = 1;\n\ttokPos = tokLineStart = 0;\n\ttokRegexpAllowed = true;\n\tskipSpace();\n  }\n\n  function finishToken(type, val) {\n\ttokEnd = tokPos;\n\tif (options.locations) tokEndLoc = new line_loc_t;\n\ttokType = type;\n\tskipSpace();\n\ttokVal = val;\n\ttokRegexpAllowed = type.beforeExpr;\n  }\n\n  function skipBlockComment() {\n\tvar startLoc = options.onComment && options.locations && new line_loc_t;\n\tvar start = tokPos, end = input.indexOf(\"*/\", tokPos += 2);\n\tif (end === -1) raise(tokPos - 2, \"Unterminated comment\");\n\ttokPos = end + 2;\n\tif (options.locations) {\n\t  lineBreak.lastIndex = start;\n\t  var match;\n\t  while ((match = lineBreak.exec(input)) && match.index < tokPos) {\n\t\t++tokCurLine;\n\t\ttokLineStart = match.index + match[0].length;\n\t  }\n\t}\n\tif (options.onComment)\n\t  options.onComment(true, input.slice(start + 2, end), start, tokPos,\n\t\t\t\t\t\tstartLoc, options.locations && new line_loc_t);\n  }\n\n  function skipLineComment() {\n\tvar start = tokPos;\n\tvar startLoc = options.onComment && options.locations && new line_loc_t;\n\tvar ch = input.charCodeAt(tokPos+=2);\n\twhile (tokPos < inputLen && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n\t  ++tokPos;\n\t  ch = input.charCodeAt(tokPos);\n\t}\n\tif (options.onComment)\n\t  options.onComment(false, input.slice(start + 2, tokPos), start, tokPos,\n\t\t\t\t\t\tstartLoc, options.locations && new line_loc_t);\n  }\n\n  function skipSpace() {\n\twhile (tokPos < inputLen) {\n\t  var ch = input.charCodeAt(tokPos);\n\t  if (ch === 32) {\n\t\t++tokPos;\n\t  } else if (ch === 13) {\n\t\t++tokPos;\n\t\tvar next = input.charCodeAt(tokPos);\n\t\tif (next === 10) {\n\t\t  ++tokPos;\n\t\t}\n\t\tif (options.locations) {\n\t\t  ++tokCurLine;\n\t\t  tokLineStart = tokPos;\n\t\t}\n\t  } else if (ch === 10 || ch === 8232 || ch === 8233) {\n\t\t++tokPos;\n\t\tif (options.locations) {\n\t\t  ++tokCurLine;\n\t\t  tokLineStart = tokPos;\n\t\t}\n\t  } else if (ch > 8 && ch < 14) {\n\t\t++tokPos;\n\t  } else if (ch === 47) {\n\t\tvar next = input.charCodeAt(tokPos + 1);\n\t\tif (next === 42) {\n\t\t  skipBlockComment();\n\t\t} else if (next === 47) {\n\t\t  skipLineComment();\n\t\t} else break;\n\t  } else if (ch === 160) {\n\t\t++tokPos;\n\t  } else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n\t\t++tokPos;\n\t  } else {\n\t\tbreak;\n\t  }\n\t}\n  }\n\n  function readToken_dot() {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next >= 48 && next <= 57) return readNumber(true);\n\t++tokPos;\n\treturn finishToken(_dot);\n  }\n\n  function readToken_slash() {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (tokRegexpAllowed) {++tokPos; return readRegexp();}\n\tif (next === 61) return finishOp(_assign, 2);\n\treturn finishOp(_slash, 1);\n  }\n\n  function readToken_mult_modulo() {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next === 61) return finishOp(_assign, 2);\n\treturn finishOp(_multiplyModulo, 1);\n  }\n\n  function readToken_pipe_amp(code) {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next === code) return finishOp(code === 124 ? _logicalOR : _logicalAND, 2);\n\tif (next === 61) return finishOp(_assign, 2);\n\treturn finishOp(code === 124 ? _bitwiseOR : _bitwiseAND, 1);\n  }\n\n  function readToken_caret() {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next === 61) return finishOp(_assign, 2);\n\treturn finishOp(_bitwiseXOR, 1);\n  }\n\n  function readToken_plus_min(code) {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next === code) {\n\t  if (next == 45 && input.charCodeAt(tokPos + 2) == 62 &&\n\t\t  newline.test(input.slice(lastEnd, tokPos))) {\n\t\ttokPos += 3;\n\t\tskipLineComment();\n\t\tskipSpace();\n\t\treturn readToken();\n\t  }\n\t  return finishOp(_incDec, 2);\n\t}\n\tif (next === 61) return finishOp(_assign, 2);\n\treturn finishOp(_plusMin, 1);\n  }\n\n  function readToken_lt_gt(code) {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tvar size = 1;\n\tif (next === code) {\n\t  size = code === 62 && input.charCodeAt(tokPos + 2) === 62 ? 3 : 2;\n\t  if (input.charCodeAt(tokPos + size) === 61) return finishOp(_assign, size + 1);\n\t  return finishOp(_bitShift, size);\n\t}\n\tif (next == 33 && code == 60 && input.charCodeAt(tokPos + 2) == 45 &&\n\t\tinput.charCodeAt(tokPos + 3) == 45) {\n\t  tokPos += 4;\n\t  skipLineComment();\n\t  skipSpace();\n\t  return readToken();\n\t}\n\tif (next === 61)\n\t  size = input.charCodeAt(tokPos + 2) === 61 ? 3 : 2;\n\treturn finishOp(_relational, size);\n  }\n\n  function readToken_eq_excl(code) {\n\tvar next = input.charCodeAt(tokPos + 1);\n\tif (next === 61) return finishOp(_equality, input.charCodeAt(tokPos + 2) === 61 ? 3 : 2);\n\treturn finishOp(code === 61 ? _eq : _prefix, 1);\n  }\n\n  function getTokenFromCode(code) {\n\tswitch(code) {\n\tcase 46:\n\t  return readToken_dot();\n\n\tcase 40: ++tokPos; return finishToken(_parenL);\n\tcase 41: ++tokPos; return finishToken(_parenR);\n\tcase 59: ++tokPos; return finishToken(_semi);\n\tcase 44: ++tokPos; return finishToken(_comma);\n\tcase 91: ++tokPos; return finishToken(_bracketL);\n\tcase 93: ++tokPos; return finishToken(_bracketR);\n\tcase 123: ++tokPos; return finishToken(_braceL);\n\tcase 125: ++tokPos; return finishToken(_braceR);\n\tcase 58: ++tokPos; return finishToken(_colon);\n\tcase 63: ++tokPos; return finishToken(_question);\n\n\tcase 48:\n\t  var next = input.charCodeAt(tokPos + 1);\n\t  if (next === 120 || next === 88) return readHexNumber();\n\tcase 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n\t  return readNumber(false);\n\n\tcase 34: case 39:\n\t  return readString(code);\n\n\tcase 47:\n\t  return readToken_slash(code);\n\n\tcase 37: case 42:\n\t  return readToken_mult_modulo();\n\n\tcase 124: case 38:\n\t  return readToken_pipe_amp(code);\n\n\tcase 94:\n\t  return readToken_caret();\n\n\tcase 43: case 45:\n\t  return readToken_plus_min(code);\n\n\tcase 60: case 62:\n\t  return readToken_lt_gt(code);\n\n\tcase 61: case 33:\n\t  return readToken_eq_excl(code);\n\n\tcase 126:\n\t  return finishOp(_prefix, 1);\n\t}\n\n\treturn false;\n  }\n\n  function readToken(forceRegexp) {\n\tif (!forceRegexp) tokStart = tokPos;\n\telse tokPos = tokStart + 1;\n\tif (options.locations) tokStartLoc = new line_loc_t;\n\tif (forceRegexp) return readRegexp();\n\tif (tokPos >= inputLen) return finishToken(_eof);\n\n\tvar code = input.charCodeAt(tokPos);\n\tif (isIdentifierStart(code) || code === 92 ) return readWord();\n\n\tvar tok = getTokenFromCode(code);\n\n\tif (tok === false) {\n\t  var ch = String.fromCharCode(code);\n\t  if (ch === \"\\\\\" || nonASCIIidentifierStart.test(ch)) return readWord();\n\t  raise(tokPos, \"Unexpected character '\" + ch + \"'\");\n\t}\n\treturn tok;\n  }\n\n  function finishOp(type, size) {\n\tvar str = input.slice(tokPos, tokPos + size);\n\ttokPos += size;\n\tfinishToken(type, str);\n  }\n\n  function readRegexp() {\n\tvar content = \"\", escaped, inClass, start = tokPos;\n\tfor (;;) {\n\t  if (tokPos >= inputLen) raise(start, \"Unterminated regular expression\");\n\t  var ch = input.charAt(tokPos);\n\t  if (newline.test(ch)) raise(start, \"Unterminated regular expression\");\n\t  if (!escaped) {\n\t\tif (ch === \"[\") inClass = true;\n\t\telse if (ch === \"]\" && inClass) inClass = false;\n\t\telse if (ch === \"/\" && !inClass) break;\n\t\tescaped = ch === \"\\\\\";\n\t  } else escaped = false;\n\t  ++tokPos;\n\t}\n\tvar content = input.slice(start, tokPos);\n\t++tokPos;\n\tvar mods = readWord1();\n\tif (mods && !/^[gmsiy]*$/.test(mods)) raise(start, \"Invalid regexp flag\");\n\ttry {\n\t  var value = new RegExp(content, mods);\n\t} catch (e) {\n\t  if (e instanceof SyntaxError) raise(start, e.message);\n\t  raise(e);\n\t}\n\treturn finishToken(_regexp, value);\n  }\n\n  function readInt(radix, len) {\n\tvar start = tokPos, total = 0;\n\tfor (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n\t  var code = input.charCodeAt(tokPos), val;\n\t  if (code >= 97) val = code - 97 + 10;\n\t  else if (code >= 65) val = code - 65 + 10;\n\t  else if (code >= 48 && code <= 57) val = code - 48;\n\t  else val = Infinity;\n\t  if (val >= radix) break;\n\t  ++tokPos;\n\t  total = total * radix + val;\n\t}\n\tif (tokPos === start || len != null && tokPos - start !== len) return null;\n\n\treturn total;\n  }\n\n  function readHexNumber() {\n\ttokPos += 2;\n\tvar val = readInt(16);\n\tif (val == null) raise(tokStart + 2, \"Expected hexadecimal number\");\n\tif (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");\n\treturn finishToken(_num, val);\n  }\n\n  function readNumber(startsWithDot) {\n\tvar start = tokPos, isFloat = false, octal = input.charCodeAt(tokPos) === 48;\n\tif (!startsWithDot && readInt(10) === null) raise(start, \"Invalid number\");\n\tif (input.charCodeAt(tokPos) === 46) {\n\t  ++tokPos;\n\t  readInt(10);\n\t  isFloat = true;\n\t}\n\tvar next = input.charCodeAt(tokPos);\n\tif (next === 69 || next === 101) {\n\t  next = input.charCodeAt(++tokPos);\n\t  if (next === 43 || next === 45) ++tokPos;\n\t  if (readInt(10) === null) raise(start, \"Invalid number\");\n\t  isFloat = true;\n\t}\n\tif (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");\n\n\tvar str = input.slice(start, tokPos), val;\n\tif (isFloat) val = parseFloat(str);\n\telse if (!octal || str.length === 1) val = parseInt(str, 10);\n\telse if (/[89]/.test(str) || strict) raise(start, \"Invalid number\");\n\telse val = parseInt(str, 8);\n\treturn finishToken(_num, val);\n  }\n\n  function readString(quote) {\n\ttokPos++;\n\tvar out = \"\";\n\tfor (;;) {\n\t  if (tokPos >= inputLen) raise(tokStart, \"Unterminated string constant\");\n\t  var ch = input.charCodeAt(tokPos);\n\t  if (ch === quote) {\n\t\t++tokPos;\n\t\treturn finishToken(_string, out);\n\t  }\n\t  if (ch === 92) {\n\t\tch = input.charCodeAt(++tokPos);\n\t\tvar octal = /^[0-7]+/.exec(input.slice(tokPos, tokPos + 3));\n\t\tif (octal) octal = octal[0];\n\t\twhile (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, -1);\n\t\tif (octal === \"0\") octal = null;\n\t\t++tokPos;\n\t\tif (octal) {\n\t\t  if (strict) raise(tokPos - 2, \"Octal literal in strict mode\");\n\t\t  out += String.fromCharCode(parseInt(octal, 8));\n\t\t  tokPos += octal.length - 1;\n\t\t} else {\n\t\t  switch (ch) {\n\t\t  case 110: out += \"\\n\"; break;\n\t\t  case 114: out += \"\\r\"; break;\n\t\t  case 120: out += String.fromCharCode(readHexChar(2)); break;\n\t\t  case 117: out += String.fromCharCode(readHexChar(4)); break;\n\t\t  case 85: out += String.fromCharCode(readHexChar(8)); break;\n\t\t  case 116: out += \"\\t\"; break;\n\t\t  case 98: out += \"\\b\"; break;\n\t\t  case 118: out += \"\\u000b\"; break;\n\t\t  case 102: out += \"\\f\"; break;\n\t\t  case 48: out += \"\\0\"; break;\n\t\t  case 13: if (input.charCodeAt(tokPos) === 10) ++tokPos;\n\t\t  case 10:\n\t\t\tif (options.locations) { tokLineStart = tokPos; ++tokCurLine; }\n\t\t\tbreak;\n\t\t  default: out += String.fromCharCode(ch); break;\n\t\t  }\n\t\t}\n\t  } else {\n\t\tif (ch === 13 || ch === 10 || ch === 8232 || ch === 8233) raise(tokStart, \"Unterminated string constant\");\n\t\tout += String.fromCharCode(ch);\n\t\t++tokPos;\n\t  }\n\t}\n  }\n\n  function readHexChar(len) {\n\tvar n = readInt(16, len);\n\tif (n === null) raise(tokStart, \"Bad character escape sequence\");\n\treturn n;\n  }\n\n  var containsEsc;\n\n  function readWord1() {\n\tcontainsEsc = false;\n\tvar word, first = true, start = tokPos;\n\tfor (;;) {\n\t  var ch = input.charCodeAt(tokPos);\n\t  if (isIdentifierChar(ch)) {\n\t\tif (containsEsc) word += input.charAt(tokPos);\n\t\t++tokPos;\n\t  } else if (ch === 92) {\n\t\tif (!containsEsc) word = input.slice(start, tokPos);\n\t\tcontainsEsc = true;\n\t\tif (input.charCodeAt(++tokPos) != 117)\n\t\t  raise(tokPos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n\t\t++tokPos;\n\t\tvar esc = readHexChar(4);\n\t\tvar escStr = String.fromCharCode(esc);\n\t\tif (!escStr) raise(tokPos - 1, \"Invalid Unicode escape\");\n\t\tif (!(first ? isIdentifierStart(esc) : isIdentifierChar(esc)))\n\t\t  raise(tokPos - 4, \"Invalid Unicode escape\");\n\t\tword += escStr;\n\t  } else {\n\t\tbreak;\n\t  }\n\t  first = false;\n\t}\n\treturn containsEsc ? word : input.slice(start, tokPos);\n  }\n\n  function readWord() {\n\tvar word = readWord1();\n\tvar type = _name;\n\tif (!containsEsc && isKeyword(word))\n\t  type = keywordTypes[word];\n\treturn finishToken(type, word);\n  }\n\n  function next() {\n\tlastStart = tokStart;\n\tlastEnd = tokEnd;\n\tlastEndLoc = tokEndLoc;\n\treadToken();\n  }\n\n  function setStrict(strct) {\n\tstrict = strct;\n\ttokPos = tokStart;\n\tif (options.locations) {\n\t  while (tokPos < tokLineStart) {\n\t\ttokLineStart = input.lastIndexOf(\"\\n\", tokLineStart - 2) + 1;\n\t\t--tokCurLine;\n\t  }\n\t}\n\tskipSpace();\n\treadToken();\n  }\n\n  function node_t() {\n\tthis.type = null;\n\tthis.start = tokStart;\n\tthis.end = null;\n  }\n\n  function node_loc_t() {\n\tthis.start = tokStartLoc;\n\tthis.end = null;\n\tif (sourceFile !== null) this.source = sourceFile;\n  }\n\n  function startNode() {\n\tvar node = new node_t();\n\tif (options.locations)\n\t  node.loc = new node_loc_t();\n\tif (options.directSourceFile)\n\t  node.sourceFile = options.directSourceFile;\n\tif (options.ranges)\n\t  node.range = [tokStart, 0];\n\treturn node;\n  }\n\n  function startNodeFrom(other) {\n\tvar node = new node_t();\n\tnode.start = other.start;\n\tif (options.locations) {\n\t  node.loc = new node_loc_t();\n\t  node.loc.start = other.loc.start;\n\t}\n\tif (options.ranges)\n\t  node.range = [other.range[0], 0];\n\n\treturn node;\n  }\n\n  function finishNode(node, type) {\n\tnode.type = type;\n\tnode.end = lastEnd;\n\tif (options.locations)\n\t  node.loc.end = lastEndLoc;\n\tif (options.ranges)\n\t  node.range[1] = lastEnd;\n\treturn node;\n  }\n\n  function isUseStrict(stmt) {\n\treturn options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&\n\t  stmt.expression.type === \"Literal\" && stmt.expression.value === \"use strict\";\n  }\n\n  function eat(type) {\n\tif (tokType === type) {\n\t  next();\n\t  return true;\n\t}\n  }\n\n  function canInsertSemicolon() {\n\treturn !options.strictSemicolons &&\n\t  (tokType === _eof || tokType === _braceR || newline.test(input.slice(lastEnd, tokStart)));\n  }\n\n  function semicolon() {\n\tif (!eat(_semi) && !canInsertSemicolon()) unexpected();\n  }\n\n  function expect(type) {\n\tif (tokType === type) next();\n\telse unexpected();\n  }\n\n  function unexpected() {\n\traise(tokStart, \"Unexpected token\");\n  }\n\n  function checkLVal(expr) {\n\tif (expr.type !== \"Identifier\" && expr.type !== \"MemberExpression\")\n\t  raise(expr.start, \"Assigning to rvalue\");\n\tif (strict && expr.type === \"Identifier\" && isStrictBadIdWord(expr.name))\n\t  raise(expr.start, \"Assigning to \" + expr.name + \" in strict mode\");\n  }\n\n  function parseTopLevel(program) {\n\tlastStart = lastEnd = tokPos;\n\tif (options.locations) lastEndLoc = new line_loc_t;\n\tinFunction = strict = null;\n\tlabels = [];\n\treadToken();\n\n\tvar node = program || startNode(), first = true;\n\tif (!program) node.body = [];\n\twhile (tokType !== _eof) {\n\t  var stmt = parseStatement();\n\t  node.body.push(stmt);\n\t  if (first && isUseStrict(stmt)) setStrict(true);\n\t  first = false;\n\t}\n\treturn finishNode(node, \"Program\");\n  }\n\n  var loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\n  function parseStatement() {\n\tif (tokType === _slash || tokType === _assign && tokVal == \"/=\")\n\t  readToken(true);\n\n\tvar starttype = tokType, node = startNode();\n\n\tswitch (starttype) {\n\tcase _break: case _continue:\n\t  next();\n\t  var isBreak = starttype === _break;\n\t  if (eat(_semi) || canInsertSemicolon()) node.label = null;\n\t  else if (tokType !== _name) unexpected();\n\t  else {\n\t\tnode.label = parseIdent();\n\t\tsemicolon();\n\t  }\n\n\t  for (var i = 0; i < labels.length; ++i) {\n\t\tvar lab = labels[i];\n\t\tif (node.label == null || lab.name === node.label.name) {\n\t\t  if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n\t\t  if (node.label && isBreak) break;\n\t\t}\n\t  }\n\t  if (i === labels.length) raise(node.start, \"Unsyntactic \" + starttype.keyword);\n\t  return finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n\n\tcase _debugger:\n\t  next();\n\t  semicolon();\n\t  return finishNode(node, \"DebuggerStatement\");\n\n\tcase _do:\n\t  next();\n\t  labels.push(loopLabel);\n\t  node.body = parseStatement();\n\t  labels.pop();\n\t  expect(_while);\n\t  node.test = parseParenExpression();\n\t  semicolon();\n\t  return finishNode(node, \"DoWhileStatement\");\n\n\tcase _for:\n\t  next();\n\t  labels.push(loopLabel);\n\t  expect(_parenL);\n\t  if (tokType === _semi) return parseFor(node, null);\n\t  if (tokType === _var) {\n\t\tvar init = startNode();\n\t\tnext();\n\t\tparseVar(init, true);\n\t\tfinishNode(init, \"VariableDeclaration\");\n\t\tif (init.declarations.length === 1 && eat(_in))\n\t\t  return parseForIn(node, init);\n\t\treturn parseFor(node, init);\n\t  }\n\t  var init = parseExpression(false, true);\n\t  if (eat(_in)) {checkLVal(init); return parseForIn(node, init);}\n\t  return parseFor(node, init);\n\n\tcase _function:\n\t  next();\n\t  return parseFunction(node, true);\n\n\tcase _if:\n\t  next();\n\t  node.test = parseParenExpression();\n\t  node.consequent = parseStatement();\n\t  node.alternate = eat(_else) ? parseStatement() : null;\n\t  return finishNode(node, \"IfStatement\");\n\n\tcase _return:\n\t  if (!inFunction && !options.allowReturnOutsideFunction)\n\t\traise(tokStart, \"'return' outside of function\");\n\t  next();\n\n\t  if (eat(_semi) || canInsertSemicolon()) node.argument = null;\n\t  else { node.argument = parseExpression(); semicolon(); }\n\t  return finishNode(node, \"ReturnStatement\");\n\n\tcase _switch:\n\t  next();\n\t  node.discriminant = parseParenExpression();\n\t  node.cases = [];\n\t  expect(_braceL);\n\t  labels.push(switchLabel);\n\n\t  for (var cur, sawDefault; tokType != _braceR;) {\n\t\tif (tokType === _case || tokType === _default) {\n\t\t  var isCase = tokType === _case;\n\t\t  if (cur) finishNode(cur, \"SwitchCase\");\n\t\t  node.cases.push(cur = startNode());\n\t\t  cur.consequent = [];\n\t\t  next();\n\t\t  if (isCase) cur.test = parseExpression();\n\t\t  else {\n\t\t\tif (sawDefault) raise(lastStart, \"Multiple default clauses\"); sawDefault = true;\n\t\t\tcur.test = null;\n\t\t  }\n\t\t  expect(_colon);\n\t\t} else {\n\t\t  if (!cur) unexpected();\n\t\t  cur.consequent.push(parseStatement());\n\t\t}\n\t  }\n\t  if (cur) finishNode(cur, \"SwitchCase\");\n\t  next();\n\t  labels.pop();\n\t  return finishNode(node, \"SwitchStatement\");\n\n\tcase _throw:\n\t  next();\n\t  if (newline.test(input.slice(lastEnd, tokStart)))\n\t\traise(lastEnd, \"Illegal newline after throw\");\n\t  node.argument = parseExpression();\n\t  semicolon();\n\t  return finishNode(node, \"ThrowStatement\");\n\n\tcase _try:\n\t  next();\n\t  node.block = parseBlock();\n\t  node.handler = null;\n\t  if (tokType === _catch) {\n\t\tvar clause = startNode();\n\t\tnext();\n\t\texpect(_parenL);\n\t\tclause.param = parseIdent();\n\t\tif (strict && isStrictBadIdWord(clause.param.name))\n\t\t  raise(clause.param.start, \"Binding \" + clause.param.name + \" in strict mode\");\n\t\texpect(_parenR);\n\t\tclause.guard = null;\n\t\tclause.body = parseBlock();\n\t\tnode.handler = finishNode(clause, \"CatchClause\");\n\t  }\n\t  node.guardedHandlers = empty;\n\t  node.finalizer = eat(_finally) ? parseBlock() : null;\n\t  if (!node.handler && !node.finalizer)\n\t\traise(node.start, \"Missing catch or finally clause\");\n\t  return finishNode(node, \"TryStatement\");\n\n\tcase _var:\n\t  next();\n\t  parseVar(node);\n\t  semicolon();\n\t  return finishNode(node, \"VariableDeclaration\");\n\n\tcase _while:\n\t  next();\n\t  node.test = parseParenExpression();\n\t  labels.push(loopLabel);\n\t  node.body = parseStatement();\n\t  labels.pop();\n\t  return finishNode(node, \"WhileStatement\");\n\n\tcase _with:\n\t  if (strict) raise(tokStart, \"'with' in strict mode\");\n\t  next();\n\t  node.object = parseParenExpression();\n\t  node.body = parseStatement();\n\t  return finishNode(node, \"WithStatement\");\n\n\tcase _braceL:\n\t  return parseBlock();\n\n\tcase _semi:\n\t  next();\n\t  return finishNode(node, \"EmptyStatement\");\n\n\tdefault:\n\t  var maybeName = tokVal, expr = parseExpression();\n\t  if (starttype === _name && expr.type === \"Identifier\" && eat(_colon)) {\n\t\tfor (var i = 0; i < labels.length; ++i)\n\t\t  if (labels[i].name === maybeName) raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n\t\tvar kind = tokType.isLoop ? \"loop\" : tokType === _switch ? \"switch\" : null;\n\t\tlabels.push({name: maybeName, kind: kind});\n\t\tnode.body = parseStatement();\n\t\tlabels.pop();\n\t\tnode.label = expr;\n\t\treturn finishNode(node, \"LabeledStatement\");\n\t  } else {\n\t\tnode.expression = expr;\n\t\tsemicolon();\n\t\treturn finishNode(node, \"ExpressionStatement\");\n\t  }\n\t}\n  }\n\n  function parseParenExpression() {\n\texpect(_parenL);\n\tvar val = parseExpression();\n\texpect(_parenR);\n\treturn val;\n  }\n\n  function parseBlock(allowStrict) {\n\tvar node = startNode(), first = true, strict = false, oldStrict;\n\tnode.body = [];\n\texpect(_braceL);\n\twhile (!eat(_braceR)) {\n\t  var stmt = parseStatement();\n\t  node.body.push(stmt);\n\t  if (first && allowStrict && isUseStrict(stmt)) {\n\t\toldStrict = strict;\n\t\tsetStrict(strict = true);\n\t  }\n\t  first = false;\n\t}\n\tif (strict && !oldStrict) setStrict(false);\n\treturn finishNode(node, \"BlockStatement\");\n  }\n\n  function parseFor(node, init) {\n\tnode.init = init;\n\texpect(_semi);\n\tnode.test = tokType === _semi ? null : parseExpression();\n\texpect(_semi);\n\tnode.update = tokType === _parenR ? null : parseExpression();\n\texpect(_parenR);\n\tnode.body = parseStatement();\n\tlabels.pop();\n\treturn finishNode(node, \"ForStatement\");\n  }\n\n  function parseForIn(node, init) {\n\tnode.left = init;\n\tnode.right = parseExpression();\n\texpect(_parenR);\n\tnode.body = parseStatement();\n\tlabels.pop();\n\treturn finishNode(node, \"ForInStatement\");\n  }\n\n  function parseVar(node, noIn) {\n\tnode.declarations = [];\n\tnode.kind = \"var\";\n\tfor (;;) {\n\t  var decl = startNode();\n\t  decl.id = parseIdent();\n\t  if (strict && isStrictBadIdWord(decl.id.name))\n\t\traise(decl.id.start, \"Binding \" + decl.id.name + \" in strict mode\");\n\t  decl.init = eat(_eq) ? parseExpression(true, noIn) : null;\n\t  node.declarations.push(finishNode(decl, \"VariableDeclarator\"));\n\t  if (!eat(_comma)) break;\n\t}\n\treturn node;\n  }\n\n  function parseExpression(noComma, noIn) {\n\tvar expr = parseMaybeAssign(noIn);\n\tif (!noComma && tokType === _comma) {\n\t  var node = startNodeFrom(expr);\n\t  node.expressions = [expr];\n\t  while (eat(_comma)) node.expressions.push(parseMaybeAssign(noIn));\n\t  return finishNode(node, \"SequenceExpression\");\n\t}\n\treturn expr;\n  }\n\n  function parseMaybeAssign(noIn) {\n\tvar left = parseMaybeConditional(noIn);\n\tif (tokType.isAssign) {\n\t  var node = startNodeFrom(left);\n\t  node.operator = tokVal;\n\t  node.left = left;\n\t  next();\n\t  node.right = parseMaybeAssign(noIn);\n\t  checkLVal(left);\n\t  return finishNode(node, \"AssignmentExpression\");\n\t}\n\treturn left;\n  }\n\n  function parseMaybeConditional(noIn) {\n\tvar expr = parseExprOps(noIn);\n\tif (eat(_question)) {\n\t  var node = startNodeFrom(expr);\n\t  node.test = expr;\n\t  node.consequent = parseExpression(true);\n\t  expect(_colon);\n\t  node.alternate = parseExpression(true, noIn);\n\t  return finishNode(node, \"ConditionalExpression\");\n\t}\n\treturn expr;\n  }\n\n  function parseExprOps(noIn) {\n\treturn parseExprOp(parseMaybeUnary(), -1, noIn);\n  }\n\n  function parseExprOp(left, minPrec, noIn) {\n\tvar prec = tokType.binop;\n\tif (prec != null && (!noIn || tokType !== _in)) {\n\t  if (prec > minPrec) {\n\t\tvar node = startNodeFrom(left);\n\t\tnode.left = left;\n\t\tnode.operator = tokVal;\n\t\tvar op = tokType;\n\t\tnext();\n\t\tnode.right = parseExprOp(parseMaybeUnary(), prec, noIn);\n\t\tvar exprNode = finishNode(node, (op === _logicalOR || op === _logicalAND) ? \"LogicalExpression\" : \"BinaryExpression\");\n\t\treturn parseExprOp(exprNode, minPrec, noIn);\n\t  }\n\t}\n\treturn left;\n  }\n\n  function parseMaybeUnary() {\n\tif (tokType.prefix) {\n\t  var node = startNode(), update = tokType.isUpdate;\n\t  node.operator = tokVal;\n\t  node.prefix = true;\n\t  tokRegexpAllowed = true;\n\t  next();\n\t  node.argument = parseMaybeUnary();\n\t  if (update) checkLVal(node.argument);\n\t  else if (strict && node.operator === \"delete\" &&\n\t\t\t   node.argument.type === \"Identifier\")\n\t\traise(node.start, \"Deleting local variable in strict mode\");\n\t  return finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n\t}\n\tvar expr = parseExprSubscripts();\n\twhile (tokType.postfix && !canInsertSemicolon()) {\n\t  var node = startNodeFrom(expr);\n\t  node.operator = tokVal;\n\t  node.prefix = false;\n\t  node.argument = expr;\n\t  checkLVal(expr);\n\t  next();\n\t  expr = finishNode(node, \"UpdateExpression\");\n\t}\n\treturn expr;\n  }\n\n  function parseExprSubscripts() {\n\treturn parseSubscripts(parseExprAtom());\n  }\n\n  function parseSubscripts(base, noCalls) {\n\tif (eat(_dot)) {\n\t  var node = startNodeFrom(base);\n\t  node.object = base;\n\t  node.property = parseIdent(true);\n\t  node.computed = false;\n\t  return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);\n\t} else if (eat(_bracketL)) {\n\t  var node = startNodeFrom(base);\n\t  node.object = base;\n\t  node.property = parseExpression();\n\t  node.computed = true;\n\t  expect(_bracketR);\n\t  return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);\n\t} else if (!noCalls && eat(_parenL)) {\n\t  var node = startNodeFrom(base);\n\t  node.callee = base;\n\t  node.arguments = parseExprList(_parenR, false);\n\t  return parseSubscripts(finishNode(node, \"CallExpression\"), noCalls);\n\t} else return base;\n  }\n\n  function parseExprAtom() {\n\tswitch (tokType) {\n\tcase _this:\n\t  var node = startNode();\n\t  next();\n\t  return finishNode(node, \"ThisExpression\");\n\tcase _name:\n\t  return parseIdent();\n\tcase _num: case _string: case _regexp:\n\t  var node = startNode();\n\t  node.value = tokVal;\n\t  node.raw = input.slice(tokStart, tokEnd);\n\t  next();\n\t  return finishNode(node, \"Literal\");\n\n\tcase _null: case _true: case _false:\n\t  var node = startNode();\n\t  node.value = tokType.atomValue;\n\t  node.raw = tokType.keyword;\n\t  next();\n\t  return finishNode(node, \"Literal\");\n\n\tcase _parenL:\n\t  var tokStartLoc1 = tokStartLoc, tokStart1 = tokStart;\n\t  next();\n\t  var val = parseExpression();\n\t  val.start = tokStart1;\n\t  val.end = tokEnd;\n\t  if (options.locations) {\n\t\tval.loc.start = tokStartLoc1;\n\t\tval.loc.end = tokEndLoc;\n\t  }\n\t  if (options.ranges)\n\t\tval.range = [tokStart1, tokEnd];\n\t  expect(_parenR);\n\t  return val;\n\n\tcase _bracketL:\n\t  var node = startNode();\n\t  next();\n\t  node.elements = parseExprList(_bracketR, true, true);\n\t  return finishNode(node, \"ArrayExpression\");\n\n\tcase _braceL:\n\t  return parseObj();\n\n\tcase _function:\n\t  var node = startNode();\n\t  next();\n\t  return parseFunction(node, false);\n\n\tcase _new:\n\t  return parseNew();\n\n\tdefault:\n\t  unexpected();\n\t}\n  }\n\n  function parseNew() {\n\tvar node = startNode();\n\tnext();\n\tnode.callee = parseSubscripts(parseExprAtom(), true);\n\tif (eat(_parenL)) node.arguments = parseExprList(_parenR, false);\n\telse node.arguments = empty;\n\treturn finishNode(node, \"NewExpression\");\n  }\n\n  function parseObj() {\n\tvar node = startNode(), first = true, sawGetSet = false;\n\tnode.properties = [];\n\tnext();\n\twhile (!eat(_braceR)) {\n\t  if (!first) {\n\t\texpect(_comma);\n\t\tif (options.allowTrailingCommas && eat(_braceR)) break;\n\t  } else first = false;\n\n\t  var prop = {key: parsePropertyName()}, isGetSet = false, kind;\n\t  if (eat(_colon)) {\n\t\tprop.value = parseExpression(true);\n\t\tkind = prop.kind = \"init\";\n\t  } else if (options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n\t\t\t\t (prop.key.name === \"get\" || prop.key.name === \"set\")) {\n\t\tisGetSet = sawGetSet = true;\n\t\tkind = prop.kind = prop.key.name;\n\t\tprop.key = parsePropertyName();\n\t\tif (tokType !== _parenL) unexpected();\n\t\tprop.value = parseFunction(startNode(), false);\n\t  } else unexpected();\n\n\t  if (prop.key.type === \"Identifier\" && (strict || sawGetSet)) {\n\t\tfor (var i = 0; i < node.properties.length; ++i) {\n\t\t  var other = node.properties[i];\n\t\t  if (other.key.name === prop.key.name) {\n\t\t\tvar conflict = kind == other.kind || isGetSet && other.kind === \"init\" ||\n\t\t\t  kind === \"init\" && (other.kind === \"get\" || other.kind === \"set\");\n\t\t\tif (conflict && !strict && kind === \"init\" && other.kind === \"init\") conflict = false;\n\t\t\tif (conflict) raise(prop.key.start, \"Redefinition of property\");\n\t\t  }\n\t\t}\n\t  }\n\t  node.properties.push(prop);\n\t}\n\treturn finishNode(node, \"ObjectExpression\");\n  }\n\n  function parsePropertyName() {\n\tif (tokType === _num || tokType === _string) return parseExprAtom();\n\treturn parseIdent(true);\n  }\n\n  function parseFunction(node, isStatement) {\n\tif (tokType === _name) node.id = parseIdent();\n\telse if (isStatement) unexpected();\n\telse node.id = null;\n\tnode.params = [];\n\tvar first = true;\n\texpect(_parenL);\n\twhile (!eat(_parenR)) {\n\t  if (!first) expect(_comma); else first = false;\n\t  node.params.push(parseIdent());\n\t}\n\n\tvar oldInFunc = inFunction, oldLabels = labels;\n\tinFunction = true; labels = [];\n\tnode.body = parseBlock(true);\n\tinFunction = oldInFunc; labels = oldLabels;\n\n\tif (strict || node.body.body.length && isUseStrict(node.body.body[0])) {\n\t  for (var i = node.id ? -1 : 0; i < node.params.length; ++i) {\n\t\tvar id = i < 0 ? node.id : node.params[i];\n\t\tif (isStrictReservedWord(id.name) || isStrictBadIdWord(id.name))\n\t\t  raise(id.start, \"Defining '\" + id.name + \"' in strict mode\");\n\t\tif (i >= 0) for (var j = 0; j < i; ++j) if (id.name === node.params[j].name)\n\t\t  raise(id.start, \"Argument name clash in strict mode\");\n\t  }\n\t}\n\n\treturn finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n  }\n\n  function parseExprList(close, allowTrailingComma, allowEmpty) {\n\tvar elts = [], first = true;\n\twhile (!eat(close)) {\n\t  if (!first) {\n\t\texpect(_comma);\n\t\tif (allowTrailingComma && options.allowTrailingCommas && eat(close)) break;\n\t  } else first = false;\n\n\t  if (allowEmpty && tokType === _comma) elts.push(null);\n\t  else elts.push(parseExpression(true));\n\t}\n\treturn elts;\n  }\n\n  function parseIdent(liberal) {\n\tvar node = startNode();\n\tif (liberal && options.forbidReserved == \"everywhere\") liberal = false;\n\tif (tokType === _name) {\n\t  if (!liberal &&\n\t\t  (options.forbidReserved &&\n\t\t   (options.ecmaVersion === 3 ? isReservedWord3 : isReservedWord5)(tokVal) ||\n\t\t   strict && isStrictReservedWord(tokVal)) &&\n\t\t  input.slice(tokStart, tokEnd).indexOf(\"\\\\\") == -1)\n\t\traise(tokStart, \"The keyword '\" + tokVal + \"' is reserved\");\n\t  node.name = tokVal;\n\t} else if (liberal && tokType.keyword) {\n\t  node.name = tokType.keyword;\n\t} else {\n\t  unexpected();\n\t}\n\ttokRegexpAllowed = false;\n\tnext();\n\treturn finishNode(node, \"Identifier\");\n  }\n\n});\n\n\t\tif (!acorn.version)\n\t\t\tacorn = null;\n\t}\n\n\tfunction parse(code, options) {\n\t\treturn (global.acorn || acorn).parse(code, options);\n\t}\n\n\tvar binaryOperators = {\n\t\t'+': '__add',\n\t\t'-': '__subtract',\n\t\t'*': '__multiply',\n\t\t'/': '__divide',\n\t\t'%': '__modulo',\n\t\t'==': '__equals',\n\t\t'!=': '__equals'\n\t};\n\n\tvar unaryOperators = {\n\t\t'-': '__negate',\n\t\t'+': '__self'\n\t};\n\n\tvar fields = Base.each(\n\t\t['add', 'subtract', 'multiply', 'divide', 'modulo', 'equals', 'negate'],\n\t\tfunction(name) {\n\t\t\tthis['__' + name] = '#' + name;\n\t\t},\n\t\t{\n\t\t\t__self: function() {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t);\n\tPoint.inject(fields);\n\tSize.inject(fields);\n\tColor.inject(fields);\n\n\tfunction __$__(left, operator, right) {\n\t\tvar handler = binaryOperators[operator];\n\t\tif (left && left[handler]) {\n\t\t\tvar res = left[handler](right);\n\t\t\treturn operator === '!=' ? !res : res;\n\t\t}\n\t\tswitch (operator) {\n\t\tcase '+': return left + right;\n\t\tcase '-': return left - right;\n\t\tcase '*': return left * right;\n\t\tcase '/': return left / right;\n\t\tcase '%': return left % right;\n\t\tcase '==': return left == right;\n\t\tcase '!=': return left != right;\n\t\t}\n\t}\n\n\tfunction $__(operator, value) {\n\t\tvar handler = unaryOperators[operator];\n\t\tif (value && value[handler])\n\t\t\treturn value[handler]();\n\t\tswitch (operator) {\n\t\tcase '+': return +value;\n\t\tcase '-': return -value;\n\t\t}\n\t}\n\n\tfunction compile(code, options) {\n\t\tif (!code)\n\t\t\treturn '';\n\t\toptions = options || {};\n\n\t\tvar insertions = [];\n\n\t\tfunction getOffset(offset) {\n\t\t\tfor (var i = 0, l = insertions.length; i < l; i++) {\n\t\t\t\tvar insertion = insertions[i];\n\t\t\t\tif (insertion[0] >= offset)\n\t\t\t\t\tbreak;\n\t\t\t\toffset += insertion[1];\n\t\t\t}\n\t\t\treturn offset;\n\t\t}\n\n\t\tfunction getCode(node) {\n\t\t\treturn code.substring(getOffset(node.range[0]),\n\t\t\t\t\tgetOffset(node.range[1]));\n\t\t}\n\n\t\tfunction getBetween(left, right) {\n\t\t\treturn code.substring(getOffset(left.range[1]),\n\t\t\t\t\tgetOffset(right.range[0]));\n\t\t}\n\n\t\tfunction replaceCode(node, str) {\n\t\t\tvar start = getOffset(node.range[0]),\n\t\t\t\tend = getOffset(node.range[1]),\n\t\t\t\tinsert = 0;\n\t\t\tfor (var i = insertions.length - 1; i >= 0; i--) {\n\t\t\t\tif (start > insertions[i][0]) {\n\t\t\t\t\tinsert = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tinsertions.splice(insert, 0, [start, str.length - end + start]);\n\t\t\tcode = code.substring(0, start) + str + code.substring(end);\n\t\t}\n\n\t\tfunction walkAST(node, parent) {\n\t\t\tif (!node)\n\t\t\t\treturn;\n\t\t\tfor (var key in node) {\n\t\t\t\tif (key === 'range' || key === 'loc')\n\t\t\t\t\tcontinue;\n\t\t\t\tvar value = node[key];\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tfor (var i = 0, l = value.length; i < l; i++)\n\t\t\t\t\t\twalkAST(value[i], node);\n\t\t\t\t} else if (value && typeof value === 'object') {\n\t\t\t\t\twalkAST(value, node);\n\t\t\t\t}\n\t\t\t}\n\t\t\tswitch (node.type) {\n\t\t\tcase 'UnaryExpression':\n\t\t\t\tif (node.operator in unaryOperators\n\t\t\t\t\t\t&& node.argument.type !== 'Literal') {\n\t\t\t\t\tvar arg = getCode(node.argument);\n\t\t\t\t\treplaceCode(node, '$__(\"' + node.operator + '\", '\n\t\t\t\t\t\t\t+ arg + ')');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'BinaryExpression':\n\t\t\t\tif (node.operator in binaryOperators\n\t\t\t\t\t\t&& node.left.type !== 'Literal') {\n\t\t\t\t\tvar left = getCode(node.left),\n\t\t\t\t\t\tright = getCode(node.right),\n\t\t\t\t\t\tbetween = getBetween(node.left, node.right),\n\t\t\t\t\t\toperator = node.operator;\n\t\t\t\t\treplaceCode(node, '__$__(' + left + ','\n\t\t\t\t\t\t\t+ between.replace(new RegExp('\\\\' + operator),\n\t\t\t\t\t\t\t\t'\"' + operator + '\"')\n\t\t\t\t\t\t\t+ ', ' + right + ')');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'UpdateExpression':\n\t\t\tcase 'AssignmentExpression':\n\t\t\t\tvar parentType = parent && parent.type;\n\t\t\t\tif (!(\n\t\t\t\t\t\tparentType === 'ForStatement'\n\t\t\t\t\t\t|| parentType === 'BinaryExpression'\n\t\t\t\t\t\t\t&& /^[=!<>]/.test(parent.operator)\n\t\t\t\t\t\t|| parentType === 'MemberExpression' && parent.computed\n\t\t\t\t)) {\n\t\t\t\t\tif (node.type === 'UpdateExpression') {\n\t\t\t\t\t\tvar arg = getCode(node.argument),\n\t\t\t\t\t\t\texp = '__$__(' + arg + ', \"' + node.operator[0]\n\t\t\t\t\t\t\t\t\t+ '\", 1)',\n\t\t\t\t\t\t\tstr = arg + ' = ' + exp;\n\t\t\t\t\t\tif (!node.prefix\n\t\t\t\t\t\t\t\t&& (parentType === 'AssignmentExpression'\n\t\t\t\t\t\t\t\t\t|| parentType === 'VariableDeclarator')) {\n\t\t\t\t\t\t\tif (getCode(parent.left || parent.id) === arg)\n\t\t\t\t\t\t\t\tstr = exp;\n\t\t\t\t\t\t\tstr = arg + '; ' + str;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treplaceCode(node, str);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (/^.=$/.test(node.operator)\n\t\t\t\t\t\t\t\t&& node.left.type !== 'Literal') {\n\t\t\t\t\t\t\tvar left = getCode(node.left),\n\t\t\t\t\t\t\t\tright = getCode(node.right),\n\t\t\t\t\t\t\t\texp = left + ' = __$__(' + left + ', \"'\n\t\t\t\t\t\t\t\t\t+ node.operator[0] + '\", ' + right + ')';\n\t\t\t\t\t\t\treplaceCode(node, /^\\(.*\\)$/.test(getCode(node))\n\t\t\t\t\t\t\t\t\t? '(' + exp + ')' : exp);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction encodeVLQ(value) {\n\t\t\tvar res = '',\n\t\t\t\tbase64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\t\tvalue = (Math.abs(value) << 1) + (value < 0 ? 1 : 0);\n\t\t\twhile (value || !res) {\n\t\t\t\tvar next = value & (32 - 1);\n\t\t\t\tvalue >>= 5;\n\t\t\t\tif (value)\n\t\t\t\t\tnext |= 32;\n\t\t\t\tres += base64[next];\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\n\t\tvar url = options.url || '',\n\t\t\tagent = paper.agent,\n\t\t\tversion = agent.versionNumber,\n\t\t\toffsetCode = false,\n\t\t\tsourceMaps = options.sourceMaps,\n\t\t\tsource = options.source || code,\n\t\t\tlineBreaks = /\\r\\n|\\n|\\r/mg,\n\t\t\toffset = options.offset || 0,\n\t\t\tmap;\n\t\tif (sourceMaps && (agent.chrome && version >= 30\n\t\t\t\t|| agent.webkit && version >= 537.76\n\t\t\t\t|| agent.firefox && version >= 23\n\t\t\t\t|| agent.node)) {\n\t\t\tif (agent.node) {\n\t\t\t\toffset -= 2;\n\t\t\t} else if (window && url && !window.location.href.indexOf(url)) {\n\t\t\t\tvar html = document.getElementsByTagName('html')[0].innerHTML;\n\t\t\t\toffset = html.substr(0, html.indexOf(code) + 1).match(\n\t\t\t\t\t\tlineBreaks).length + 1;\n\t\t\t}\n\t\t\toffsetCode = offset > 0 && !(\n\t\t\t\t\tagent.chrome && version >= 36 ||\n\t\t\t\t\tagent.safari && version >= 600 ||\n\t\t\t\t\tagent.firefox && version >= 40 ||\n\t\t\t\t\tagent.node);\n\t\t\tvar mappings = ['AA' + encodeVLQ(offsetCode ? 0 : offset) + 'A'];\n\t\t\tmappings.length = (code.match(lineBreaks) || []).length + 1\n\t\t\t\t\t+ (offsetCode ? offset : 0);\n\t\t\tmap = {\n\t\t\t\tversion: 3,\n\t\t\t\tfile: url,\n\t\t\t\tnames:[],\n\t\t\t\tmappings: mappings.join(';AACA'),\n\t\t\t\tsourceRoot: '',\n\t\t\t\tsources: [url],\n\t\t\t\tsourcesContent: [source]\n\t\t\t};\n\t\t}\n\t\twalkAST(parse(code, { ranges: true, preserveParens: true }));\n\t\tif (map) {\n\t\t\tif (offsetCode) {\n\t\t\t\tcode = new Array(offset + 1).join('\\n') + code;\n\t\t\t}\n\t\t\tif (/^(inline|both)$/.test(sourceMaps)) {\n\t\t\t\tcode += \"\\n//# sourceMappingURL=data:application/json;base64,\"\n\t\t\t\t\t\t+ self.btoa(unescape(encodeURIComponent(\n\t\t\t\t\t\t\tJSON.stringify(map))));\n\t\t\t}\n\t\t\tcode += \"\\n//# sourceURL=\" + (url || 'paperscript');\n\t\t}\n\t\treturn {\n\t\t\turl: url,\n\t\t\tsource: source,\n\t\t\tcode: code,\n\t\t\tmap: map\n\t\t};\n\t}\n\n\tfunction execute(code, scope, options) {\n\t\tpaper = scope;\n\t\tvar view = scope.getView(),\n\t\t\ttool = /\\btool\\.\\w+|\\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\\b/\n\t\t\t\t\t.test(code) && !/\\bnew\\s+Tool\\b/.test(code)\n\t\t\t\t\t\t? new Tool() : null,\n\t\t\ttoolHandlers = tool ? tool._events : [],\n\t\t\thandlers = ['onFrame', 'onResize'].concat(toolHandlers),\n\t\t\tparams = [],\n\t\t\targs = [],\n\t\t\tfunc,\n\t\t\tcompiled = typeof code === 'object' ? code : compile(code, options);\n\t\tcode = compiled.code;\n\t\tfunction expose(scope, hidden) {\n\t\t\tfor (var key in scope) {\n\t\t\t\tif ((hidden || !/^_/.test(key)) && new RegExp('([\\\\b\\\\s\\\\W]|^)'\n\t\t\t\t\t\t+ key.replace(/\\$/g, '\\\\$') + '\\\\b').test(code)) {\n\t\t\t\t\tparams.push(key);\n\t\t\t\t\targs.push(scope[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texpose({ __$__: __$__, $__: $__, paper: scope, view: view, tool: tool },\n\t\t\t\ttrue);\n\t\texpose(scope);\n\t\thandlers = Base.each(handlers, function(key) {\n\t\t\tif (new RegExp('\\\\s+' + key + '\\\\b').test(code)) {\n\t\t\t\tparams.push(key);\n\t\t\t\tthis.push(key + ': ' + key);\n\t\t\t}\n\t\t}, []).join(', ');\n\t\tif (handlers)\n\t\t\tcode += '\\nreturn { ' + handlers + ' };';\n\t\tvar agent = paper.agent;\n\t\tif (document && (agent.chrome\n\t\t\t\t|| agent.firefox && agent.versionNumber < 40)) {\n\t\t\tvar script = document.createElement('script'),\n\t\t\t\thead = document.head || document.getElementsByTagName('head')[0];\n\t\t\tif (agent.firefox)\n\t\t\t\tcode = '\\n' + code;\n\t\t\tscript.appendChild(document.createTextNode(\n\t\t\t\t'paper._execute = function(' + params + ') {' + code + '\\n}'\n\t\t\t));\n\t\t\thead.appendChild(script);\n\t\t\tfunc = paper._execute;\n\t\t\tdelete paper._execute;\n\t\t\thead.removeChild(script);\n\t\t} else {\n\t\t\tfunc = Function(params, code);\n\t\t}\n\t\tvar res = func.apply(scope, args) || {};\n\t\tBase.each(toolHandlers, function(key) {\n\t\t\tvar value = res[key];\n\t\t\tif (value)\n\t\t\t\ttool[key] = value;\n\t\t});\n\t\tif (view) {\n\t\t\tif (res.onResize)\n\t\t\t\tview.setOnResize(res.onResize);\n\t\t\tview.emit('resize', {\n\t\t\t\tsize: view.size,\n\t\t\t\tdelta: new Point()\n\t\t\t});\n\t\t\tif (res.onFrame)\n\t\t\t\tview.setOnFrame(res.onFrame);\n\t\t\tview.requestUpdate();\n\t\t}\n\t\treturn compiled;\n\t}\n\n\tfunction loadScript(script) {\n\t\tif (/^text\\/(?:x-|)paperscript$/.test(script.type)\n\t\t\t\t&& PaperScope.getAttribute(script, 'ignore') !== 'true') {\n\t\t\tvar canvasId = PaperScope.getAttribute(script, 'canvas'),\n\t\t\t\tcanvas = document.getElementById(canvasId),\n\t\t\t\tsrc = script.src || script.getAttribute('data-src'),\n\t\t\t\tasync = PaperScope.hasAttribute(script, 'async'),\n\t\t\t\tscopeAttribute = 'data-paper-scope';\n\t\t\tif (!canvas)\n\t\t\t\tthrow new Error('Unable to find canvas with id \"'\n\t\t\t\t\t\t+ canvasId + '\"');\n\t\t\tvar scope = PaperScope.get(canvas.getAttribute(scopeAttribute))\n\t\t\t\t\t\t|| new PaperScope().setup(canvas);\n\t\t\tcanvas.setAttribute(scopeAttribute, scope._id);\n\t\t\tif (src) {\n\t\t\t\tHttp.request({\n\t\t\t\t\turl: src,\n\t\t\t\t\tasync: async,\n\t\t\t\t\tmimeType: 'text/plain',\n\t\t\t\t\tonLoad: function(code) {\n\t\t\t\t\t\texecute(code, scope, src);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\texecute(script.innerHTML, scope, script.baseURI);\n\t\t\t}\n\t\t\tscript.setAttribute('data-paper-ignore', 'true');\n\t\t\treturn scope;\n\t\t}\n\t}\n\n\tfunction loadAll() {\n\t\tBase.each(document && document.getElementsByTagName('script'),\n\t\t\t\tloadScript);\n\t}\n\n\tfunction load(script) {\n\t\treturn script ? loadScript(script) : loadAll();\n\t}\n\n\tif (window) {\n\t\tif (document.readyState === 'complete') {\n\t\t\tsetTimeout(loadAll);\n\t\t} else {\n\t\t\tDomEvent.add(window, { load: loadAll });\n\t\t}\n\t}\n\n\treturn {\n\t\tcompile: compile,\n\t\texecute: execute,\n\t\tload: load,\n\t\tparse: parse\n\t};\n\n}.call(this);\n\npaper = new (PaperScope.inject(Base.exports, {\n\tBase: Base,\n\tNumerical: Numerical,\n\tKey: Key,\n\tDomEvent: DomEvent,\n\tDomElement: DomElement,\n\tdocument: document,\n\twindow: window,\n\tSymbol: SymbolDefinition,\n\tPlacedSymbol: SymbolItem\n}))();\n\nif (paper.agent.node) {\n\t__webpack_require__(/*! ./node/extend.js */ 1)(paper);\n}\n\nif (true) {\n\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (paper),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else {}\n\nreturn paper;\n}.call(this, typeof self === 'object' ? self : null);\n\n\n//# sourceURL=webpack:///./node_modules/paper/dist/paper-full.js?");

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/path-browserify/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/drawfont.js":
/*!*************************!*\
  !*** ./src/drawfont.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _opentype = __webpack_require__(/*! ./lib/opentype.js */ \"./src/lib/opentype.js\");\n\nvar _opentype2 = _interopRequireDefault(_opentype);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Product of ONE MORE WAY\n * (c) Moum app\n * http://slainger.me v0.0.1 | (c) Min Seong Kim a.k.a.SalingerMS\n * Any Copy Prohibited\n * Uses opentype.js by Frederik De Bleser and other contributors\n *      Paper.js by Juerg Lehni & Jonathan Puckey\n */\n\n// ********************************** //\n// MADATORY IMPORTS                   //\n// ********************************** //\nvar remote = __webpack_require__(/*! electron */ \"./node_modules/electron/index.js\").remote;\n// const opentype = remote.getGlobal('opentype');\n\n// import drawIM from \"./draw.js\";\nvar path = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\nvar paper = __webpack_require__(/*! paper */ \"./node_modules/paper/dist/paper-full.js\");\n// const opentype = require('opentype.js');\n\n\n// ********************************** //\n// public variables                   //\n// ********************************** //\n\nvar FONT = void 0;\nvar FONT_DEFAULT = void 0;\nvar FONT_FILE_NAME = '../assets/fonts/NanumBarunGothic.woff';\n\nvar CANVAS = document.getElementById('canvas');\nvar CTX = CANVAS.getContext(\"2d\");\n\nvar GLYPH_SELECTION = ['', '', ''];\nvar GLYPH_TABLE_LIST = [];\nvar CHAR_TO_DRAW = '한';\n\n// ********************************** //\n// SETUP FOR APP                      //\n// ********************************** //\npaper.setup(CANVAS);\n\nloadFont(FONT_FILE_NAME);\n\nvar F_HEAD = FONT.tables.head;\nvar GLYPH_TO_DRAW = FONT.charToGlyph(CHAR_TO_DRAW);\n\nloadGlyphInfo(GLYPH_TO_DRAW);\n\n// ********************************** //\n// HANGUL JAMO                        //\n// ********************************** //\nvar CHO = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n    JUNG = ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'],\n    JONG = ['', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n\n// ********************************** //\n// DOM selections                     //\n// ********************************** //\n\nvar $_indexButtons = document.querySelectorAll('.index-button');\nvar $_redrawButton = document.querySelector('.redraw');\n\nvar $_rightMenuBarAll = document.querySelectorAll('.menu-right .bar');\n\nvar $_glyphTAB = document.getElementById('glyphs');\nvar $_fontinfoTAB = document.getElementById('fontinfo');\nvar $_fonttableTAB = document.getElementById('fonttable');\nvar $_glyphMenu = document.getElementById('glyph-menu');\nvar $_fontinfoMenu = document.getElementById('glyph-info-menu');\nvar $_fonttableMenu = document.getElementById('table-menu');\n\nvar $_glyphDiv = document.getElementById('glyph-menu');\nvar $_glyphInfoDiv = document.getElementById('glyph-info-menu');\nvar $_tableDiv = document.getElementById('table-menu');\n\nvar $_allCanvas = document.querySelectorAll('#glyph_list .glyph-list canvas');\n\n// ********************************** //\n// left menu tab controls             //\n// ********************************** //\n\naddEventListers();\n\n/** \n * adding Event Listener\n * @global\n * @function addEventListers\n * @param none\n * these will run onload()\n*/\nfunction addEventListers() {\n    /* \n        to LEFT-MENU, glyph selection buttons, ADD functions --\n        1. add to its own css class 'index-selected'\n        2. add to GLYPH_SELECTION array (which projects RIGHT-MENU, glyph-table)\n     */\n    for (var idx = 0; 0 < $_indexButtons.length; idx++) {\n        // console.log(indexButtons[idx]);\n        if (!$_indexButtons[idx]) break;\n        $_indexButtons[idx].addEventListener('click', function () {\n            // console.log('clicked');\n            // console.log(this);\n            // console.log(this.className+' to ->');\n            var glyphChar = this.innerText;\n            var glyphIndex = 0;\n            // console.log('parent : ' + this.parentElement.id);\n            switch (this.parentElement.id) {\n                case 'first':\n                    glyphIndex = 0;\n                    break;\n                case 'second':\n                    glyphIndex = 1;\n                    break;\n                case 'third':\n                    glyphIndex = 2;\n                    break;\n            }\n            // console.log('glyphChar : ' + glyphChar);\n            // console.log('glyphIndex : ' + glyphIndex);\n            if (this.classList.contains('index-selected')) {\n                this.classList.remove('index-selected');\n                GLYPH_SELECTION[glyphIndex] = GLYPH_SELECTION[glyphIndex].replace(glyphChar, '');\n                // console.log(glyphSelection[glyphIndex].search(glyphChar));\n            } else {\n                this.classList.add('index-selected');\n                GLYPH_SELECTION[glyphIndex] += glyphChar;\n            }\n            // console.log(GLYPH_SELECTION);\n            // console.log(this.className);\n            // @TODO\n            toGlyphList(GLYPH_SELECTION);\n            drawThumbNail();\n        }, false);\n    }\n    /* \n        to RIGHT-MENU, .bar divs, ADD functions --\n        1. add to its own css class 'index-selected'\n        2. add to GLYPH_SELECTION array (which projects RIGHT-MENU, glyph-table)\n     */\n    for (i in $_rightMenuBarAll) {\n        if ((typeof i === 'undefined' ? 'undefined' : _typeof(i)) != Number) break;\n        $_rightMenuBarAll[i].addEventListener('click', function () {\n            // console.log('clicked bar');\n            var next = this.nextElementSibling;\n            while (next && !next.classList.contains('bar')) {\n                if (next.classList.contains('display-none')) {\n                    next.classList.remove('display-none');\n                } else if (!next.classList.contains('display-none')) {\n                    next.classList.add('display-none');\n                }\n                next = next.nextElementSibling;\n            }\n        }, false);\n    }\n}\n\nwindow.addEventListener(\"resize\", function () {\n    var parent = CANVAS.parentElement;\n    // console.log('resized')\n    CANVAS.height = parent.offsetHeight;\n    CANVAS.width = parent.offsetWidth;\n\n    //resize everything\n    $_tableDiv.setAttribute('style', 'height:' + (window.innerHeight - 90) + 'px');\n    $_glyphInfoDiv.setAttribute('style', 'height:' + (window.innerHeight - 90) + 'px');\n    $_glyphDiv.setAttribute('style', 'height:' + (window.innerHeight - 90) + 'px');\n\n    drawGlyph(GLYPH_TO_DRAW);\n});\n\n$_redrawButton.addEventListener('click', function () {\n    drawGlyph(GLYPH_TO_DRAW);\n}, false);\n\nvar searchInput = document.querySelector(\"input.search\");\nsearchInput.addEventListener(\"keyup\", function (event) {\n    event.preventDefault();\n    if (event.keyCode === 13) {\n        console.log(this.value);\n        this.blur();\n        var tempArr = this.value.split('');\n        tempArr.forEach(function (e, i, tempArr) {\n            tempArr[i] = e.charCodeAt(0);\n        });\n        GLYPH_TABLE_LIST = tempArr;\n        //LOAD GLYPH TABLE\n        this.value = '';\n        drawThumbNail();\n    }\n});\n\n// ********************************** //\n// right menu tab controls            //\n// ********************************** //\n\n// let rightMenuTabs = document.querySelectorAll('.menu-selection div');\n// for(var i = 0; i < rightMenuTabs.length; i++){\n//     console.log('adding event listener!')\n//     rightMenuTabs[i].addEventListener('click', clickTab, false);\n// }\n\n// function clickTab(){\n//     console.log('selected!')\n\n//     rightMenuTabs[index].classList.add('selected');\n//     document.querySelector('.menu-right').children[index+1].classList.remove('display-none');\n// }\n// function unclickTAB(){\n//     for(var i = 0; i < rightMenuTabs.length; i++){\n//         rightMenuTabs[i].classList.remove('selected');\n//         document.querySelector('.menu-right').children[i+1].classList.add('display-none');\n//     }\n// }\n\n\nvar clickTAB1 = function clickTAB1() {\n    $_glyphTAB.classList.add('selected');\n    $_fontinfoTAB.classList.remove('selected');\n    $_fonttableTAB.classList.remove('selected');\n    $_glyphMenu.classList.remove('display-none');\n    $_fontinfoMenu.classList.add('display-none');\n    $_fonttableMenu.classList.add('display-none');\n    $_tableDiv.setAttribute('style', 'height:' + (window.innerHeight - 90) + 'px');\n};\nvar clickTAB2 = function clickTAB2() {\n    $_fontinfoTAB.classList.add('selected');\n    $_glyphTAB.classList.remove('selected');\n    $_fonttableTAB.classList.remove('selected');\n    $_fontinfoMenu.classList.remove('display-none');\n    $_glyphMenu.classList.add('display-none');\n    $_fonttableMenu.classList.add('display-none');\n    $_glyphInfoDiv.setAttribute('style', 'height:' + (window.innerHeight - 90) + 'px');\n};\nvar clickTAB3 = function clickTAB3() {\n    $_fonttableTAB.classList.add('selected');\n    $_glyphTAB.classList.remove('selected');\n    $_fontinfoTAB.classList.remove('selected');\n    $_fonttableMenu.classList.remove('display-none');\n    $_glyphMenu.classList.add('display-none');\n    $_fontinfoMenu.classList.add('display-none');\n    $_glyphDiv.setAttribute('style', 'height:' + (window.innerHeight - 90) + 'px');\n};\n$_glyphTAB.addEventListener(\"click\", clickTAB1, false);\n$_fontinfoTAB.addEventListener(\"click\", clickTAB2, false);\n$_fonttableTAB.addEventListener(\"click\", clickTAB3, false);\n\nfunction loadGlyphInfo(char) {\n    var table = document.getElementById('glyph-info-table');\n    table.innerHTML = '<tr><th>type</th><th>x</th><th>y</th></tr>';\n    var tablehtml = '';\n    for (i in char.path.commands) {\n        var point = char.path.commands[i];\n        tablehtml += '<tr><td>' + point.type + '</td>';\n        tablehtml += '<td>' + Math.round(point.x) + '</td>';\n        tablehtml += '<td>' + Math.round(point.y) + '</td></tr>';\n    }\n    table.innerHTML += tablehtml;\n}\n\n// ********************************** //\n// Loading default fonts              //\n// ********************************** //\n\n\nfunction loadFont(fontFileName) {\n    FONT = _opentype2.default.loadSync(fontFileName);\n    console.log('loaded ', FONT.names.fontFamily.en, FONT.names.fontFamily.ko);\n    // listAll(font.names);\n}\n\nfunction loadNew(fontFileName) {\n    window.fontFileName = fontFileName;\n    loadFont(fontFileName);\n}\n\nfunction listAll(o) {\n    if ((typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object') {\n        for (each in o) {\n            listAll(o[each]);\n        }\n    } else {\n        console.log(o);\n    }\n}\n\n// ********************************** //\n// drawing glyphs                     //\n// ********************************** //\n\n//private functions\n/**\n * Calculate Unicode Hangul Johap from Hangul Jamo Unicode \n * @function johap\n * @public\n * @param  {Object} arrIn - array with 3 unicode number fo hangul Jamo(Number)\n * @returns decimal unicode number\n */\nfunction johap(arrIn) {\n    var ret = 44032;\n    var index1 = CHO.indexOf(arrIn[0]);\n    var index2 = JUNG.indexOf(arrIn[1]);\n    var index3 = JONG.indexOf(arrIn[2]);\n    ret += 21 * 28 * index1 + 28 * index2 + index3;\n    return ret;\n}\n//for test\n// String.fromCharCode(johap(['ㄱ','ㅏ','ㄴ']));\n// String.fromCharCode(johap(GLYPH_SELECTION));\n\n// returns array of possible \nfunction toGlyphList(arr) {\n    GLYPH_TABLE_LIST = [];\n    if (arr[0] + arr[1] + arr[2] == '') {\n        GLYPH_TABLE_LIST = '가각갂갃간갅갆갇갈갉갊갋갌갍갎갏감갑값갓갔강갖갗갘같갚갛개객갞갟갠갡갢갣갤갥갦갧갨갩갪갫갬갭갮갯갰갱갲갳갴갵갶갷갸갹갺갻갼갽갾갿걀걁걂걃걄걅걆걇걈걉걊걋걌걍걎걏걐걑걒걓걔걕걖걗걘걙걚걛걜걝걞걟걠걡걢걣'.split();\n        // console.log(GLYPH_TABLE_LIST);\n        return;\n    }\n\n    var list1 = arr[0].length !== 0 ? arr[0].split('') : CHO;\n    var list2 = arr[1].length !== 0 ? arr[1].split('') : JUNG;\n    var list3 = arr[2].length !== 0 ? arr[2].split('') : JONG;\n\n    for (i in list1) {\n        for (j in list2) {\n            for (k in list3) {\n                // console.log('초성 : ' + list1[i],'중성 : ' + list2[j],'종성 : ' + list3[k])\n                GLYPH_TABLE_LIST.push(johap([list1[i], list2[j], list3[k]]));\n            }\n        }\n    }\n    // console.log(GLYPH_TABLE_LIST);\n    // var str = '';\n    // for(var i = 0; i < 100; i++){\n    //     str += String.fromCharCode(GLYPH_TABLE_LIST[i]);\n    // }\n    // console.log(str);\n};\n\ndrawGlyph(GLYPH_TO_DRAW);\n\nfunction clearCanvas() {\n    var tempctx = CANVAS.getContext('2d');\n    tempctx.clearRect(0, 0, CANVAS.width, CANVAS.height);\n    paper.setup(CANVAS);\n}\n\nfunction drawGlyph(glyph) {\n    clearCanvas();\n    // var tempGlyph = FONT.charToGlyph(glyph)\n    // var temppath = tempGlyph.path;\n    // draw(CTX,temppath);\n    //paper.projects.clear(CANVAS);\n    // console.log('drawing init');\n    var tempPath = new paper.Path({\n        strokeColor: 'black'\n    });\n    var points = glyph.path.commands;\n    for (idx in points) {\n        var p = points[idx];\n        // if(p.type !== 'M' && p.type !== 'Z')\n        // console.log('drawing',p.x, p.y);\n        var min = CANVAS.width > CANVAS.height ? CANVAS.height : CANVAS.width;\n        var tempPoint = new paper.Point(p.x * min / 1200, CANVAS.height * 0.75 - p.y * min / 1200);\n        tempPoint.selected = true;\n        tempPath.add(tempPoint);\n    }\n    loadGlyphInfo(glyph);\n}\n\n//draw thumbnail canvas\nfunction drawThumbNail() {\n    // for(i in $_allCanvas){\n    //     clearCanvas($_allCanvas[i]);\n    // };\n    for (var i = 0; i < 24; i++) {\n        var check = drawGlyphSmall($_allCanvas[i], i);\n        if (check === -1) break;\n        if (check === -2) continue;\n    };\n}\n\n// function clearCanvas(canvas){\n//     var ctx = canvas.getContext('2d')\n//     ctx.clearRect(0,0,canvas.offsetWidth, canvas.offsetHeight);\n// }\n\n//@TODO\nfunction drawGlyphSmall(canvas, index) {\n\n    if (GLYPH_TABLE_LIST[index] == undefined) return -1;\n    var char = String.fromCharCode(GLYPH_TABLE_LIST[index]);\n\n    var w = canvas.offsetWidth;\n    var h = canvas.offsetHeight;\n    canvas.setAttribute('id', 'UNI' + GLYPH_TABLE_LIST[index]);\n    canvas.setAttribute('width', w);\n    canvas.setAttribute('height', h);\n\n    // console.log('adding eventlistener')\n    canvas.addEventListener('click', function () {\n        var uni = this.id.substring(3);\n        CHAR_TO_DRAW = String.fromCharCode(uni);\n        GLYPH_TO_DRAW = FONT.charToGlyph(CHAR_TO_DRAW);\n        // console.log('CHAR_TO_DRAW : ',CHAR_TO_DRAW,' GLYPH_TO_DRAW : ',GLYPH_TO_DRAW)\n        drawGlyph(GLYPH_TO_DRAW);\n    }, false);\n\n    var ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);\n\n    ctx.fillStyle = '#AAA';\n    ctx.font = '12px \"Open Sans\"';\n    ctx.fillText(char, 5, canvas.offsetHeight - 5);\n    var glyph = FONT.charToGlyph(char);\n    if (glyph.xMin == undefined) return -2;\n    var glyphWidth = glyph.advanceWidth * 0.05,\n        xmin = (w - glyphWidth) / 2,\n        xmax = (w + glyphWidth) / 2,\n        x0 = xmin;\n    maxHeight = F_HEAD.yMax - F_HEAD.yMin;\n    fontBaseline = h * F_HEAD.yMax / maxHeight - 8;\n    fontScale = Math.min(w / (F_HEAD.xMax - F_HEAD.xMin), h / maxHeight);\n    fontSize = fontScale * FONT.unitsPerEm * 0.6;\n    ctx.fillStyle = '#FFFFFF';\n\n    // var path = glyph.getPath(x0, fontBaseline, fontSize);\n    var temppath = glyph.getPath(x0, fontBaseline, fontSize);\n    // console.log(path);\n    // for(i in path.commands){\n    //     var temp = path.commands[i];\n    //     console.log(temp.type,temp.x,temp.y);\n    // }\n    temppath.fill = \"#666\";\n    // console.log('drawing glyph'+char);\n    draw(ctx, temppath);\n}\n\nfunction draw(ctx, path) {\n    var this$1 = path;\n\n    ctx.beginPath();\n    for (var i = 0; i < path.commands.length; i += 1) {\n        var cmd = this$1.commands[i];\n        if (cmd.type === 'M') {\n            ctx.moveTo(cmd.x, cmd.y);\n        } else if (cmd.type === 'L') {\n            ctx.lineTo(cmd.x, cmd.y);\n        } else if (cmd.type === 'C') {\n            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === 'Q') {\n            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === 'Z') {\n            ctx.closePath();\n        }\n    }\n\n    if (path.fill) {\n        ctx.fillStyle = path.fill;\n        ctx.fill();\n    }\n\n    if (path.stroke) {\n        ctx.strokeStyle = path.stroke;\n        ctx.lineWidth = path.strokeWidth;\n        ctx.stroke();\n    }\n};\n\n// var ctx = $_allCanvas[0].getContext('2d');\n// ctx.clearRect(0,0,85,85);\n// var glyph1 = FONT.charToGlyph('각');\n// var path1 = glyph1.getPath()\n\n// enableHighDPICanvas(canvas);\n\nfunction enableHighDPICanvas(canvas) {\n    if (typeof canvas === 'string') {\n        canvas = document.getElementById(canvas);\n    }\n    var pixelRatio = window.devicePixelRatio || 1;\n    if (pixelRatio === 1) return;\n    var oldWidth = canvas.width;\n    var oldHeight = canvas.height;\n    canvas.width = oldWidth * pixelRatio;\n    canvas.height = oldHeight * pixelRatio;\n    canvas.style.width = oldWidth + 'px';\n    canvas.style.height = oldHeight + 'px';\n    canvas.getContext('2d').scale(pixelRatio, pixelRatio);\n}\n\nfunction renderText(char) {\n    if (!FONT) return;\n    previewCtx.clearRect(0, 0, CANVAS.width, CANVAS.height);\n    FONT.draw(previewCtx, char, 0, 32, 150, {\n        kerning: true,\n        features: {\n            liga: true,\n            rlig: true\n        }\n    });\n}\n\n// document.getElementById('load-default').addEventListener('click', function(){\n//     loadFont(fontFileName);\n// });\n\n// function onReadFile(e) {\n//     // document.getElementById('font-name').innerHTML = '';\n//     var temp = e.target.files[0];\n//     var reader = new FileReader();\n//     reader.onload = function(e) {\n//         try {\n//             console.log('try');\n//             var font = opentype.parse(e.target.result);\n//             onFontLoaded(font);\n//             // showErrorMessage('');\n//         } catch (err) {\n//             console.log('catch');\n//             // showErrorMessage(err.toString());\n//             if (err.stack) console.log(err.stack);\n//         throw(err);\n//         console.log('throw');\n//         }\n//     };\n//     reader.onerror = function(err) {\n//         showErrorMessage(err.toString());\n//     };\n//     reader.readAsArrayBuffer(temp);\n// }\n\n// function onFontLoaded(font) {\n//     window.font = font;\n//     // renderText();\n//     // displayFontData();\n// }\n\n// var fileButton = document.getElementById('file');\n// fileButton.addEventListener('change', onReadFile, false);\n\n//index selection toggle\n// var indexButtons = document.querySelectorAll('.index-button')\n// indexButtons.addEventListener('mousedown', ()=>{\n//     console.log('clicked');\n//     this.classList.add('index-selected');\n// }, false);\n// document.querySelectorAll('.index-selected').addEventListener('click', ()=>{\n//     console.log('clicked');\n//     this.classList.remove('index-selected');\n// }, false);\n//add Listeners to Left menu tabs\n\n\n// glyphTAB.onclick = function(){\n//     console.log('glyphTAB clicked');\n// }\n// glyphTAB.addEventListener(\"click\", )\n\n//# sourceURL=webpack:///./src/drawfont.js?");

/***/ }),

/***/ "./src/lib/opentype.js":
/*!*****************************!*\
  !*** ./src/lib/opentype.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(Buffer) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * https://opentype.js.org v0.7.3 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett\n */\n\n(function (global, factory) {\n    ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n})(undefined, function (exports) {\n    'use strict';\n\n    var TINF_OK = 0;\n    var TINF_DATA_ERROR = -3;\n\n    function Tree() {\n        this.table = new Uint16Array(16); /* table of code length counts */\n        this.trans = new Uint16Array(288); /* code -> symbol translation table */\n    }\n\n    function Data(source, dest) {\n        this.source = source;\n        this.sourceIndex = 0;\n        this.tag = 0;\n        this.bitcount = 0;\n\n        this.dest = dest;\n        this.destLen = 0;\n\n        this.ltree = new Tree(); /* dynamic length/symbol tree */\n        this.dtree = new Tree(); /* dynamic distance tree */\n    }\n\n    /* --------------------------------------------------- *\n     * -- uninitialized global data (static structures) -- *\n     * --------------------------------------------------- */\n\n    var sltree = new Tree();\n    var sdtree = new Tree();\n\n    /* extra bits and base tables for length codes */\n    var length_bits = new Uint8Array(30);\n    var length_base = new Uint16Array(30);\n\n    /* extra bits and base tables for distance codes */\n    var dist_bits = new Uint8Array(30);\n    var dist_base = new Uint16Array(30);\n\n    /* special ordering of code length codes */\n    var clcidx = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n\n    /* used by tinf_decode_trees, avoids allocations every call */\n    var code_tree = new Tree();\n    var lengths = new Uint8Array(288 + 32);\n\n    /* ----------------------- *\n     * -- utility functions -- *\n     * ----------------------- */\n\n    /* build extra bits and base tables */\n    function tinf_build_bits_base(bits, base, delta, first) {\n        var i, sum;\n\n        /* build bits table */\n        for (i = 0; i < delta; ++i) {\n            bits[i] = 0;\n        }\n        for (i = 0; i < 30 - delta; ++i) {\n            bits[i + delta] = i / delta | 0;\n        }\n\n        /* build base table */\n        for (sum = first, i = 0; i < 30; ++i) {\n            base[i] = sum;\n            sum += 1 << bits[i];\n        }\n    }\n\n    /* build the fixed huffman trees */\n    function tinf_build_fixed_trees(lt, dt) {\n        var i;\n\n        /* build fixed length tree */\n        for (i = 0; i < 7; ++i) {\n            lt.table[i] = 0;\n        }\n\n        lt.table[7] = 24;\n        lt.table[8] = 152;\n        lt.table[9] = 112;\n\n        for (i = 0; i < 24; ++i) {\n            lt.trans[i] = 256 + i;\n        }\n        for (i = 0; i < 144; ++i) {\n            lt.trans[24 + i] = i;\n        }\n        for (i = 0; i < 8; ++i) {\n            lt.trans[24 + 144 + i] = 280 + i;\n        }\n        for (i = 0; i < 112; ++i) {\n            lt.trans[24 + 144 + 8 + i] = 144 + i;\n        }\n\n        /* build fixed distance tree */\n        for (i = 0; i < 5; ++i) {\n            dt.table[i] = 0;\n        }\n\n        dt.table[5] = 32;\n\n        for (i = 0; i < 32; ++i) {\n            dt.trans[i] = i;\n        }\n    }\n\n    /* given an array of code lengths, build a tree */\n    var offs = new Uint16Array(16);\n\n    function tinf_build_tree(t, lengths, off, num) {\n        var i, sum;\n\n        /* clear code length count table */\n        for (i = 0; i < 16; ++i) {\n            t.table[i] = 0;\n        }\n\n        /* scan symbol lengths, and sum code length counts */\n        for (i = 0; i < num; ++i) {\n            t.table[lengths[off + i]]++;\n        }\n\n        t.table[0] = 0;\n\n        /* compute offset table for distribution sort */\n        for (sum = 0, i = 0; i < 16; ++i) {\n            offs[i] = sum;\n            sum += t.table[i];\n        }\n\n        /* create code->symbol translation table (symbols sorted by code) */\n        for (i = 0; i < num; ++i) {\n            if (lengths[off + i]) {\n                t.trans[offs[lengths[off + i]]++] = i;\n            }\n        }\n    }\n\n    /* ---------------------- *\n     * -- decode functions -- *\n     * ---------------------- */\n\n    /* get one bit from source stream */\n    function tinf_getbit(d) {\n        /* check if tag is empty */\n        if (!d.bitcount--) {\n            /* load next tag */\n            d.tag = d.source[d.sourceIndex++];\n            d.bitcount = 7;\n        }\n\n        /* shift bit out of tag */\n        var bit = d.tag & 1;\n        d.tag >>>= 1;\n\n        return bit;\n    }\n\n    /* read a num bit value from a stream and add base */\n    function tinf_read_bits(d, num, base) {\n        if (!num) {\n            return base;\n        }\n\n        while (d.bitcount < 24) {\n            d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n            d.bitcount += 8;\n        }\n\n        var val = d.tag & 0xffff >>> 16 - num;\n        d.tag >>>= num;\n        d.bitcount -= num;\n        return val + base;\n    }\n\n    /* given a data stream and a tree, decode a symbol */\n    function tinf_decode_symbol(d, t) {\n        while (d.bitcount < 24) {\n            d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n            d.bitcount += 8;\n        }\n\n        var sum = 0,\n            cur = 0,\n            len = 0;\n        var tag = d.tag;\n\n        /* get more bits while code value is above sum */\n        do {\n            cur = 2 * cur + (tag & 1);\n            tag >>>= 1;\n            ++len;\n\n            sum += t.table[len];\n            cur -= t.table[len];\n        } while (cur >= 0);\n\n        d.tag = tag;\n        d.bitcount -= len;\n\n        return t.trans[sum + cur];\n    }\n\n    /* given a data stream, decode dynamic trees from it */\n    function tinf_decode_trees(d, lt, dt) {\n        var hlit, hdist, hclen;\n        var i, num, length;\n\n        /* get 5 bits HLIT (257-286) */\n        hlit = tinf_read_bits(d, 5, 257);\n\n        /* get 5 bits HDIST (1-32) */\n        hdist = tinf_read_bits(d, 5, 1);\n\n        /* get 4 bits HCLEN (4-19) */\n        hclen = tinf_read_bits(d, 4, 4);\n\n        for (i = 0; i < 19; ++i) {\n            lengths[i] = 0;\n        }\n\n        /* read code lengths for code length alphabet */\n        for (i = 0; i < hclen; ++i) {\n            /* get 3 bits code length (0-7) */\n            var clen = tinf_read_bits(d, 3, 0);\n            lengths[clcidx[i]] = clen;\n        }\n\n        /* build code length tree */\n        tinf_build_tree(code_tree, lengths, 0, 19);\n\n        /* decode code lengths for the dynamic trees */\n        for (num = 0; num < hlit + hdist;) {\n            var sym = tinf_decode_symbol(d, code_tree);\n\n            switch (sym) {\n                case 16:\n                    /* copy previous code length 3-6 times (read 2 bits) */\n                    var prev = lengths[num - 1];\n                    for (length = tinf_read_bits(d, 2, 3); length; --length) {\n                        lengths[num++] = prev;\n                    }\n                    break;\n                case 17:\n                    /* repeat code length 0 for 3-10 times (read 3 bits) */\n                    for (length = tinf_read_bits(d, 3, 3); length; --length) {\n                        lengths[num++] = 0;\n                    }\n                    break;\n                case 18:\n                    /* repeat code length 0 for 11-138 times (read 7 bits) */\n                    for (length = tinf_read_bits(d, 7, 11); length; --length) {\n                        lengths[num++] = 0;\n                    }\n                    break;\n                default:\n                    /* values 0-15 represent the actual code lengths */\n                    lengths[num++] = sym;\n                    break;\n            }\n        }\n\n        /* build dynamic trees */\n        tinf_build_tree(lt, lengths, 0, hlit);\n        tinf_build_tree(dt, lengths, hlit, hdist);\n    }\n\n    /* ----------------------------- *\n     * -- block inflate functions -- *\n     * ----------------------------- */\n\n    /* given a stream and two trees, inflate a block of data */\n    function tinf_inflate_block_data(d, lt, dt) {\n        while (1) {\n            var sym = tinf_decode_symbol(d, lt);\n\n            /* check for end of block */\n            if (sym === 256) {\n                return TINF_OK;\n            }\n\n            if (sym < 256) {\n                d.dest[d.destLen++] = sym;\n            } else {\n                var length, dist, offs;\n                var i;\n\n                sym -= 257;\n\n                /* possibly get more bits from length code */\n                length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n                dist = tinf_decode_symbol(d, dt);\n\n                /* possibly get more bits from distance code */\n                offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n                /* copy match */\n                for (i = offs; i < offs + length; ++i) {\n                    d.dest[d.destLen++] = d.dest[i];\n                }\n            }\n        }\n    }\n\n    /* inflate an uncompressed block of data */\n    function tinf_inflate_uncompressed_block(d) {\n        var length, invlength;\n        var i;\n\n        /* unread from bitbuffer */\n        while (d.bitcount > 8) {\n            d.sourceIndex--;\n            d.bitcount -= 8;\n        }\n\n        /* get length */\n        length = d.source[d.sourceIndex + 1];\n        length = 256 * length + d.source[d.sourceIndex];\n\n        /* get one's complement of length */\n        invlength = d.source[d.sourceIndex + 3];\n        invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n        /* check length */\n        if (length !== (~invlength & 0x0000ffff)) {\n            return TINF_DATA_ERROR;\n        }\n\n        d.sourceIndex += 4;\n\n        /* copy block */\n        for (i = length; i; --i) {\n            d.dest[d.destLen++] = d.source[d.sourceIndex++];\n        }\n\n        /* make sure we start next block on a byte boundary */\n        d.bitcount = 0;\n\n        return TINF_OK;\n    }\n\n    /* inflate stream from source to dest */\n    function tinf_uncompress(source, dest) {\n        var d = new Data(source, dest);\n        var bfinal, btype, res;\n\n        do {\n            /* read final block flag */\n            bfinal = tinf_getbit(d);\n\n            /* read block type (2 bits) */\n            btype = tinf_read_bits(d, 2, 0);\n\n            /* decompress block */\n            switch (btype) {\n                case 0:\n                    /* decompress uncompressed block */\n                    res = tinf_inflate_uncompressed_block(d);\n                    break;\n                case 1:\n                    /* decompress block with fixed huffman trees */\n                    res = tinf_inflate_block_data(d, sltree, sdtree);\n                    break;\n                case 2:\n                    /* decompress block with dynamic huffman trees */\n                    tinf_decode_trees(d, d.ltree, d.dtree);\n                    res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n                    break;\n                default:\n                    res = TINF_DATA_ERROR;\n            }\n\n            if (res !== TINF_OK) {\n                throw new Error('Data error');\n            }\n        } while (!bfinal);\n\n        if (d.destLen < d.dest.length) {\n            if (typeof d.dest.slice === 'function') {\n                return d.dest.slice(0, d.destLen);\n            } else {\n                return d.dest.subarray(0, d.destLen);\n            }\n        }\n\n        return d.dest;\n    }\n\n    /* -------------------- *\n     * -- initialization -- *\n     * -------------------- */\n\n    /* build fixed huffman trees */\n    tinf_build_fixed_trees(sltree, sdtree);\n\n    /* build extra bits and base tables */\n    tinf_build_bits_base(length_bits, length_base, 4, 3);\n    tinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n    /* fix a special case */\n    length_bits[28] = 0;\n    length_base[28] = 258;\n\n    var index = tinf_uncompress;\n\n    // The Bounding Box object\n\n    function derive(v0, v1, v2, v3, t) {\n        return Math.pow(1 - t, 3) * v0 + 3 * Math.pow(1 - t, 2) * t * v1 + 3 * (1 - t) * Math.pow(t, 2) * v2 + Math.pow(t, 3) * v3;\n    }\n    /**\n     * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.\n     * It is used to calculate the bounding box of a glyph or text path.\n     *\n     * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.\n     *\n     * @exports opentype.BoundingBox\n     * @class\n     * @constructor\n     */\n    function BoundingBox() {\n        this.x1 = Number.NaN;\n        this.y1 = Number.NaN;\n        this.x2 = Number.NaN;\n        this.y2 = Number.NaN;\n    }\n\n    /**\n     * Returns true if the bounding box is empty, that is, no points have been added to the box yet.\n     */\n    BoundingBox.prototype.isEmpty = function () {\n        return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n    };\n\n    /**\n     * Add the point to the bounding box.\n     * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.\n     * @param {number} x - The X coordinate of the point.\n     * @param {number} y - The Y coordinate of the point.\n     */\n    BoundingBox.prototype.addPoint = function (x, y) {\n        if (typeof x === 'number') {\n            if (isNaN(this.x1) || isNaN(this.x2)) {\n                this.x1 = x;\n                this.x2 = x;\n            }\n            if (x < this.x1) {\n                this.x1 = x;\n            }\n            if (x > this.x2) {\n                this.x2 = x;\n            }\n        }\n        if (typeof y === 'number') {\n            if (isNaN(this.y1) || isNaN(this.y2)) {\n                this.y1 = y;\n                this.y2 = y;\n            }\n            if (y < this.y1) {\n                this.y1 = y;\n            }\n            if (y > this.y2) {\n                this.y2 = y;\n            }\n        }\n    };\n\n    /**\n     * Add a X coordinate to the bounding box.\n     * This extends the bounding box to include the X coordinate.\n     * This function is used internally inside of addBezier.\n     * @param {number} x - The X coordinate of the point.\n     */\n    BoundingBox.prototype.addX = function (x) {\n        this.addPoint(x, null);\n    };\n\n    /**\n     * Add a Y coordinate to the bounding box.\n     * This extends the bounding box to include the Y coordinate.\n     * This function is used internally inside of addBezier.\n     * @param {number} y - The Y coordinate of the point.\n     */\n    BoundingBox.prototype.addY = function (y) {\n        this.addPoint(null, y);\n    };\n\n    /**\n     * Add a Bézier curve to the bounding box.\n     * This extends the bounding box to include the entire Bézier.\n     * @param {number} x0 - The starting X coordinate.\n     * @param {number} y0 - The starting Y coordinate.\n     * @param {number} x1 - The X coordinate of the first control point.\n     * @param {number} y1 - The Y coordinate of the first control point.\n     * @param {number} x2 - The X coordinate of the second control point.\n     * @param {number} y2 - The Y coordinate of the second control point.\n     * @param {number} x - The ending X coordinate.\n     * @param {number} y - The ending Y coordinate.\n     */\n    BoundingBox.prototype.addBezier = function (x0, y0, x1, y1, x2, y2, x, y) {\n        var this$1 = this;\n\n        // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html\n        // and https://github.com/icons8/svg-path-bounding-box\n\n        var p0 = [x0, y0];\n        var p1 = [x1, y1];\n        var p2 = [x2, y2];\n        var p3 = [x, y];\n\n        this.addPoint(x0, y0);\n        this.addPoint(x, y);\n\n        for (var i = 0; i <= 1; i++) {\n            var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n            var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n            var c = 3 * p1[i] - 3 * p0[i];\n\n            if (a === 0) {\n                if (b === 0) {\n                    continue;\n                }\n                var t = -c / b;\n                if (0 < t && t < 1) {\n                    if (i === 0) {\n                        this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t));\n                    }\n                    if (i === 1) {\n                        this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t));\n                    }\n                }\n                continue;\n            }\n\n            var b2ac = Math.pow(b, 2) - 4 * c * a;\n            if (b2ac < 0) {\n                continue;\n            }\n            var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                if (i === 0) {\n                    this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));\n                }\n                if (i === 1) {\n                    this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));\n                }\n            }\n            var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                if (i === 0) {\n                    this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));\n                }\n                if (i === 1) {\n                    this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));\n                }\n            }\n        }\n    };\n\n    /**\n     * Add a quadratic curve to the bounding box.\n     * This extends the bounding box to include the entire quadratic curve.\n     * @param {number} x0 - The starting X coordinate.\n     * @param {number} y0 - The starting Y coordinate.\n     * @param {number} x1 - The X coordinate of the control point.\n     * @param {number} y1 - The Y coordinate of the control point.\n     * @param {number} x - The ending X coordinate.\n     * @param {number} y - The ending Y coordinate.\n     */\n    BoundingBox.prototype.addQuad = function (x0, y0, x1, y1, x, y) {\n        var cp1x = x0 + 2 / 3 * (x1 - x0);\n        var cp1y = y0 + 2 / 3 * (y1 - y0);\n        var cp2x = cp1x + 1 / 3 * (x - x0);\n        var cp2y = cp1y + 1 / 3 * (y - y0);\n        this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);\n    };\n\n    // Geometric objects\n\n    /**\n     * A bézier path containing a set of path commands similar to a SVG path.\n     * Paths can be drawn on a context using `draw`.\n     * @exports opentype.Path\n     * @class\n     * @constructor\n     */\n    function Path() {\n        this.commands = [];\n        this.fill = 'black';\n        this.stroke = null;\n        this.strokeWidth = 1;\n    }\n\n    /**\n     * @param  {number} x\n     * @param  {number} y\n     */\n    Path.prototype.moveTo = function (x, y) {\n        this.commands.push({\n            type: 'M',\n            x: x,\n            y: y\n        });\n    };\n\n    /**\n     * @param  {number} x\n     * @param  {number} y\n     */\n    Path.prototype.lineTo = function (x, y) {\n        this.commands.push({\n            type: 'L',\n            x: x,\n            y: y\n        });\n    };\n\n    /**\n     * Draws cubic curve\n     * @function\n     * curveTo\n     * @memberof opentype.Path.prototype\n     * @param  {number} x1 - x of control 1\n     * @param  {number} y1 - y of control 1\n     * @param  {number} x2 - x of control 2\n     * @param  {number} y2 - y of control 2\n     * @param  {number} x - x of path point\n     * @param  {number} y - y of path point\n     */\n\n    /**\n     * Draws cubic curve\n     * @function\n     * bezierCurveTo\n     * @memberof opentype.Path.prototype\n     * @param  {number} x1 - x of control 1\n     * @param  {number} y1 - y of control 1\n     * @param  {number} x2 - x of control 2\n     * @param  {number} y2 - y of control 2\n     * @param  {number} x - x of path point\n     * @param  {number} y - y of path point\n     * @see curveTo\n     */\n    Path.prototype.curveTo = Path.prototype.bezierCurveTo = function (x1, y1, x2, y2, x, y) {\n        this.commands.push({\n            type: 'C',\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2,\n            x: x,\n            y: y\n        });\n    };\n\n    /**\n     * Draws quadratic curve\n     * @function\n     * quadraticCurveTo\n     * @memberof opentype.Path.prototype\n     * @param  {number} x1 - x of control\n     * @param  {number} y1 - y of control\n     * @param  {number} x - x of path point\n     * @param  {number} y - y of path point\n     */\n\n    /**\n     * Draws quadratic curve\n     * @function\n     * quadTo\n     * @memberof opentype.Path.prototype\n     * @param  {number} x1 - x of control\n     * @param  {number} y1 - y of control\n     * @param  {number} x - x of path point\n     * @param  {number} y - y of path point\n     */\n    Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function (x1, y1, x, y) {\n        this.commands.push({\n            type: 'Q',\n            x1: x1,\n            y1: y1,\n            x: x,\n            y: y\n        });\n    };\n\n    /**\n     * Closes the path\n     * @function closePath\n     * @memberof opentype.Path.prototype\n     */\n\n    /**\n     * Close the path\n     * @function close\n     * @memberof opentype.Path.prototype\n     */\n    Path.prototype.close = Path.prototype.closePath = function () {\n        this.commands.push({\n            type: 'Z'\n        });\n    };\n\n    /**\n     * Add the given path or list of commands to the commands of this path.\n     * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.\n     */\n    Path.prototype.extend = function (pathOrCommands) {\n        if (pathOrCommands.commands) {\n            pathOrCommands = pathOrCommands.commands;\n        } else if (pathOrCommands instanceof BoundingBox) {\n            var box = pathOrCommands;\n            this.moveTo(box.x1, box.y1);\n            this.lineTo(box.x2, box.y1);\n            this.lineTo(box.x2, box.y2);\n            this.lineTo(box.x1, box.y2);\n            this.close();\n            return;\n        }\n\n        Array.prototype.push.apply(this.commands, pathOrCommands);\n    };\n\n    /**\n     * Calculate the bounding box of the path.\n     * @returns {opentype.BoundingBox}\n     */\n    Path.prototype.getBoundingBox = function () {\n        var this$1 = this;\n\n        var box = new BoundingBox();\n\n        var startX = 0;\n        var startY = 0;\n        var prevX = 0;\n        var prevY = 0;\n        for (var i = 0; i < this.commands.length; i++) {\n            var cmd = this$1.commands[i];\n            switch (cmd.type) {\n                case 'M':\n                    box.addPoint(cmd.x, cmd.y);\n                    startX = prevX = cmd.x;\n                    startY = prevY = cmd.y;\n                    break;\n                case 'L':\n                    box.addPoint(cmd.x, cmd.y);\n                    prevX = cmd.x;\n                    prevY = cmd.y;\n                    break;\n                case 'Q':\n                    box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);\n                    prevX = cmd.x;\n                    prevY = cmd.y;\n                    break;\n                case 'C':\n                    box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n                    prevX = cmd.x;\n                    prevY = cmd.y;\n                    break;\n                case 'Z':\n                    prevX = startX;\n                    prevY = startY;\n                    break;\n                default:\n                    throw new Error('Unexpected path command ' + cmd.type);\n            }\n        }\n        if (box.isEmpty()) {\n            box.addPoint(0, 0);\n        }\n        return box;\n    };\n\n    /**\n     * Draw the path to a 2D context.\n     * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.\n     */\n    Path.prototype.draw = function (ctx) {\n        var this$1 = this;\n\n        ctx.beginPath();\n        for (var i = 0; i < this.commands.length; i += 1) {\n            var cmd = this$1.commands[i];\n            if (cmd.type === 'M') {\n                ctx.moveTo(cmd.x, cmd.y);\n            } else if (cmd.type === 'L') {\n                ctx.lineTo(cmd.x, cmd.y);\n            } else if (cmd.type === 'C') {\n                ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n            } else if (cmd.type === 'Q') {\n                ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n            } else if (cmd.type === 'Z') {\n                ctx.closePath();\n            }\n        }\n\n        if (this.fill) {\n            ctx.fillStyle = this.fill;\n            ctx.fill();\n        }\n\n        if (this.stroke) {\n            ctx.strokeStyle = this.stroke;\n            ctx.lineWidth = this.strokeWidth;\n            ctx.stroke();\n        }\n    };\n\n    /**\n     * Convert the Path to a string of path data instructions\n     * See http://www.w3.org/TR/SVG/paths.html#PathData\n     * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n     * @return {string}\n     */\n    Path.prototype.toPathData = function (decimalPlaces) {\n        var this$1 = this;\n\n        decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\n        function floatToString(v) {\n            if (Math.round(v) === v) {\n                return '' + Math.round(v);\n            } else {\n                return v.toFixed(decimalPlaces);\n            }\n        }\n\n        function packValues() {\n            var arguments$1 = arguments;\n\n            var s = '';\n            for (var i = 0; i < arguments.length; i += 1) {\n                var v = arguments$1[i];\n                if (v >= 0 && i > 0) {\n                    s += ' ';\n                }\n\n                s += floatToString(v);\n            }\n\n            return s;\n        }\n\n        var d = '';\n        for (var i = 0; i < this.commands.length; i += 1) {\n            var cmd = this$1.commands[i];\n            if (cmd.type === 'M') {\n                d += 'M' + packValues(cmd.x, cmd.y);\n            } else if (cmd.type === 'L') {\n                d += 'L' + packValues(cmd.x, cmd.y);\n            } else if (cmd.type === 'C') {\n                d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n            } else if (cmd.type === 'Q') {\n                d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n            } else if (cmd.type === 'Z') {\n                d += 'Z';\n            }\n        }\n\n        return d;\n    };\n\n    /**\n     * Convert the path to an SVG <path> element, as a string.\n     * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n     * @return {string}\n     */\n    Path.prototype.toSVG = function (decimalPlaces) {\n        var svg = '<path d=\"';\n        svg += this.toPathData(decimalPlaces);\n        svg += '\"';\n        if (this.fill && this.fill !== 'black') {\n            if (this.fill === null) {\n                svg += ' fill=\"none\"';\n            } else {\n                svg += ' fill=\"' + this.fill + '\"';\n            }\n        }\n\n        if (this.stroke) {\n            svg += ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"';\n        }\n\n        svg += '/>';\n        return svg;\n    };\n\n    /**\n     * Convert the path to a DOM element.\n     * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n     * @return {SVGPathElement}\n     */\n    Path.prototype.toDOMElement = function (decimalPlaces) {\n        var temporaryPath = this.toPathData(decimalPlaces);\n        var newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n        newPath.setAttribute('d', temporaryPath);\n\n        return newPath;\n    };\n\n    // Run-time checking of preconditions.\n\n    function fail(message) {\n        throw new Error(message);\n    }\n\n    // Precondition function that checks if the given predicate is true.\n    // If not, it will throw an error.\n    function argument(predicate, message) {\n        if (!predicate) {\n            fail(message);\n        }\n    }\n\n    var check = { fail: fail, argument: argument, assert: argument };\n\n    // Data types used in the OpenType font file.\n    // All OpenType fonts use Motorola-style byte ordering (Big Endian)\n\n    var LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15\n    var LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31\n\n    /**\n     * @exports opentype.decode\n     * @class\n     */\n    var decode = {};\n    /**\n     * @exports opentype.encode\n     * @class\n     */\n    var encode = {};\n    /**\n     * @exports opentype.sizeOf\n     * @class\n     */\n    var sizeOf = {};\n\n    // Return a function that always returns the same value.\n    function constant(v) {\n        return function () {\n            return v;\n        };\n    }\n\n    // OpenType data types //////////////////////////////////////////////////////\n\n    /**\n     * Convert an 8-bit unsigned integer to a list of 1 byte.\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.BYTE = function (v) {\n        check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');\n        return [v];\n    };\n    /**\n     * @constant\n     * @type {number}\n     */\n    sizeOf.BYTE = constant(1);\n\n    /**\n     * Convert a 8-bit signed integer to a list of 1 byte.\n     * @param {string}\n     * @returns {Array}\n     */\n    encode.CHAR = function (v) {\n        return [v.charCodeAt(0)];\n    };\n\n    /**\n     * @constant\n     * @type {number}\n     */\n    sizeOf.CHAR = constant(1);\n\n    /**\n     * Convert an ASCII string to a list of bytes.\n     * @param {string}\n     * @returns {Array}\n     */\n    encode.CHARARRAY = function (v) {\n        var b = [];\n        for (var i = 0; i < v.length; i += 1) {\n            b[i] = v.charCodeAt(i);\n        }\n\n        return b;\n    };\n\n    /**\n     * @param {Array}\n     * @returns {number}\n     */\n    sizeOf.CHARARRAY = function (v) {\n        return v.length;\n    };\n\n    /**\n     * Convert a 16-bit unsigned integer to a list of 2 bytes.\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.USHORT = function (v) {\n        return [v >> 8 & 0xFF, v & 0xFF];\n    };\n\n    /**\n     * @constant\n     * @type {number}\n     */\n    sizeOf.USHORT = constant(2);\n\n    /**\n     * Convert a 16-bit signed integer to a list of 2 bytes.\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.SHORT = function (v) {\n        // Two's complement\n        if (v >= LIMIT16) {\n            v = -(2 * LIMIT16 - v);\n        }\n\n        return [v >> 8 & 0xFF, v & 0xFF];\n    };\n\n    /**\n     * @constant\n     * @type {number}\n     */\n    sizeOf.SHORT = constant(2);\n\n    /**\n     * Convert a 24-bit unsigned integer to a list of 3 bytes.\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.UINT24 = function (v) {\n        return [v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];\n    };\n\n    /**\n     * @constant\n     * @type {number}\n     */\n    sizeOf.UINT24 = constant(3);\n\n    /**\n     * Convert a 32-bit unsigned integer to a list of 4 bytes.\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.ULONG = function (v) {\n        return [v >> 24 & 0xFF, v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];\n    };\n\n    /**\n     * @constant\n     * @type {number}\n     */\n    sizeOf.ULONG = constant(4);\n\n    /**\n     * Convert a 32-bit unsigned integer to a list of 4 bytes.\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.LONG = function (v) {\n        // Two's complement\n        if (v >= LIMIT32) {\n            v = -(2 * LIMIT32 - v);\n        }\n\n        return [v >> 24 & 0xFF, v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];\n    };\n\n    /**\n     * @constant\n     * @type {number}\n     */\n    sizeOf.LONG = constant(4);\n\n    encode.FIXED = encode.ULONG;\n    sizeOf.FIXED = sizeOf.ULONG;\n\n    encode.FWORD = encode.SHORT;\n    sizeOf.FWORD = sizeOf.SHORT;\n\n    encode.UFWORD = encode.USHORT;\n    sizeOf.UFWORD = sizeOf.USHORT;\n\n    /**\n     * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.LONGDATETIME = function (v) {\n        return [0, 0, 0, 0, v >> 24 & 0xFF, v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];\n    };\n\n    /**\n     * @constant\n     * @type {number}\n     */\n    sizeOf.LONGDATETIME = constant(8);\n\n    /**\n     * Convert a 4-char tag to a list of 4 bytes.\n     * @param {string}\n     * @returns {Array}\n     */\n    encode.TAG = function (v) {\n        check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');\n        return [v.charCodeAt(0), v.charCodeAt(1), v.charCodeAt(2), v.charCodeAt(3)];\n    };\n\n    /**\n     * @constant\n     * @type {number}\n     */\n    sizeOf.TAG = constant(4);\n\n    // CFF data types ///////////////////////////////////////////////////////////\n\n    encode.Card8 = encode.BYTE;\n    sizeOf.Card8 = sizeOf.BYTE;\n\n    encode.Card16 = encode.USHORT;\n    sizeOf.Card16 = sizeOf.USHORT;\n\n    encode.OffSize = encode.BYTE;\n    sizeOf.OffSize = sizeOf.BYTE;\n\n    encode.SID = encode.USHORT;\n    sizeOf.SID = sizeOf.USHORT;\n\n    // Convert a numeric operand or charstring number to a variable-size list of bytes.\n    /**\n     * Convert a numeric operand or charstring number to a variable-size list of bytes.\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.NUMBER = function (v) {\n        if (v >= -107 && v <= 107) {\n            return [v + 139];\n        } else if (v >= 108 && v <= 1131) {\n            v = v - 108;\n            return [(v >> 8) + 247, v & 0xFF];\n        } else if (v >= -1131 && v <= -108) {\n            v = -v - 108;\n            return [(v >> 8) + 251, v & 0xFF];\n        } else if (v >= -32768 && v <= 32767) {\n            return encode.NUMBER16(v);\n        } else {\n            return encode.NUMBER32(v);\n        }\n    };\n\n    /**\n     * @param {number}\n     * @returns {number}\n     */\n    sizeOf.NUMBER = function (v) {\n        return encode.NUMBER(v).length;\n    };\n\n    /**\n     * Convert a signed number between -32768 and +32767 to a three-byte value.\n     * This ensures we always use three bytes, but is not the most compact format.\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.NUMBER16 = function (v) {\n        return [28, v >> 8 & 0xFF, v & 0xFF];\n    };\n\n    /**\n     * @constant\n     * @type {number}\n     */\n    sizeOf.NUMBER16 = constant(3);\n\n    /**\n     * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.\n     * This is useful if you want to be sure you always use four bytes,\n     * at the expense of wasting a few bytes for smaller numbers.\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.NUMBER32 = function (v) {\n        return [29, v >> 24 & 0xFF, v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];\n    };\n\n    /**\n     * @constant\n     * @type {number}\n     */\n    sizeOf.NUMBER32 = constant(5);\n\n    /**\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.REAL = function (v) {\n        var value = v.toString();\n\n        // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)\n        // This code converts it back to a number without the epsilon.\n        var m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n        if (m) {\n            var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));\n            value = (Math.round(v * epsilon) / epsilon).toString();\n        }\n\n        var nibbles = '';\n        for (var i = 0, ii = value.length; i < ii; i += 1) {\n            var c = value[i];\n            if (c === 'e') {\n                nibbles += value[++i] === '-' ? 'c' : 'b';\n            } else if (c === '.') {\n                nibbles += 'a';\n            } else if (c === '-') {\n                nibbles += 'e';\n            } else {\n                nibbles += c;\n            }\n        }\n\n        nibbles += nibbles.length & 1 ? 'f' : 'ff';\n        var out = [30];\n        for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {\n            out.push(parseInt(nibbles.substr(i$1, 2), 16));\n        }\n\n        return out;\n    };\n\n    /**\n     * @param {number}\n     * @returns {number}\n     */\n    sizeOf.REAL = function (v) {\n        return encode.REAL(v).length;\n    };\n\n    encode.NAME = encode.CHARARRAY;\n    sizeOf.NAME = sizeOf.CHARARRAY;\n\n    encode.STRING = encode.CHARARRAY;\n    sizeOf.STRING = sizeOf.CHARARRAY;\n\n    /**\n     * @param {DataView} data\n     * @param {number} offset\n     * @param {number} numBytes\n     * @returns {string}\n     */\n    decode.UTF8 = function (data, offset, numBytes) {\n        var codePoints = [];\n        var numChars = numBytes;\n        for (var j = 0; j < numChars; j++, offset += 1) {\n            codePoints[j] = data.getUint8(offset);\n        }\n\n        return String.fromCharCode.apply(null, codePoints);\n    };\n\n    /**\n     * @param {DataView} data\n     * @param {number} offset\n     * @param {number} numBytes\n     * @returns {string}\n     */\n    decode.UTF16 = function (data, offset, numBytes) {\n        var codePoints = [];\n        var numChars = numBytes / 2;\n        for (var j = 0; j < numChars; j++, offset += 2) {\n            codePoints[j] = data.getUint16(offset);\n        }\n\n        return String.fromCharCode.apply(null, codePoints);\n    };\n\n    /**\n     * Convert a JavaScript string to UTF16-BE.\n     * @param {string}\n     * @returns {Array}\n     */\n    encode.UTF16 = function (v) {\n        var b = [];\n        for (var i = 0; i < v.length; i += 1) {\n            var codepoint = v.charCodeAt(i);\n            b[b.length] = codepoint >> 8 & 0xFF;\n            b[b.length] = codepoint & 0xFF;\n        }\n\n        return b;\n    };\n\n    /**\n     * @param {string}\n     * @returns {number}\n     */\n    sizeOf.UTF16 = function (v) {\n        return v.length * 2;\n    };\n\n    // Data for converting old eight-bit Macintosh encodings to Unicode.\n    // This representation is optimized for decoding; encoding is slower\n    // and needs more memory. The assumption is that all opentype.js users\n    // want to open fonts, but saving a font will be comparatively rare\n    // so it can be more expensive. Keyed by IANA character set name.\n    //\n    // Python script for generating these strings:\n    //\n    //     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])\n    //     print(s.encode('utf-8'))\n    /**\n     * @private\n     */\n    var eightBitMacEncodings = {\n        'x-mac-croatian': // Python: 'mac_croatian'\n        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' + '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n        'x-mac-cyrillic': // Python: 'mac_cyrillic'\n        'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' + 'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',\n        'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT\n        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' + 'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n        'x-mac-greek': // Python: 'mac_greek'\n        'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' + '\\u03AC\\u039D\\xAC\\u039F\\u03A1\\u2248\\u03A4\\xAB\\xBB\\u2026\\xA0\\u03A5\\u03A7\\u0386\\u0388\\u0153\\u2013\\u2015\\u201C\\u201D\\u2018\\u2019\\xF7\\u0389\\u038A\\u038C\\u038E\\u03AD\\u03AE\\u03AF\\u03CC\\u038F\\u03CD\\u03B1\\u03B2\\u03C8\\u03B4\\u03B5\\u03C6\\u03B3\\u03B7\\u03B9\\u03BE\\u03BA\\u03BB\\u03BC\\u03BD\\u03BF\\u03C0\\u03CE\\u03C1\\u03C3\\u03C4\\u03B8\\u03C9\\u03C2\\u03C7\\u03C5\\u03B6\\u03CA\\u03CB\\u0390\\u03B0\\xAD',\n        'x-mac-icelandic': // Python: 'mac_iceland'\n        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n        'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT\n        'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' + 'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n        'x-mac-ce': // Python: 'mac_latin2'\n        'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' + 'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n        macintosh: // Python: 'mac_roman'\n        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n        'x-mac-romanian': // Python: 'mac_romanian'\n        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n        'x-mac-turkish': // Python: 'mac_turkish'\n        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n    };\n\n    /**\n     * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\n     * string, or 'undefined' if the encoding is unsupported. For example, we do\n     * not support Chinese, Japanese or Korean because these would need large\n     * mapping tables.\n     * @param {DataView} dataView\n     * @param {number} offset\n     * @param {number} dataLength\n     * @param {string} encoding\n     * @returns {string}\n     */\n    decode.MACSTRING = function (dataView, offset, dataLength, encoding) {\n        var table = eightBitMacEncodings[encoding];\n        if (table === undefined) {\n            return undefined;\n        }\n\n        var result = '';\n        for (var i = 0; i < dataLength; i++) {\n            var c = dataView.getUint8(offset + i);\n            // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n            // mapped to U+0000..U+007F; we only need to look up the others.\n            if (c <= 0x7F) {\n                result += String.fromCharCode(c);\n            } else {\n                result += table[c & 0x7F];\n            }\n        }\n\n        return result;\n    };\n\n    // Helper function for encode.MACSTRING. Returns a dictionary for mapping\n    // Unicode character codes to their 8-bit MacOS equivalent. This table\n    // is not exactly a super cheap data structure, but we do not care because\n    // encoding Macintosh strings is only rarely needed in typical applications.\n    var macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();\n    var macEncodingCacheKeys;\n    var getMacEncodingTable = function getMacEncodingTable(encoding) {\n        // Since we use encoding as a cache key for WeakMap, it has to be\n        // a String object and not a literal. And at least on NodeJS 2.10.1,\n        // WeakMap requires that the same String instance is passed for cache hits.\n        if (!macEncodingCacheKeys) {\n            macEncodingCacheKeys = {};\n            for (var e in eightBitMacEncodings) {\n                /*jshint -W053 */ // Suppress \"Do not use String as a constructor.\"\n                macEncodingCacheKeys[e] = new String(e);\n            }\n        }\n\n        var cacheKey = macEncodingCacheKeys[encoding];\n        if (cacheKey === undefined) {\n            return undefined;\n        }\n\n        // We can't do \"if (cache.has(key)) {return cache.get(key)}\" here:\n        // since garbage collection may run at any time, it could also kick in\n        // between the calls to cache.has() and cache.get(). In that case,\n        // we would return 'undefined' even though we do support the encoding.\n        if (macEncodingTableCache) {\n            var cachedTable = macEncodingTableCache.get(cacheKey);\n            if (cachedTable !== undefined) {\n                return cachedTable;\n            }\n        }\n\n        var decodingTable = eightBitMacEncodings[encoding];\n        if (decodingTable === undefined) {\n            return undefined;\n        }\n\n        var encodingTable = {};\n        for (var i = 0; i < decodingTable.length; i++) {\n            encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;\n        }\n\n        if (macEncodingTableCache) {\n            macEncodingTableCache.set(cacheKey, encodingTable);\n        }\n\n        return encodingTable;\n    };\n\n    /**\n     * Encodes an old-style Macintosh string. Returns a byte array upon success.\n     * If the requested encoding is unsupported, or if the input string contains\n     * a character that cannot be expressed in the encoding, the function returns\n     * 'undefined'.\n     * @param {string} str\n     * @param {string} encoding\n     * @returns {Array}\n     */\n    encode.MACSTRING = function (str, encoding) {\n        var table = getMacEncodingTable(encoding);\n        if (table === undefined) {\n            return undefined;\n        }\n\n        var result = [];\n        for (var i = 0; i < str.length; i++) {\n            var c = str.charCodeAt(i);\n\n            // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n            // mapped to U+0000..U+007F; we only need to look up the others.\n            if (c >= 0x80) {\n                c = table[c];\n                if (c === undefined) {\n                    // str contains a Unicode character that cannot be encoded\n                    // in the requested encoding.\n                    return undefined;\n                }\n            }\n            result[i] = c;\n            // result.push(c);\n        }\n\n        return result;\n    };\n\n    /**\n     * @param {string} str\n     * @param {string} encoding\n     * @returns {number}\n     */\n    sizeOf.MACSTRING = function (str, encoding) {\n        var b = encode.MACSTRING(str, encoding);\n        if (b !== undefined) {\n            return b.length;\n        } else {\n            return 0;\n        }\n    };\n\n    // Helper for encode.VARDELTAS\n    function isByteEncodable(value) {\n        return value >= -128 && value <= 127;\n    }\n\n    // Helper for encode.VARDELTAS\n    function encodeVarDeltaRunAsZeroes(deltas, pos, result) {\n        var runLength = 0;\n        var numDeltas = deltas.length;\n        while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {\n            ++pos;\n            ++runLength;\n        }\n        result.push(0x80 | runLength - 1);\n        return pos;\n    }\n\n    // Helper for encode.VARDELTAS\n    function encodeVarDeltaRunAsBytes(deltas, offset, result) {\n        var runLength = 0;\n        var numDeltas = deltas.length;\n        var pos = offset;\n        while (pos < numDeltas && runLength < 64) {\n            var value = deltas[pos];\n            if (!isByteEncodable(value)) {\n                break;\n            }\n\n            // Within a byte-encoded run of deltas, a single zero is best\n            // stored literally as 0x00 value. However, if we have two or\n            // more zeroes in a sequence, it is better to start a new run.\n            // Fore example, the sequence of deltas [15, 15, 0, 15, 15]\n            // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero\n            // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)\n            // when starting a new run.\n            if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {\n                break;\n            }\n\n            ++pos;\n            ++runLength;\n        }\n        result.push(runLength - 1);\n        for (var i = offset; i < pos; ++i) {\n            result.push(deltas[i] + 256 & 0xff);\n        }\n        return pos;\n    }\n\n    // Helper for encode.VARDELTAS\n    function encodeVarDeltaRunAsWords(deltas, offset, result) {\n        var runLength = 0;\n        var numDeltas = deltas.length;\n        var pos = offset;\n        while (pos < numDeltas && runLength < 64) {\n            var value = deltas[pos];\n\n            // Within a word-encoded run of deltas, it is easiest to start\n            // a new run (with a different encoding) whenever we encounter\n            // a zero value. For example, the sequence [0x6666, 0, 0x7777]\n            // needs 7 bytes when storing the zero inside the current run\n            // (42 66 66 00 00 77 77), and equally 7 bytes when starting a\n            // new run (40 66 66 80 40 77 77).\n            if (value === 0) {\n                break;\n            }\n\n            // Within a word-encoded run of deltas, a single value in the\n            // range (-128..127) should be encoded within the current run\n            // because it is more compact. For example, the sequence\n            // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value\n            // literally (42 66 66 00 02 77 77), but 8 bytes when starting\n            // a new run (40 66 66 00 02 40 77 77).\n            if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {\n                break;\n            }\n\n            ++pos;\n            ++runLength;\n        }\n        result.push(0x40 | runLength - 1);\n        for (var i = offset; i < pos; ++i) {\n            var val = deltas[i];\n            result.push(val + 0x10000 >> 8 & 0xff, val + 0x100 & 0xff);\n        }\n        return pos;\n    }\n\n    /**\n     * Encode a list of variation adjustment deltas.\n     *\n     * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.\n     * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted\n     * when generating instances of variation fonts.\n     *\n     * @see https://www.microsoft.com/typography/otspec/gvar.htm\n     * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html\n     * @param {Array}\n     * @return {Array}\n     */\n    encode.VARDELTAS = function (deltas) {\n        var pos = 0;\n        var result = [];\n        while (pos < deltas.length) {\n            var value = deltas[pos];\n            if (value === 0) {\n                pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);\n            } else if (value >= -128 && value <= 127) {\n                pos = encodeVarDeltaRunAsBytes(deltas, pos, result);\n            } else {\n                pos = encodeVarDeltaRunAsWords(deltas, pos, result);\n            }\n        }\n        return result;\n    };\n\n    // Convert a list of values to a CFF INDEX structure.\n    // The values should be objects containing name / type / value.\n    /**\n     * @param {Array} l\n     * @returns {Array}\n     */\n    encode.INDEX = function (l) {\n        //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,\n        //    i, v;\n        // Because we have to know which data type to use to encode the offsets,\n        // we have to go through the values twice: once to encode the data and\n        // calculate the offsets, then again to encode the offsets using the fitting data type.\n        var offset = 1; // First offset is always 1.\n        var offsets = [offset];\n        var data = [];\n        for (var i = 0; i < l.length; i += 1) {\n            var v = encode.OBJECT(l[i]);\n            Array.prototype.push.apply(data, v);\n            offset += v.length;\n            offsets.push(offset);\n        }\n\n        if (data.length === 0) {\n            return [0, 0];\n        }\n\n        var encodedOffsets = [];\n        var offSize = 1 + Math.floor(Math.log(offset) / Math.log(2)) / 8 | 0;\n        var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];\n        for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {\n            var encodedOffset = offsetEncoder(offsets[i$1]);\n            Array.prototype.push.apply(encodedOffsets, encodedOffset);\n        }\n\n        return Array.prototype.concat(encode.Card16(l.length), encode.OffSize(offSize), encodedOffsets, data);\n    };\n\n    /**\n     * @param {Array}\n     * @returns {number}\n     */\n    sizeOf.INDEX = function (v) {\n        return encode.INDEX(v).length;\n    };\n\n    /**\n     * Convert an object to a CFF DICT structure.\n     * The keys should be numeric.\n     * The values should be objects containing name / type / value.\n     * @param {Object} m\n     * @returns {Array}\n     */\n    encode.DICT = function (m) {\n        var d = [];\n        var keys = Object.keys(m);\n        var length = keys.length;\n\n        for (var i = 0; i < length; i += 1) {\n            // Object.keys() return string keys, but our keys are always numeric.\n            var k = parseInt(keys[i], 0);\n            var v = m[k];\n            // Value comes before the key.\n            d = d.concat(encode.OPERAND(v.value, v.type));\n            d = d.concat(encode.OPERATOR(k));\n        }\n\n        return d;\n    };\n\n    /**\n     * @param {Object}\n     * @returns {number}\n     */\n    sizeOf.DICT = function (m) {\n        return encode.DICT(m).length;\n    };\n\n    /**\n     * @param {number}\n     * @returns {Array}\n     */\n    encode.OPERATOR = function (v) {\n        if (v < 1200) {\n            return [v];\n        } else {\n            return [12, v - 1200];\n        }\n    };\n\n    /**\n     * @param {Array} v\n     * @param {string}\n     * @returns {Array}\n     */\n    encode.OPERAND = function (v, type) {\n        var d = [];\n        if (Array.isArray(type)) {\n            for (var i = 0; i < type.length; i += 1) {\n                check.argument(v.length === type.length, 'Not enough arguments given for type' + type);\n                d = d.concat(encode.OPERAND(v[i], type[i]));\n            }\n        } else {\n            if (type === 'SID') {\n                d = d.concat(encode.NUMBER(v));\n            } else if (type === 'offset') {\n                // We make it easy for ourselves and always encode offsets as\n                // 4 bytes. This makes offset calculation for the top dict easier.\n                d = d.concat(encode.NUMBER32(v));\n            } else if (type === 'number') {\n                d = d.concat(encode.NUMBER(v));\n            } else if (type === 'real') {\n                d = d.concat(encode.REAL(v));\n            } else {\n                throw new Error('Unknown operand type ' + type);\n                // FIXME Add support for booleans\n            }\n        }\n\n        return d;\n    };\n\n    encode.OP = encode.BYTE;\n    sizeOf.OP = sizeOf.BYTE;\n\n    // memoize charstring encoding using WeakMap if available\n    var wmm = typeof WeakMap === 'function' && new WeakMap();\n\n    /**\n     * Convert a list of CharString operations to bytes.\n     * @param {Array}\n     * @returns {Array}\n     */\n    encode.CHARSTRING = function (ops) {\n        // See encode.MACSTRING for why we don't do \"if (wmm && wmm.has(ops))\".\n        if (wmm) {\n            var cachedValue = wmm.get(ops);\n            if (cachedValue !== undefined) {\n                return cachedValue;\n            }\n        }\n\n        var d = [];\n        var length = ops.length;\n\n        for (var i = 0; i < length; i += 1) {\n            var op = ops[i];\n            d = d.concat(encode[op.type](op.value));\n        }\n\n        if (wmm) {\n            wmm.set(ops, d);\n        }\n\n        return d;\n    };\n\n    /**\n     * @param {Array}\n     * @returns {number}\n     */\n    sizeOf.CHARSTRING = function (ops) {\n        return encode.CHARSTRING(ops).length;\n    };\n\n    // Utility functions ////////////////////////////////////////////////////////\n\n    /**\n     * Convert an object containing name / type / value to bytes.\n     * @param {Object}\n     * @returns {Array}\n     */\n    encode.OBJECT = function (v) {\n        var encodingFunction = encode[v.type];\n        check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);\n        return encodingFunction(v.value);\n    };\n\n    /**\n     * @param {Object}\n     * @returns {number}\n     */\n    sizeOf.OBJECT = function (v) {\n        var sizeOfFunction = sizeOf[v.type];\n        check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);\n        return sizeOfFunction(v.value);\n    };\n\n    /**\n     * Convert a table object to bytes.\n     * A table contains a list of fields containing the metadata (name, type and default value).\n     * The table itself has the field values set as attributes.\n     * @param {opentype.Table}\n     * @returns {Array}\n     */\n    encode.TABLE = function (table) {\n        var d = [];\n        var length = table.fields.length;\n        var subtables = [];\n        var subtableOffsets = [];\n\n        for (var i = 0; i < length; i += 1) {\n            var field = table.fields[i];\n            var encodingFunction = encode[field.type];\n            check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');\n            var value = table[field.name];\n            if (value === undefined) {\n                value = field.value;\n            }\n\n            var bytes = encodingFunction(value);\n\n            if (field.type === 'TABLE') {\n                subtableOffsets.push(d.length);\n                d = d.concat([0, 0]);\n                subtables.push(bytes);\n            } else {\n                d = d.concat(bytes);\n            }\n        }\n\n        for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {\n            var o = subtableOffsets[i$1];\n            var offset = d.length;\n            check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');\n            d[o] = offset >> 8;\n            d[o + 1] = offset & 0xff;\n            d = d.concat(subtables[i$1]);\n        }\n\n        return d;\n    };\n\n    /**\n     * @param {opentype.Table}\n     * @returns {number}\n     */\n    sizeOf.TABLE = function (table) {\n        var numBytes = 0;\n        var length = table.fields.length;\n\n        for (var i = 0; i < length; i += 1) {\n            var field = table.fields[i];\n            var sizeOfFunction = sizeOf[field.type];\n            check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');\n            var value = table[field.name];\n            if (value === undefined) {\n                value = field.value;\n            }\n\n            numBytes += sizeOfFunction(value);\n\n            // Subtables take 2 more bytes for offsets.\n            if (field.type === 'TABLE') {\n                numBytes += 2;\n            }\n        }\n\n        return numBytes;\n    };\n\n    encode.RECORD = encode.TABLE;\n    sizeOf.RECORD = sizeOf.TABLE;\n\n    // Merge in a list of bytes.\n    encode.LITERAL = function (v) {\n        return v;\n    };\n\n    sizeOf.LITERAL = function (v) {\n        return v.length;\n    };\n\n    // Table metadata\n\n    /**\n     * @exports opentype.Table\n     * @class\n     * @param {string} tableName\n     * @param {Array} fields\n     * @param {Object} options\n     * @constructor\n     */\n    function Table(tableName, fields, options) {\n        var this$1 = this;\n\n        for (var i = 0; i < fields.length; i += 1) {\n            var field = fields[i];\n            this$1[field.name] = field.value;\n        }\n\n        this.tableName = tableName;\n        this.fields = fields;\n        if (options) {\n            var optionKeys = Object.keys(options);\n            for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {\n                var k = optionKeys[i$1];\n                var v = options[k];\n                if (this$1[k] !== undefined) {\n                    this$1[k] = v;\n                }\n            }\n        }\n    }\n\n    /**\n     * Encodes the table and returns an array of bytes\n     * @return {Array}\n     */\n    Table.prototype.encode = function () {\n        return encode.TABLE(this);\n    };\n\n    /**\n     * Get the size of the table.\n     * @return {number}\n     */\n    Table.prototype.sizeOf = function () {\n        return sizeOf.TABLE(this);\n    };\n\n    /**\n     * @private\n     */\n    function ushortList(itemName, list, count) {\n        if (count === undefined) {\n            count = list.length;\n        }\n        var fields = new Array(list.length + 1);\n        fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };\n        for (var i = 0; i < list.length; i++) {\n            fields[i + 1] = { name: itemName + i, type: 'USHORT', value: list[i] };\n        }\n        return fields;\n    }\n\n    /**\n     * @private\n     */\n    function tableList(itemName, records, itemCallback) {\n        var count = records.length;\n        var fields = new Array(count + 1);\n        fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };\n        for (var i = 0; i < count; i++) {\n            fields[i + 1] = { name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i) };\n        }\n        return fields;\n    }\n\n    /**\n     * @private\n     */\n    function recordList(itemName, records, itemCallback) {\n        var count = records.length;\n        var fields = [];\n        fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };\n        for (var i = 0; i < count; i++) {\n            fields = fields.concat(itemCallback(records[i], i));\n        }\n        return fields;\n    }\n\n    // Common Layout Tables\n\n    /**\n     * @exports opentype.Coverage\n     * @class\n     * @param {opentype.Table}\n     * @constructor\n     * @extends opentype.Table\n     */\n    function Coverage(coverageTable) {\n        if (coverageTable.format === 1) {\n            Table.call(this, 'coverageTable', [{ name: 'coverageFormat', type: 'USHORT', value: 1 }].concat(ushortList('glyph', coverageTable.glyphs)));\n        } else {\n            check.assert(false, 'Can\\'t create coverage table format 2 yet.');\n        }\n    }\n    Coverage.prototype = Object.create(Table.prototype);\n    Coverage.prototype.constructor = Coverage;\n\n    function ScriptList(scriptListTable) {\n        Table.call(this, 'scriptListTable', recordList('scriptRecord', scriptListTable, function (scriptRecord, i) {\n            var script = scriptRecord.script;\n            var defaultLangSys = script.defaultLangSys;\n            check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');\n            return [{ name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag }, { name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [{ name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [{ name: 'lookupOrder', type: 'USHORT', value: 0 }, { name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex }].concat(ushortList('featureIndex', defaultLangSys.featureIndexes))) }].concat(recordList('langSys', script.langSysRecords, function (langSysRecord, i) {\n                    var langSys = langSysRecord.langSys;\n                    return [{ name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag }, { name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [{ name: 'lookupOrder', type: 'USHORT', value: 0 }, { name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex }].concat(ushortList('featureIndex', langSys.featureIndexes))) }];\n                }))) }];\n        }));\n    }\n    ScriptList.prototype = Object.create(Table.prototype);\n    ScriptList.prototype.constructor = ScriptList;\n\n    /**\n     * @exports opentype.FeatureList\n     * @class\n     * @param {opentype.Table}\n     * @constructor\n     * @extends opentype.Table\n     */\n    function FeatureList(featureListTable) {\n        Table.call(this, 'featureListTable', recordList('featureRecord', featureListTable, function (featureRecord, i) {\n            var feature = featureRecord.feature;\n            return [{ name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag }, { name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [{ name: 'featureParams', type: 'USHORT', value: feature.featureParams }].concat(ushortList('lookupListIndex', feature.lookupListIndexes))) }];\n        }));\n    }\n    FeatureList.prototype = Object.create(Table.prototype);\n    FeatureList.prototype.constructor = FeatureList;\n\n    /**\n     * @exports opentype.LookupList\n     * @class\n     * @param {opentype.Table}\n     * @param {Object}\n     * @constructor\n     * @extends opentype.Table\n     */\n    function LookupList(lookupListTable, subtableMakers) {\n        Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function (lookupTable) {\n            var subtableCallback = subtableMakers[lookupTable.lookupType];\n            check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');\n            return new Table('lookupTable', [{ name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType }, { name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag }].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));\n        }));\n    }\n    LookupList.prototype = Object.create(Table.prototype);\n    LookupList.prototype.constructor = LookupList;\n\n    // Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)\n    // Don't use offsets inside Records (probable bug), only in Tables.\n    var table = {\n        Table: Table,\n        Record: Table,\n        Coverage: Coverage,\n        ScriptList: ScriptList,\n        FeatureList: FeatureList,\n        LookupList: LookupList,\n        ushortList: ushortList,\n        tableList: tableList,\n        recordList: recordList\n    };\n\n    // Parsing utility functions\n\n    // Retrieve an unsigned byte from the DataView.\n    function getByte(dataView, offset) {\n        return dataView.getUint8(offset);\n    }\n\n    // Retrieve an unsigned 16-bit short from the DataView.\n    // The value is stored in big endian.\n    function getUShort(dataView, offset) {\n        return dataView.getUint16(offset, false);\n    }\n\n    // Retrieve a signed 16-bit short from the DataView.\n    // The value is stored in big endian.\n    function getShort(dataView, offset) {\n        return dataView.getInt16(offset, false);\n    }\n\n    // Retrieve an unsigned 32-bit long from the DataView.\n    // The value is stored in big endian.\n    function getULong(dataView, offset) {\n        return dataView.getUint32(offset, false);\n    }\n\n    // Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n    // The value is stored in big endian.\n    function getFixed(dataView, offset) {\n        var decimal = dataView.getInt16(offset, false);\n        var fraction = dataView.getUint16(offset + 2, false);\n        return decimal + fraction / 65535;\n    }\n\n    // Retrieve a 4-character tag from the DataView.\n    // Tags are used to identify tables.\n    function getTag(dataView, offset) {\n        var tag = '';\n        for (var i = offset; i < offset + 4; i += 1) {\n            tag += String.fromCharCode(dataView.getInt8(i));\n        }\n\n        return tag;\n    }\n\n    // Retrieve an offset from the DataView.\n    // Offsets are 1 to 4 bytes in length, depending on the offSize argument.\n    function getOffset(dataView, offset, offSize) {\n        var v = 0;\n        for (var i = 0; i < offSize; i += 1) {\n            v <<= 8;\n            v += dataView.getUint8(offset + i);\n        }\n\n        return v;\n    }\n\n    // Retrieve a number of bytes from start offset to the end offset from the DataView.\n    function getBytes(dataView, startOffset, endOffset) {\n        var bytes = [];\n        for (var i = startOffset; i < endOffset; i += 1) {\n            bytes.push(dataView.getUint8(i));\n        }\n\n        return bytes;\n    }\n\n    // Convert the list of bytes to a string.\n    function bytesToString(bytes) {\n        var s = '';\n        for (var i = 0; i < bytes.length; i += 1) {\n            s += String.fromCharCode(bytes[i]);\n        }\n\n        return s;\n    }\n\n    var typeOffsets = {\n        byte: 1,\n        uShort: 2,\n        short: 2,\n        uLong: 4,\n        fixed: 4,\n        longDateTime: 8,\n        tag: 4\n    };\n\n    // A stateful parser that changes the offset whenever a value is retrieved.\n    // The data is a DataView.\n    function Parser(data, offset) {\n        this.data = data;\n        this.offset = offset;\n        this.relativeOffset = 0;\n    }\n\n    Parser.prototype.parseByte = function () {\n        var v = this.data.getUint8(this.offset + this.relativeOffset);\n        this.relativeOffset += 1;\n        return v;\n    };\n\n    Parser.prototype.parseChar = function () {\n        var v = this.data.getInt8(this.offset + this.relativeOffset);\n        this.relativeOffset += 1;\n        return v;\n    };\n\n    Parser.prototype.parseCard8 = Parser.prototype.parseByte;\n\n    Parser.prototype.parseUShort = function () {\n        var v = this.data.getUint16(this.offset + this.relativeOffset);\n        this.relativeOffset += 2;\n        return v;\n    };\n\n    Parser.prototype.parseCard16 = Parser.prototype.parseUShort;\n    Parser.prototype.parseSID = Parser.prototype.parseUShort;\n    Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\n    Parser.prototype.parseShort = function () {\n        var v = this.data.getInt16(this.offset + this.relativeOffset);\n        this.relativeOffset += 2;\n        return v;\n    };\n\n    Parser.prototype.parseF2Dot14 = function () {\n        var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n        this.relativeOffset += 2;\n        return v;\n    };\n\n    Parser.prototype.parseULong = function () {\n        var v = getULong(this.data, this.offset + this.relativeOffset);\n        this.relativeOffset += 4;\n        return v;\n    };\n\n    Parser.prototype.parseFixed = function () {\n        var v = getFixed(this.data, this.offset + this.relativeOffset);\n        this.relativeOffset += 4;\n        return v;\n    };\n\n    Parser.prototype.parseString = function (length) {\n        var dataView = this.data;\n        var offset = this.offset + this.relativeOffset;\n        var string = '';\n        this.relativeOffset += length;\n        for (var i = 0; i < length; i++) {\n            string += String.fromCharCode(dataView.getUint8(offset + i));\n        }\n\n        return string;\n    };\n\n    Parser.prototype.parseTag = function () {\n        return this.parseString(4);\n    };\n\n    // LONGDATETIME is a 64-bit integer.\n    // JavaScript and unix timestamps traditionally use 32 bits, so we\n    // only take the last 32 bits.\n    // + Since until 2038 those bits will be filled by zeros we can ignore them.\n    Parser.prototype.parseLongDateTime = function () {\n        var v = getULong(this.data, this.offset + this.relativeOffset + 4);\n        // Subtract seconds between 01/01/1904 and 01/01/1970\n        // to convert Apple Mac timestamp to Standard Unix timestamp\n        v -= 2082844800;\n        this.relativeOffset += 8;\n        return v;\n    };\n\n    Parser.prototype.parseVersion = function () {\n        var major = getUShort(this.data, this.offset + this.relativeOffset);\n\n        // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n        // This returns the correct number if minor = 0xN000 where N is 0-9\n        var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n        this.relativeOffset += 4;\n        return major + minor / 0x1000 / 10;\n    };\n\n    Parser.prototype.skip = function (type, amount) {\n        if (amount === undefined) {\n            amount = 1;\n        }\n\n        this.relativeOffset += typeOffsets[type] * amount;\n    };\n\n    ///// Parsing lists and records ///////////////////////////////\n\n    // Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream\n    // or provided as an argument.\n    Parser.prototype.parseOffset16List = Parser.prototype.parseUShortList = function (count) {\n        if (count === undefined) {\n            count = this.parseUShort();\n        }\n        var offsets = new Array(count);\n        var dataView = this.data;\n        var offset = this.offset + this.relativeOffset;\n        for (var i = 0; i < count; i++) {\n            offsets[i] = dataView.getUint16(offset);\n            offset += 2;\n        }\n\n        this.relativeOffset += count * 2;\n        return offsets;\n    };\n\n    // Parses a list of 16 bit signed integers.\n    Parser.prototype.parseShortList = function (count) {\n        var list = new Array(count);\n        var dataView = this.data;\n        var offset = this.offset + this.relativeOffset;\n        for (var i = 0; i < count; i++) {\n            list[i] = dataView.getInt16(offset);\n            offset += 2;\n        }\n\n        this.relativeOffset += count * 2;\n        return list;\n    };\n\n    // Parses a list of bytes.\n    Parser.prototype.parseByteList = function (count) {\n        var list = new Array(count);\n        var dataView = this.data;\n        var offset = this.offset + this.relativeOffset;\n        for (var i = 0; i < count; i++) {\n            list[i] = dataView.getUint8(offset++);\n        }\n\n        this.relativeOffset += count;\n        return list;\n    };\n\n    /**\n     * Parse a list of items.\n     * Record count is optional, if omitted it is read from the stream.\n     * itemCallback is one of the Parser methods.\n     */\n    Parser.prototype.parseList = function (count, itemCallback) {\n        var this$1 = this;\n\n        if (!itemCallback) {\n            itemCallback = count;\n            count = this.parseUShort();\n        }\n        var list = new Array(count);\n        for (var i = 0; i < count; i++) {\n            list[i] = itemCallback.call(this$1);\n        }\n        return list;\n    };\n\n    /**\n     * Parse a list of records.\n     * Record count is optional, if omitted it is read from the stream.\n     * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n     */\n    Parser.prototype.parseRecordList = function (count, recordDescription) {\n        var this$1 = this;\n\n        // If the count argument is absent, read it in the stream.\n        if (!recordDescription) {\n            recordDescription = count;\n            count = this.parseUShort();\n        }\n        var records = new Array(count);\n        var fields = Object.keys(recordDescription);\n        for (var i = 0; i < count; i++) {\n            var rec = {};\n            for (var j = 0; j < fields.length; j++) {\n                var fieldName = fields[j];\n                var fieldType = recordDescription[fieldName];\n                rec[fieldName] = fieldType.call(this$1);\n            }\n            records[i] = rec;\n        }\n        return records;\n    };\n\n    // Parse a data structure into an object\n    // Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n    Parser.prototype.parseStruct = function (description) {\n        var this$1 = this;\n\n        if (typeof description === 'function') {\n            return description.call(this);\n        } else {\n            var fields = Object.keys(description);\n            var struct = {};\n            for (var j = 0; j < fields.length; j++) {\n                var fieldName = fields[j];\n                var fieldType = description[fieldName];\n                struct[fieldName] = fieldType.call(this$1);\n            }\n            return struct;\n        }\n    };\n\n    Parser.prototype.parsePointer = function (description) {\n        var structOffset = this.parseOffset16();\n        if (structOffset > 0) {\n            // NULL offset => return undefined\n            return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n        }\n        return undefined;\n    };\n\n    /**\n     * Parse a list of offsets to lists of 16-bit integers,\n     * or a list of offsets to lists of offsets to any kind of items.\n     * If itemCallback is not provided, a list of list of UShort is assumed.\n     * If provided, itemCallback is called on each item and must parse the item.\n     * See examples in tables/gsub.js\n     */\n    Parser.prototype.parseListOfLists = function (itemCallback) {\n        var this$1 = this;\n\n        var offsets = this.parseOffset16List();\n        var count = offsets.length;\n        var relativeOffset = this.relativeOffset;\n        var list = new Array(count);\n        for (var i = 0; i < count; i++) {\n            var start = offsets[i];\n            if (start === 0) {\n                // NULL offset\n                list[i] = undefined; // Add i as owned property to list. Convenient with assert.\n                continue;\n            }\n            this$1.relativeOffset = start;\n            if (itemCallback) {\n                var subOffsets = this$1.parseOffset16List();\n                var subList = new Array(subOffsets.length);\n                for (var j = 0; j < subOffsets.length; j++) {\n                    this$1.relativeOffset = start + subOffsets[j];\n                    subList[j] = itemCallback.call(this$1);\n                }\n                list[i] = subList;\n            } else {\n                list[i] = this$1.parseUShortList();\n            }\n        }\n        this.relativeOffset = relativeOffset;\n        return list;\n    };\n\n    ///// Complex tables parsing //////////////////////////////////\n\n    // Parse a coverage table in a GSUB, GPOS or GDEF table.\n    // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n    // parser.offset must point to the start of the table containing the coverage.\n    Parser.prototype.parseCoverage = function () {\n        var this$1 = this;\n\n        var startOffset = this.offset + this.relativeOffset;\n        var format = this.parseUShort();\n        var count = this.parseUShort();\n        if (format === 1) {\n            return {\n                format: 1,\n                glyphs: this.parseUShortList(count)\n            };\n        } else if (format === 2) {\n            var ranges = new Array(count);\n            for (var i = 0; i < count; i++) {\n                ranges[i] = {\n                    start: this$1.parseUShort(),\n                    end: this$1.parseUShort(),\n                    index: this$1.parseUShort()\n                };\n            }\n            return {\n                format: 2,\n                ranges: ranges\n            };\n        }\n        throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');\n    };\n\n    // Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n    // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n    Parser.prototype.parseClassDef = function () {\n        var startOffset = this.offset + this.relativeOffset;\n        var format = this.parseUShort();\n        if (format === 1) {\n            return {\n                format: 1,\n                startGlyph: this.parseUShort(),\n                classes: this.parseUShortList()\n            };\n        } else if (format === 2) {\n            return {\n                format: 2,\n                ranges: this.parseRecordList({\n                    start: Parser.uShort,\n                    end: Parser.uShort,\n                    classId: Parser.uShort\n                })\n            };\n        }\n        throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');\n    };\n\n    ///// Static methods ///////////////////////////////////\n    // These convenience methods can be used as callbacks and should be called with \"this\" context set to a Parser instance.\n\n    Parser.list = function (count, itemCallback) {\n        return function () {\n            return this.parseList(count, itemCallback);\n        };\n    };\n\n    Parser.recordList = function (count, recordDescription) {\n        return function () {\n            return this.parseRecordList(count, recordDescription);\n        };\n    };\n\n    Parser.pointer = function (description) {\n        return function () {\n            return this.parsePointer(description);\n        };\n    };\n\n    Parser.tag = Parser.prototype.parseTag;\n    Parser.byte = Parser.prototype.parseByte;\n    Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\n    Parser.uShortList = Parser.prototype.parseUShortList;\n    Parser.struct = Parser.prototype.parseStruct;\n    Parser.coverage = Parser.prototype.parseCoverage;\n    Parser.classDef = Parser.prototype.parseClassDef;\n\n    ///// Script, Feature, Lookup lists ///////////////////////////////////////////////\n    // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\n    var langSysTable = {\n        reserved: Parser.uShort,\n        reqFeatureIndex: Parser.uShort,\n        featureIndexes: Parser.uShortList\n    };\n\n    Parser.prototype.parseScriptList = function () {\n        return this.parsePointer(Parser.recordList({\n            tag: Parser.tag,\n            script: Parser.pointer({\n                defaultLangSys: Parser.pointer(langSysTable),\n                langSysRecords: Parser.recordList({\n                    tag: Parser.tag,\n                    langSys: Parser.pointer(langSysTable)\n                })\n            })\n        }));\n    };\n\n    Parser.prototype.parseFeatureList = function () {\n        return this.parsePointer(Parser.recordList({\n            tag: Parser.tag,\n            feature: Parser.pointer({\n                featureParams: Parser.offset16,\n                lookupListIndexes: Parser.uShortList\n            })\n        }));\n    };\n\n    Parser.prototype.parseLookupList = function (lookupTableParsers) {\n        return this.parsePointer(Parser.list(Parser.pointer(function () {\n            var lookupType = this.parseUShort();\n            check.argument(1 <= lookupType && lookupType <= 8, 'GSUB lookup type ' + lookupType + ' unknown.');\n            var lookupFlag = this.parseUShort();\n            var useMarkFilteringSet = lookupFlag & 0x10;\n            return {\n                lookupType: lookupType,\n                lookupFlag: lookupFlag,\n                subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n                markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined\n            };\n        })));\n    };\n\n    var parse = {\n        getByte: getByte,\n        getCard8: getByte,\n        getUShort: getUShort,\n        getCard16: getUShort,\n        getShort: getShort,\n        getULong: getULong,\n        getFixed: getFixed,\n        getTag: getTag,\n        getOffset: getOffset,\n        getBytes: getBytes,\n        bytesToString: bytesToString,\n        Parser: Parser\n    };\n\n    // The `cmap` table stores the mappings from characters to glyphs.\n    // https://www.microsoft.com/typography/OTSPEC/cmap.htm\n\n    function parseCmapTableFormat12(cmap, p) {\n        //Skip reserved.\n        p.parseUShort();\n\n        // Length in bytes of the sub-tables.\n        cmap.length = p.parseULong();\n        cmap.language = p.parseULong();\n\n        var groupCount;\n        cmap.groupCount = groupCount = p.parseULong();\n        cmap.glyphIndexMap = {};\n\n        for (var i = 0; i < groupCount; i += 1) {\n            var startCharCode = p.parseULong();\n            var endCharCode = p.parseULong();\n            var startGlyphId = p.parseULong();\n\n            for (var c = startCharCode; c <= endCharCode; c += 1) {\n                cmap.glyphIndexMap[c] = startGlyphId;\n                startGlyphId++;\n            }\n        }\n    }\n\n    function parseCmapTableFormat4(cmap, p, data, start, offset) {\n        // Length in bytes of the sub-tables.\n        cmap.length = p.parseUShort();\n        cmap.language = p.parseUShort();\n\n        // segCount is stored x 2.\n        var segCount;\n        cmap.segCount = segCount = p.parseUShort() >> 1;\n\n        // Skip searchRange, entrySelector, rangeShift.\n        p.skip('uShort', 3);\n\n        // The \"unrolled\" mapping from character codes to glyph indices.\n        cmap.glyphIndexMap = {};\n        var endCountParser = new parse.Parser(data, start + offset + 14);\n        var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);\n        var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);\n        var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);\n        var glyphIndexOffset = start + offset + 16 + segCount * 8;\n        for (var i = 0; i < segCount - 1; i += 1) {\n            var glyphIndex = void 0;\n            var endCount = endCountParser.parseUShort();\n            var startCount = startCountParser.parseUShort();\n            var idDelta = idDeltaParser.parseShort();\n            var idRangeOffset = idRangeOffsetParser.parseUShort();\n            for (var c = startCount; c <= endCount; c += 1) {\n                if (idRangeOffset !== 0) {\n                    // The idRangeOffset is relative to the current position in the idRangeOffset array.\n                    // Take the current offset in the idRangeOffset array.\n                    glyphIndexOffset = idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2;\n\n                    // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n                    glyphIndexOffset += idRangeOffset;\n\n                    // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n                    glyphIndexOffset += (c - startCount) * 2;\n                    glyphIndex = parse.getUShort(data, glyphIndexOffset);\n                    if (glyphIndex !== 0) {\n                        glyphIndex = glyphIndex + idDelta & 0xFFFF;\n                    }\n                } else {\n                    glyphIndex = c + idDelta & 0xFFFF;\n                }\n\n                cmap.glyphIndexMap[c] = glyphIndex;\n            }\n        }\n    }\n\n    // Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n    // There are many available formats, but we only support the Windows format 4 and 12.\n    // This function returns a `CmapEncoding` object or null if no supported format could be found.\n    function parseCmapTable(data, start) {\n        var cmap = {};\n        cmap.version = parse.getUShort(data, start);\n        check.argument(cmap.version === 0, 'cmap table version should be 0.');\n\n        // The cmap table can contain many sub-tables, each with their own format.\n        // We're only interested in a \"platform 3\" table. This is a Windows format.\n        cmap.numTables = parse.getUShort(data, start + 2);\n        var offset = -1;\n        for (var i = cmap.numTables - 1; i >= 0; i -= 1) {\n            var platformId = parse.getUShort(data, start + 4 + i * 8);\n            var encodingId = parse.getUShort(data, start + 4 + i * 8 + 2);\n            if (platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) {\n                offset = parse.getULong(data, start + 4 + i * 8 + 4);\n                break;\n            }\n        }\n\n        if (offset === -1) {\n            // There is no cmap table in the font that we support.\n            throw new Error('No valid cmap sub-tables found.');\n        }\n\n        var p = new parse.Parser(data, start + offset);\n        cmap.format = p.parseUShort();\n\n        if (cmap.format === 12) {\n            parseCmapTableFormat12(cmap, p);\n        } else if (cmap.format === 4) {\n            parseCmapTableFormat4(cmap, p, data, start, offset);\n        } else {\n            throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');\n        }\n\n        return cmap;\n    }\n\n    function addSegment(t, code, glyphIndex) {\n        t.segments.push({\n            end: code,\n            start: code,\n            delta: -(code - glyphIndex),\n            offset: 0\n        });\n    }\n\n    function addTerminatorSegment(t) {\n        t.segments.push({\n            end: 0xFFFF,\n            start: 0xFFFF,\n            delta: 1,\n            offset: 0\n        });\n    }\n\n    function makeCmapTable(glyphs) {\n        var t = new table.Table('cmap', [{ name: 'version', type: 'USHORT', value: 0 }, { name: 'numTables', type: 'USHORT', value: 1 }, { name: 'platformID', type: 'USHORT', value: 3 }, { name: 'encodingID', type: 'USHORT', value: 1 }, { name: 'offset', type: 'ULONG', value: 12 }, { name: 'format', type: 'USHORT', value: 4 }, { name: 'length', type: 'USHORT', value: 0 }, { name: 'language', type: 'USHORT', value: 0 }, { name: 'segCountX2', type: 'USHORT', value: 0 }, { name: 'searchRange', type: 'USHORT', value: 0 }, { name: 'entrySelector', type: 'USHORT', value: 0 }, { name: 'rangeShift', type: 'USHORT', value: 0 }]);\n\n        t.segments = [];\n        for (var i = 0; i < glyphs.length; i += 1) {\n            var glyph = glyphs.get(i);\n            for (var j = 0; j < glyph.unicodes.length; j += 1) {\n                addSegment(t, glyph.unicodes[j], i);\n            }\n\n            t.segments = t.segments.sort(function (a, b) {\n                return a.start - b.start;\n            });\n        }\n\n        addTerminatorSegment(t);\n\n        var segCount;\n        segCount = t.segments.length;\n        t.segCountX2 = segCount * 2;\n        t.searchRange = Math.pow(2, Math.floor(Math.log(segCount) / Math.log(2))) * 2;\n        t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);\n        t.rangeShift = t.segCountX2 - t.searchRange;\n\n        // Set up parallel segment arrays.\n        var endCounts = [];\n        var startCounts = [];\n        var idDeltas = [];\n        var idRangeOffsets = [];\n        var glyphIds = [];\n\n        for (var i$1 = 0; i$1 < segCount; i$1 += 1) {\n            var segment = t.segments[i$1];\n            endCounts = endCounts.concat({ name: 'end_' + i$1, type: 'USHORT', value: segment.end });\n            startCounts = startCounts.concat({ name: 'start_' + i$1, type: 'USHORT', value: segment.start });\n            idDeltas = idDeltas.concat({ name: 'idDelta_' + i$1, type: 'SHORT', value: segment.delta });\n            idRangeOffsets = idRangeOffsets.concat({ name: 'idRangeOffset_' + i$1, type: 'USHORT', value: segment.offset });\n            if (segment.glyphId !== undefined) {\n                glyphIds = glyphIds.concat({ name: 'glyph_' + i$1, type: 'USHORT', value: segment.glyphId });\n            }\n        }\n\n        t.fields = t.fields.concat(endCounts);\n        t.fields.push({ name: 'reservedPad', type: 'USHORT', value: 0 });\n        t.fields = t.fields.concat(startCounts);\n        t.fields = t.fields.concat(idDeltas);\n        t.fields = t.fields.concat(idRangeOffsets);\n        t.fields = t.fields.concat(glyphIds);\n\n        t.length = 14 + // Subtable header\n        endCounts.length * 2 + 2 + // reservedPad\n        startCounts.length * 2 + idDeltas.length * 2 + idRangeOffsets.length * 2 + glyphIds.length * 2;\n\n        return t;\n    }\n\n    var cmap = { parse: parseCmapTable, make: makeCmapTable };\n\n    // Glyph encoding\n\n    var cffStandardStrings = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000', '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];\n\n    var cffStandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];\n\n    var cffExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\n    var standardNames = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\n    /**\n     * This is the encoding used for fonts created from scratch.\n     * It loops through all glyphs and finds the appropriate unicode value.\n     * Since it's linear time, other encodings will be faster.\n     * @exports opentype.DefaultEncoding\n     * @class\n     * @constructor\n     * @param {opentype.Font}\n     */\n    function DefaultEncoding(font) {\n        this.font = font;\n    }\n\n    DefaultEncoding.prototype.charToGlyphIndex = function (c) {\n        var code = c.charCodeAt(0);\n        var glyphs = this.font.glyphs;\n        if (glyphs) {\n            for (var i = 0; i < glyphs.length; i += 1) {\n                var glyph = glyphs.get(i);\n                for (var j = 0; j < glyph.unicodes.length; j += 1) {\n                    if (glyph.unicodes[j] === code) {\n                        return i;\n                    }\n                }\n            }\n        }\n        return null;\n    };\n\n    /**\n     * @exports opentype.CmapEncoding\n     * @class\n     * @constructor\n     * @param {Object} cmap - a object with the cmap encoded data\n     */\n    function CmapEncoding(cmap) {\n        this.cmap = cmap;\n    }\n\n    /**\n     * @param  {string} c - the character\n     * @return {number} The glyph index.\n     */\n    CmapEncoding.prototype.charToGlyphIndex = function (c) {\n        return this.cmap.glyphIndexMap[c.charCodeAt(0)] || 0;\n    };\n\n    /**\n     * @exports opentype.CffEncoding\n     * @class\n     * @constructor\n     * @param {string} encoding - The encoding\n     * @param {Array} charset - The character set.\n     */\n    function CffEncoding(encoding, charset) {\n        this.encoding = encoding;\n        this.charset = charset;\n    }\n\n    /**\n     * @param  {string} s - The character\n     * @return {number} The index.\n     */\n    CffEncoding.prototype.charToGlyphIndex = function (s) {\n        var code = s.charCodeAt(0);\n        var charName = this.encoding[code];\n        return this.charset.indexOf(charName);\n    };\n\n    /**\n     * @exports opentype.GlyphNames\n     * @class\n     * @constructor\n     * @param {Object} post\n     */\n    function GlyphNames(post) {\n        var this$1 = this;\n\n        switch (post.version) {\n            case 1:\n                this.names = standardNames.slice();\n                break;\n            case 2:\n                this.names = new Array(post.numberOfGlyphs);\n                for (var i = 0; i < post.numberOfGlyphs; i++) {\n                    if (post.glyphNameIndex[i] < standardNames.length) {\n                        this$1.names[i] = standardNames[post.glyphNameIndex[i]];\n                    } else {\n                        this$1.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];\n                    }\n                }\n\n                break;\n            case 2.5:\n                this.names = new Array(post.numberOfGlyphs);\n                for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n                    this$1.names[i$1] = standardNames[i$1 + post.glyphNameIndex[i$1]];\n                }\n\n                break;\n            case 3:\n                this.names = [];\n                break;\n            default:\n                this.names = [];\n                break;\n        }\n    }\n\n    /**\n     * Gets the index of a glyph by name.\n     * @param  {string} name - The glyph name\n     * @return {number} The index\n     */\n    GlyphNames.prototype.nameToGlyphIndex = function (name) {\n        return this.names.indexOf(name);\n    };\n\n    /**\n     * @param  {number} gid\n     * @return {string}\n     */\n    GlyphNames.prototype.glyphIndexToName = function (gid) {\n        return this.names[gid];\n    };\n\n    /**\n     * @alias opentype.addGlyphNames\n     * @param {opentype.Font}\n     */\n    function addGlyphNames(font) {\n        var glyph;\n        var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n        var charCodes = Object.keys(glyphIndexMap);\n\n        for (var i = 0; i < charCodes.length; i += 1) {\n            var c = charCodes[i];\n            var glyphIndex = glyphIndexMap[c];\n            glyph = font.glyphs.get(glyphIndex);\n            glyph.addUnicode(parseInt(c));\n        }\n\n        for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {\n            glyph = font.glyphs.get(i$1);\n            if (font.cffEncoding) {\n                if (font.isCIDFont) {\n                    glyph.name = 'gid' + i$1;\n                } else {\n                    glyph.name = font.cffEncoding.charset[i$1];\n                }\n            } else if (font.glyphNames.names) {\n                glyph.name = font.glyphNames.glyphIndexToName(i$1);\n            }\n        }\n    }\n\n    // Drawing utility functions.\n\n    // Draw a line on the given context from point `x1,y1` to point `x2,y2`.\n    function line(ctx, x1, y1, x2, y2) {\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n    }\n\n    var draw = { line: line };\n\n    // The `glyf` table describes the glyphs in TrueType outline format.\n    // http://www.microsoft.com/typography/otspec/glyf.htm\n\n    // Parse the coordinate data for a glyph.\n    function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n        var v;\n        if ((flag & shortVectorBitMask) > 0) {\n            // The coordinate is 1 byte long.\n            v = p.parseByte();\n            // The `same` bit is re-used for short values to signify the sign of the value.\n            if ((flag & sameBitMask) === 0) {\n                v = -v;\n            }\n\n            v = previousValue + v;\n        } else {\n            //  The coordinate is 2 bytes long.\n            // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n            if ((flag & sameBitMask) > 0) {\n                v = previousValue;\n            } else {\n                // Parse the coordinate as a signed 16-bit delta value.\n                v = previousValue + p.parseShort();\n            }\n        }\n\n        return v;\n    }\n\n    // Parse a TrueType glyph.\n    function parseGlyph(glyph, data, start) {\n        var p = new parse.Parser(data, start);\n        glyph.numberOfContours = p.parseShort();\n        glyph._xMin = p.parseShort();\n        glyph._yMin = p.parseShort();\n        glyph._xMax = p.parseShort();\n        glyph._yMax = p.parseShort();\n        var flags;\n        var flag;\n\n        if (glyph.numberOfContours > 0) {\n            // This glyph is not a composite.\n            var endPointIndices = glyph.endPointIndices = [];\n            for (var i = 0; i < glyph.numberOfContours; i += 1) {\n                endPointIndices.push(p.parseUShort());\n            }\n\n            glyph.instructionLength = p.parseUShort();\n            glyph.instructions = [];\n            for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {\n                glyph.instructions.push(p.parseByte());\n            }\n\n            var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n            flags = [];\n            for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {\n                flag = p.parseByte();\n                flags.push(flag);\n                // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n                if ((flag & 8) > 0) {\n                    var repeatCount = p.parseByte();\n                    for (var j = 0; j < repeatCount; j += 1) {\n                        flags.push(flag);\n                        i$2 += 1;\n                    }\n                }\n            }\n\n            check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n            if (endPointIndices.length > 0) {\n                var points = [];\n                var point;\n                // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n                if (numberOfCoordinates > 0) {\n                    for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {\n                        flag = flags[i$3];\n                        point = {};\n                        point.onCurve = !!(flag & 1);\n                        point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;\n                        points.push(point);\n                    }\n\n                    var px = 0;\n                    for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {\n                        flag = flags[i$4];\n                        point = points[i$4];\n                        point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                        px = point.x;\n                    }\n\n                    var py = 0;\n                    for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {\n                        flag = flags[i$5];\n                        point = points[i$5];\n                        point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                        py = point.y;\n                    }\n                }\n\n                glyph.points = points;\n            } else {\n                glyph.points = [];\n            }\n        } else if (glyph.numberOfContours === 0) {\n            glyph.points = [];\n        } else {\n            glyph.isComposite = true;\n            glyph.points = [];\n            glyph.components = [];\n            var moreComponents = true;\n            while (moreComponents) {\n                flags = p.parseUShort();\n                var component = {\n                    glyphIndex: p.parseUShort(),\n                    xScale: 1,\n                    scale01: 0,\n                    scale10: 0,\n                    yScale: 1,\n                    dx: 0,\n                    dy: 0\n                };\n                if ((flags & 1) > 0) {\n                    // The arguments are words\n                    if ((flags & 2) > 0) {\n                        // values are offset\n                        component.dx = p.parseShort();\n                        component.dy = p.parseShort();\n                    } else {\n                        // values are matched points\n                        component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n                    }\n                } else {\n                    // The arguments are bytes\n                    if ((flags & 2) > 0) {\n                        // values are offset\n                        component.dx = p.parseChar();\n                        component.dy = p.parseChar();\n                    } else {\n                        // values are matched points\n                        component.matchedPoints = [p.parseByte(), p.parseByte()];\n                    }\n                }\n\n                if ((flags & 8) > 0) {\n                    // We have a scale\n                    component.xScale = component.yScale = p.parseF2Dot14();\n                } else if ((flags & 64) > 0) {\n                    // We have an X / Y scale\n                    component.xScale = p.parseF2Dot14();\n                    component.yScale = p.parseF2Dot14();\n                } else if ((flags & 128) > 0) {\n                    // We have a 2x2 transformation\n                    component.xScale = p.parseF2Dot14();\n                    component.scale01 = p.parseF2Dot14();\n                    component.scale10 = p.parseF2Dot14();\n                    component.yScale = p.parseF2Dot14();\n                }\n\n                glyph.components.push(component);\n                moreComponents = !!(flags & 32);\n            }\n            if (flags & 0x100) {\n                // We have instructions\n                glyph.instructionLength = p.parseUShort();\n                glyph.instructions = [];\n                for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {\n                    glyph.instructions.push(p.parseByte());\n                }\n            }\n        }\n    }\n\n    // Transform an array of points and return a new array.\n    function transformPoints(points, transform) {\n        var newPoints = [];\n        for (var i = 0; i < points.length; i += 1) {\n            var pt = points[i];\n            var newPt = {\n                x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n                y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n                onCurve: pt.onCurve,\n                lastPointOfContour: pt.lastPointOfContour\n            };\n            newPoints.push(newPt);\n        }\n\n        return newPoints;\n    }\n\n    function getContours(points) {\n        var contours = [];\n        var currentContour = [];\n        for (var i = 0; i < points.length; i += 1) {\n            var pt = points[i];\n            currentContour.push(pt);\n            if (pt.lastPointOfContour) {\n                contours.push(currentContour);\n                currentContour = [];\n            }\n        }\n\n        check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n        return contours;\n    }\n\n    // Convert the TrueType glyph outline to a Path.\n    function getPath(points) {\n        var p = new Path();\n        if (!points) {\n            return p;\n        }\n\n        var contours = getContours(points);\n\n        for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {\n            var contour = contours[contourIndex];\n\n            var prev = null;\n            var curr = contour[contour.length - 1];\n            var next = contour[0];\n\n            if (curr.onCurve) {\n                p.moveTo(curr.x, curr.y);\n            } else {\n                if (next.onCurve) {\n                    p.moveTo(next.x, next.y);\n                } else {\n                    // If both first and last points are off-curve, start at their middle.\n                    var start = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n                    p.moveTo(start.x, start.y);\n                }\n            }\n\n            for (var i = 0; i < contour.length; ++i) {\n                prev = curr;\n                curr = next;\n                next = contour[(i + 1) % contour.length];\n\n                if (curr.onCurve) {\n                    // This is a straight line.\n                    p.lineTo(curr.x, curr.y);\n                } else {\n                    var prev2 = prev;\n                    var next2 = next;\n\n                    if (!prev.onCurve) {\n                        prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };\n                        p.lineTo(prev2.x, prev2.y);\n                    }\n\n                    if (!next.onCurve) {\n                        next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n                    }\n\n                    p.lineTo(prev2.x, prev2.y);\n                    p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n                }\n            }\n\n            p.closePath();\n        }\n        return p;\n    }\n\n    function buildPath(glyphs, glyph) {\n        if (glyph.isComposite) {\n            for (var j = 0; j < glyph.components.length; j += 1) {\n                var component = glyph.components[j];\n                var componentGlyph = glyphs.get(component.glyphIndex);\n                // Force the ttfGlyphLoader to parse the glyph.\n                componentGlyph.getPath();\n                if (componentGlyph.points) {\n                    var transformedPoints = void 0;\n                    if (component.matchedPoints === undefined) {\n                        // component positioned by offset\n                        transformedPoints = transformPoints(componentGlyph.points, component);\n                    } else {\n                        // component positioned by matched points\n                        if (component.matchedPoints[0] > glyph.points.length - 1 || component.matchedPoints[1] > componentGlyph.points.length - 1) {\n                            throw Error('Matched points out of range in ' + glyph.name);\n                        }\n                        var firstPt = glyph.points[component.matchedPoints[0]];\n                        var secondPt = componentGlyph.points[component.matchedPoints[1]];\n                        var transform = {\n                            xScale: component.xScale, scale01: component.scale01,\n                            scale10: component.scale10, yScale: component.yScale,\n                            dx: 0, dy: 0\n                        };\n                        secondPt = transformPoints([secondPt], transform)[0];\n                        transform.dx = firstPt.x - secondPt.x;\n                        transform.dy = firstPt.y - secondPt.y;\n                        transformedPoints = transformPoints(componentGlyph.points, transform);\n                    }\n                    glyph.points = glyph.points.concat(transformedPoints);\n                }\n            }\n        }\n\n        return getPath(glyph.points);\n    }\n\n    // Parse all the glyphs according to the offsets from the `loca` table.\n    function parseGlyfTable(data, start, loca, font) {\n        var glyphs = new glyphset.GlyphSet(font);\n\n        // The last element of the loca table is invalid.\n        for (var i = 0; i < loca.length - 1; i += 1) {\n            var offset = loca[i];\n            var nextOffset = loca[i + 1];\n            if (offset !== nextOffset) {\n                glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n            } else {\n                glyphs.push(i, glyphset.glyphLoader(font, i));\n            }\n        }\n\n        return glyphs;\n    }\n\n    var glyf = { getPath: getPath, parse: parseGlyfTable };\n\n    // The Glyph object\n\n    function getPathDefinition(glyph, path) {\n        var _path = path || { commands: [] };\n        return {\n            configurable: true,\n\n            get: function get() {\n                if (typeof _path === 'function') {\n                    _path = _path();\n                }\n\n                return _path;\n            },\n\n            set: function set(p) {\n                _path = p;\n            }\n        };\n    }\n    /**\n     * @typedef GlyphOptions\n     * @type Object\n     * @property {string} [name] - The glyph name\n     * @property {number} [unicode]\n     * @property {Array} [unicodes]\n     * @property {number} [xMin]\n     * @property {number} [yMin]\n     * @property {number} [xMax]\n     * @property {number} [yMax]\n     * @property {number} [advanceWidth]\n     */\n\n    // A Glyph is an individual mark that often corresponds to a character.\n    // Some glyphs, such as ligatures, are a combination of many characters.\n    // Glyphs are the basic building blocks of a font.\n    //\n    // The `Glyph` class contains utility methods for drawing the path and its points.\n    /**\n     * @exports opentype.Glyph\n     * @class\n     * @param {GlyphOptions}\n     * @constructor\n     */\n    function Glyph(options) {\n        // By putting all the code on a prototype function (which is only declared once)\n        // we reduce the memory requirements for larger fonts by some 2%\n        this.bindConstructorValues(options);\n    }\n\n    /**\n     * @param  {GlyphOptions}\n     */\n    Glyph.prototype.bindConstructorValues = function (options) {\n        this.index = options.index || 0;\n\n        // These three values cannot be deferred for memory optimization:\n        this.name = options.name || null;\n        this.unicode = options.unicode || undefined;\n        this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];\n\n        // But by binding these values only when necessary, we reduce can\n        // the memory requirements by almost 3% for larger fonts.\n        if (options.xMin) {\n            this.xMin = options.xMin;\n        }\n\n        if (options.yMin) {\n            this.yMin = options.yMin;\n        }\n\n        if (options.xMax) {\n            this.xMax = options.xMax;\n        }\n\n        if (options.yMax) {\n            this.yMax = options.yMax;\n        }\n\n        if (options.advanceWidth) {\n            this.advanceWidth = options.advanceWidth;\n        }\n\n        // The path for a glyph is the most memory intensive, and is bound as a value\n        // with a getter/setter to ensure we actually do path parsing only once the\n        // path is actually needed by anything.\n        Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n    };\n\n    /**\n     * @param {number}\n     */\n    Glyph.prototype.addUnicode = function (unicode) {\n        if (this.unicodes.length === 0) {\n            this.unicode = unicode;\n        }\n\n        this.unicodes.push(unicode);\n    };\n\n    /**\n     * Calculate the minimum bounding box for this glyph.\n     * @return {opentype.BoundingBox}\n     */\n    Glyph.prototype.getBoundingBox = function () {\n        return this.path.getBoundingBox();\n    };\n\n    /**\n     * Convert the glyph to a Path we can draw on a drawing context.\n     * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n     * @param  {Object=} options - xScale, yScale to stretch the glyph.\n     * @param  {opentype.Font} if hinting is to be used, the font\n     * @return {opentype.Path}\n     */\n    Glyph.prototype.getPath = function (x, y, fontSize, options, font) {\n        x = x !== undefined ? x : 0;\n        y = y !== undefined ? y : 0;\n        fontSize = fontSize !== undefined ? fontSize : 72;\n        var commands;\n        var hPoints;\n        if (!options) {\n            options = {};\n        }\n        var xScale = options.xScale;\n        var yScale = options.yScale;\n\n        if (options.hinting && font && font.hinting) {\n            // in case of hinting, the hinting engine takes care\n            // of scaling the points (not the path) before hinting.\n            hPoints = this.path && font.hinting.exec(this, fontSize);\n            // in case the hinting engine failed hPoints is undefined\n            // and thus reverts to plain rending\n        }\n\n        if (hPoints) {\n            commands = glyf.getPath(hPoints).commands;\n            x = Math.round(x);\n            y = Math.round(y);\n            // TODO in case of hinting xyScaling is not yet supported\n            xScale = yScale = 1;\n        } else {\n            commands = this.path.commands;\n            var scale = 1 / this.path.unitsPerEm * fontSize;\n            if (xScale === undefined) {\n                xScale = scale;\n            }\n            if (yScale === undefined) {\n                yScale = scale;\n            }\n        }\n\n        var p = new Path();\n        for (var i = 0; i < commands.length; i += 1) {\n            var cmd = commands[i];\n            if (cmd.type === 'M') {\n                p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n            } else if (cmd.type === 'L') {\n                p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n            } else if (cmd.type === 'Q') {\n                p.quadraticCurveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);\n            } else if (cmd.type === 'C') {\n                p.curveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x2 * xScale, y + -cmd.y2 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);\n            } else if (cmd.type === 'Z') {\n                p.closePath();\n            }\n        }\n\n        return p;\n    };\n\n    /**\n     * Split the glyph into contours.\n     * This function is here for backwards compatibility, and to\n     * provide raw access to the TrueType glyph outlines.\n     * @return {Array}\n     */\n    Glyph.prototype.getContours = function () {\n        var this$1 = this;\n\n        if (this.points === undefined) {\n            return [];\n        }\n\n        var contours = [];\n        var currentContour = [];\n        for (var i = 0; i < this.points.length; i += 1) {\n            var pt = this$1.points[i];\n            currentContour.push(pt);\n            if (pt.lastPointOfContour) {\n                contours.push(currentContour);\n                currentContour = [];\n            }\n        }\n\n        check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n        return contours;\n    };\n\n    /**\n     * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n     * @return {Object}\n     */\n    Glyph.prototype.getMetrics = function () {\n        var commands = this.path.commands;\n        var xCoords = [];\n        var yCoords = [];\n        for (var i = 0; i < commands.length; i += 1) {\n            var cmd = commands[i];\n            if (cmd.type !== 'Z') {\n                xCoords.push(cmd.x);\n                yCoords.push(cmd.y);\n            }\n\n            if (cmd.type === 'Q' || cmd.type === 'C') {\n                xCoords.push(cmd.x1);\n                yCoords.push(cmd.y1);\n            }\n\n            if (cmd.type === 'C') {\n                xCoords.push(cmd.x2);\n                yCoords.push(cmd.y2);\n            }\n        }\n\n        var metrics = {\n            xMin: Math.min.apply(null, xCoords),\n            yMin: Math.min.apply(null, yCoords),\n            xMax: Math.max.apply(null, xCoords),\n            yMax: Math.max.apply(null, yCoords),\n            leftSideBearing: this.leftSideBearing\n        };\n\n        if (!isFinite(metrics.xMin)) {\n            metrics.xMin = 0;\n        }\n\n        if (!isFinite(metrics.xMax)) {\n            metrics.xMax = this.advanceWidth;\n        }\n\n        if (!isFinite(metrics.yMin)) {\n            metrics.yMin = 0;\n        }\n\n        if (!isFinite(metrics.yMax)) {\n            metrics.yMax = 0;\n        }\n\n        metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n        return metrics;\n    };\n\n    /**\n     * Draw the glyph on the given context.\n     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n     * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n     * @param  {Object=} options - xScale, yScale to stretch the glyph.\n     */\n    Glyph.prototype.draw = function (ctx, x, y, fontSize, options) {\n        this.getPath(x, y, fontSize, options).draw(ctx);\n    };\n\n    /**\n     * Draw the points of the glyph.\n     * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n     * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n     */\n    Glyph.prototype.drawPoints = function (ctx, x, y, fontSize) {\n        function drawCircles(l, x, y, scale) {\n            var PI_SQ = Math.PI * 2;\n            ctx.beginPath();\n            for (var j = 0; j < l.length; j += 1) {\n                ctx.moveTo(x + l[j].x * scale, y + l[j].y * scale);\n                ctx.arc(x + l[j].x * scale, y + l[j].y * scale, 2, 0, PI_SQ, false);\n            }\n\n            ctx.closePath();\n            ctx.fill();\n        }\n\n        x = x !== undefined ? x : 0;\n        y = y !== undefined ? y : 0;\n        fontSize = fontSize !== undefined ? fontSize : 24;\n        var scale = 1 / this.path.unitsPerEm * fontSize;\n\n        var blueCircles = [];\n        var redCircles = [];\n        var path = this.path;\n        for (var i = 0; i < path.commands.length; i += 1) {\n            var cmd = path.commands[i];\n            if (cmd.x !== undefined) {\n                blueCircles.push({ x: cmd.x, y: -cmd.y });\n            }\n\n            if (cmd.x1 !== undefined) {\n                redCircles.push({ x: cmd.x1, y: -cmd.y1 });\n            }\n\n            if (cmd.x2 !== undefined) {\n                redCircles.push({ x: cmd.x2, y: -cmd.y2 });\n            }\n        }\n\n        ctx.fillStyle = 'blue';\n        drawCircles(blueCircles, x, y, scale);\n        ctx.fillStyle = 'red';\n        drawCircles(redCircles, x, y, scale);\n    };\n\n    /**\n     * Draw lines indicating important font measurements.\n     * Black lines indicate the origin of the coordinate system (point 0,0).\n     * Blue lines indicate the glyph bounding box.\n     * Green line indicates the advance width of the glyph.\n     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n     * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n     */\n    Glyph.prototype.drawMetrics = function (ctx, x, y, fontSize) {\n        var scale;\n        x = x !== undefined ? x : 0;\n        y = y !== undefined ? y : 0;\n        fontSize = fontSize !== undefined ? fontSize : 24;\n        scale = 1 / this.path.unitsPerEm * fontSize;\n        ctx.lineWidth = 1;\n\n        // Draw the origin\n        ctx.strokeStyle = 'black';\n        draw.line(ctx, x, -10000, x, 10000);\n        draw.line(ctx, -10000, y, 10000, y);\n\n        // This code is here due to memory optimization: by not using\n        // defaults in the constructor, we save a notable amount of memory.\n        var xMin = this.xMin || 0;\n        var yMin = this.yMin || 0;\n        var xMax = this.xMax || 0;\n        var yMax = this.yMax || 0;\n        var advanceWidth = this.advanceWidth || 0;\n\n        // Draw the glyph box\n        ctx.strokeStyle = 'blue';\n        draw.line(ctx, x + xMin * scale, -10000, x + xMin * scale, 10000);\n        draw.line(ctx, x + xMax * scale, -10000, x + xMax * scale, 10000);\n        draw.line(ctx, -10000, y + -yMin * scale, 10000, y + -yMin * scale);\n        draw.line(ctx, -10000, y + -yMax * scale, 10000, y + -yMax * scale);\n\n        // Draw the advance width\n        ctx.strokeStyle = 'green';\n        draw.line(ctx, x + advanceWidth * scale, -10000, x + advanceWidth * scale, 10000);\n    };\n\n    // The GlyphSet object\n\n    // Define a property on the glyph that depends on the path being loaded.\n    function defineDependentProperty(glyph, externalName, internalName) {\n        Object.defineProperty(glyph, externalName, {\n            get: function get() {\n                // Request the path property to make sure the path is loaded.\n                glyph.path; // jshint ignore:line\n                return glyph[internalName];\n            },\n            set: function set(newValue) {\n                glyph[internalName] = newValue;\n            },\n            enumerable: true,\n            configurable: true\n        });\n    }\n\n    /**\n     * A GlyphSet represents all glyphs available in the font, but modelled using\n     * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n     * necessary, to keep the memory footprint down.\n     * @exports opentype.GlyphSet\n     * @class\n     * @param {opentype.Font}\n     * @param {Array}\n     */\n    function GlyphSet(font, glyphs) {\n        var this$1 = this;\n\n        this.font = font;\n        this.glyphs = {};\n        if (Array.isArray(glyphs)) {\n            for (var i = 0; i < glyphs.length; i++) {\n                this$1.glyphs[i] = glyphs[i];\n            }\n        }\n\n        this.length = glyphs && glyphs.length || 0;\n    }\n\n    /**\n     * @param  {number} index\n     * @return {opentype.Glyph}\n     */\n    GlyphSet.prototype.get = function (index) {\n        if (typeof this.glyphs[index] === 'function') {\n            this.glyphs[index] = this.glyphs[index]();\n        }\n\n        return this.glyphs[index];\n    };\n\n    /**\n     * @param  {number} index\n     * @param  {Object}\n     */\n    GlyphSet.prototype.push = function (index, loader) {\n        this.glyphs[index] = loader;\n        this.length++;\n    };\n\n    /**\n     * @alias opentype.glyphLoader\n     * @param  {opentype.Font} font\n     * @param  {number} index\n     * @return {opentype.Glyph}\n     */\n    function glyphLoader(font, index) {\n        return new Glyph({ index: index, font: font });\n    }\n\n    /**\n     * Generate a stub glyph that can be filled with all metadata *except*\n     * the \"points\" and \"path\" properties, which must be loaded only once\n     * the glyph's path is actually requested for text shaping.\n     * @alias opentype.ttfGlyphLoader\n     * @param  {opentype.Font} font\n     * @param  {number} index\n     * @param  {Function} parseGlyph\n     * @param  {Object} data\n     * @param  {number} position\n     * @param  {Function} buildPath\n     * @return {opentype.Glyph}\n     */\n    function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n        return function () {\n            var glyph = new Glyph({ index: index, font: font });\n\n            glyph.path = function () {\n                parseGlyph(glyph, data, position);\n                var path = buildPath(font.glyphs, glyph);\n                path.unitsPerEm = font.unitsPerEm;\n                return path;\n            };\n\n            defineDependentProperty(glyph, 'xMin', '_xMin');\n            defineDependentProperty(glyph, 'xMax', '_xMax');\n            defineDependentProperty(glyph, 'yMin', '_yMin');\n            defineDependentProperty(glyph, 'yMax', '_yMax');\n\n            return glyph;\n        };\n    }\n    /**\n     * @alias opentype.cffGlyphLoader\n     * @param  {opentype.Font} font\n     * @param  {number} index\n     * @param  {Function} parseCFFCharstring\n     * @param  {string} charstring\n     * @return {opentype.Glyph}\n     */\n    function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n        return function () {\n            var glyph = new Glyph({ index: index, font: font });\n\n            glyph.path = function () {\n                var path = parseCFFCharstring(font, glyph, charstring);\n                path.unitsPerEm = font.unitsPerEm;\n                return path;\n            };\n\n            return glyph;\n        };\n    }\n\n    var glyphset = { GlyphSet: GlyphSet, glyphLoader: glyphLoader, ttfGlyphLoader: ttfGlyphLoader, cffGlyphLoader: cffGlyphLoader };\n\n    // The `CFF` table contains the glyph outlines in PostScript format.\n    // https://www.microsoft.com/typography/OTSPEC/cff.htm\n    // http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/cff.pdf\n    // http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/type2.pdf\n\n    // Custom equals function that can also check lists.\n    function equals(a, b) {\n        if (a === b) {\n            return true;\n        } else if (Array.isArray(a) && Array.isArray(b)) {\n            if (a.length !== b.length) {\n                return false;\n            }\n\n            for (var i = 0; i < a.length; i += 1) {\n                if (!equals(a[i], b[i])) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Subroutines are encoded using the negative half of the number space.\n    // See type 2 chapter 4.7 \"Subroutine operators\".\n    function calcCFFSubroutineBias(subrs) {\n        var bias;\n        if (subrs.length < 1240) {\n            bias = 107;\n        } else if (subrs.length < 33900) {\n            bias = 1131;\n        } else {\n            bias = 32768;\n        }\n\n        return bias;\n    }\n\n    // Parse a `CFF` INDEX array.\n    // An index array consists of a list of offsets, then a list of objects at those offsets.\n    function parseCFFIndex(data, start, conversionFn) {\n        var offsets = [];\n        var objects = [];\n        var count = parse.getCard16(data, start);\n        var objectOffset;\n        var endOffset;\n        if (count !== 0) {\n            var offsetSize = parse.getByte(data, start + 2);\n            objectOffset = start + (count + 1) * offsetSize + 2;\n            var pos = start + 3;\n            for (var i = 0; i < count + 1; i += 1) {\n                offsets.push(parse.getOffset(data, pos, offsetSize));\n                pos += offsetSize;\n            }\n\n            // The total size of the index array is 4 header bytes + the value of the last offset.\n            endOffset = objectOffset + offsets[count];\n        } else {\n            endOffset = start + 2;\n        }\n\n        for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {\n            var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);\n            if (conversionFn) {\n                value = conversionFn(value);\n            }\n\n            objects.push(value);\n        }\n\n        return { objects: objects, startOffset: start, endOffset: endOffset };\n    }\n\n    // Parse a `CFF` DICT real value.\n    function parseFloatOperand(parser) {\n        var s = '';\n        var eof = 15;\n        var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\n        while (true) {\n            var b = parser.parseByte();\n            var n1 = b >> 4;\n            var n2 = b & 15;\n\n            if (n1 === eof) {\n                break;\n            }\n\n            s += lookup[n1];\n\n            if (n2 === eof) {\n                break;\n            }\n\n            s += lookup[n2];\n        }\n\n        return parseFloat(s);\n    }\n\n    // Parse a `CFF` DICT operand.\n    function parseOperand(parser, b0) {\n        var b1;\n        var b2;\n        var b3;\n        var b4;\n        if (b0 === 28) {\n            b1 = parser.parseByte();\n            b2 = parser.parseByte();\n            return b1 << 8 | b2;\n        }\n\n        if (b0 === 29) {\n            b1 = parser.parseByte();\n            b2 = parser.parseByte();\n            b3 = parser.parseByte();\n            b4 = parser.parseByte();\n            return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n        }\n\n        if (b0 === 30) {\n            return parseFloatOperand(parser);\n        }\n\n        if (b0 >= 32 && b0 <= 246) {\n            return b0 - 139;\n        }\n\n        if (b0 >= 247 && b0 <= 250) {\n            b1 = parser.parseByte();\n            return (b0 - 247) * 256 + b1 + 108;\n        }\n\n        if (b0 >= 251 && b0 <= 254) {\n            b1 = parser.parseByte();\n            return -(b0 - 251) * 256 - b1 - 108;\n        }\n\n        throw new Error('Invalid b0 ' + b0);\n    }\n\n    // Convert the entries returned by `parseDict` to a proper dictionary.\n    // If a value is a list of one, it is unpacked.\n    function entriesToObject(entries) {\n        var o = {};\n        for (var i = 0; i < entries.length; i += 1) {\n            var key = entries[i][0];\n            var values = entries[i][1];\n            var value = void 0;\n            if (values.length === 1) {\n                value = values[0];\n            } else {\n                value = values;\n            }\n\n            if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n                throw new Error('Object ' + o + ' already has key ' + key);\n            }\n\n            o[key] = value;\n        }\n\n        return o;\n    }\n\n    // Parse a `CFF` DICT object.\n    // A dictionary contains key-value pairs in a compact tokenized format.\n    function parseCFFDict(data, start, size) {\n        start = start !== undefined ? start : 0;\n        var parser = new parse.Parser(data, start);\n        var entries = [];\n        var operands = [];\n        size = size !== undefined ? size : data.length;\n\n        while (parser.relativeOffset < size) {\n            var op = parser.parseByte();\n\n            // The first byte for each dict item distinguishes between operator (key) and operand (value).\n            // Values <= 21 are operators.\n            if (op <= 21) {\n                // Two-byte operators have an initial escape byte of 12.\n                if (op === 12) {\n                    op = 1200 + parser.parseByte();\n                }\n\n                entries.push([op, operands]);\n                operands = [];\n            } else {\n                // Since the operands (values) come before the operators (keys), we store all operands in a list\n                // until we encounter an operator.\n                operands.push(parseOperand(parser, op));\n            }\n        }\n\n        return entriesToObject(entries);\n    }\n\n    // Given a String Index (SID), return the value of the string.\n    // Strings below index 392 are standard CFF strings and are not encoded in the font.\n    function getCFFString(strings, index) {\n        if (index <= 390) {\n            index = cffStandardStrings[index];\n        } else {\n            index = strings[index - 391];\n        }\n\n        return index;\n    }\n\n    // Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n    // This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\n    function interpretDict(dict, meta, strings) {\n        var newDict = {};\n        var value;\n\n        // Because we also want to include missing values, we start out from the meta list\n        // and lookup values in the dict.\n        for (var i = 0; i < meta.length; i += 1) {\n            var m = meta[i];\n\n            if (Array.isArray(m.type)) {\n                var values = [];\n                values.length = m.type.length;\n                for (var j = 0; j < m.type.length; j++) {\n                    value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;\n                    if (value === undefined) {\n                        value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;\n                    }\n                    if (m.type[j] === 'SID') {\n                        value = getCFFString(strings, value);\n                    }\n                    values[j] = value;\n                }\n                newDict[m.name] = values;\n            } else {\n                value = dict[m.op];\n                if (value === undefined) {\n                    value = m.value !== undefined ? m.value : null;\n                }\n\n                if (m.type === 'SID') {\n                    value = getCFFString(strings, value);\n                }\n                newDict[m.name] = value;\n            }\n        }\n\n        return newDict;\n    }\n\n    // Parse the CFF header.\n    function parseCFFHeader(data, start) {\n        var header = {};\n        header.formatMajor = parse.getCard8(data, start);\n        header.formatMinor = parse.getCard8(data, start + 1);\n        header.size = parse.getCard8(data, start + 2);\n        header.offsetSize = parse.getCard8(data, start + 3);\n        header.startOffset = start;\n        header.endOffset = start + 4;\n        return header;\n    }\n\n    var TOP_DICT_META = [{ name: 'version', op: 0, type: 'SID' }, { name: 'notice', op: 1, type: 'SID' }, { name: 'copyright', op: 1200, type: 'SID' }, { name: 'fullName', op: 2, type: 'SID' }, { name: 'familyName', op: 3, type: 'SID' }, { name: 'weight', op: 4, type: 'SID' }, { name: 'isFixedPitch', op: 1201, type: 'number', value: 0 }, { name: 'italicAngle', op: 1202, type: 'number', value: 0 }, { name: 'underlinePosition', op: 1203, type: 'number', value: -100 }, { name: 'underlineThickness', op: 1204, type: 'number', value: 50 }, { name: 'paintType', op: 1205, type: 'number', value: 0 }, { name: 'charstringType', op: 1206, type: 'number', value: 2 }, {\n        name: 'fontMatrix',\n        op: 1207,\n        type: ['real', 'real', 'real', 'real', 'real', 'real'],\n        value: [0.001, 0, 0, 0.001, 0, 0]\n    }, { name: 'uniqueId', op: 13, type: 'number' }, { name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0] }, { name: 'strokeWidth', op: 1208, type: 'number', value: 0 }, { name: 'xuid', op: 14, type: [], value: null }, { name: 'charset', op: 15, type: 'offset', value: 0 }, { name: 'encoding', op: 16, type: 'offset', value: 0 }, { name: 'charStrings', op: 17, type: 'offset', value: 0 }, { name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0] }, { name: 'ros', op: 1230, type: ['SID', 'SID', 'number'] }, { name: 'cidFontVersion', op: 1231, type: 'number', value: 0 }, { name: 'cidFontRevision', op: 1232, type: 'number', value: 0 }, { name: 'cidFontType', op: 1233, type: 'number', value: 0 }, { name: 'cidCount', op: 1234, type: 'number', value: 8720 }, { name: 'uidBase', op: 1235, type: 'number' }, { name: 'fdArray', op: 1236, type: 'offset' }, { name: 'fdSelect', op: 1237, type: 'offset' }, { name: 'fontName', op: 1238, type: 'SID' }];\n\n    var PRIVATE_DICT_META = [{ name: 'subrs', op: 19, type: 'offset', value: 0 }, { name: 'defaultWidthX', op: 20, type: 'number', value: 0 }, { name: 'nominalWidthX', op: 21, type: 'number', value: 0 }];\n\n    // Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n    // The top dictionary contains the essential metadata for the font, together with the private dictionary.\n    function parseCFFTopDict(data, strings) {\n        var dict = parseCFFDict(data, 0, data.byteLength);\n        return interpretDict(dict, TOP_DICT_META, strings);\n    }\n\n    // Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\n    function parseCFFPrivateDict(data, start, size, strings) {\n        var dict = parseCFFDict(data, start, size);\n        return interpretDict(dict, PRIVATE_DICT_META, strings);\n    }\n\n    // Returns a list of \"Top DICT\"s found using an INDEX list.\n    // Used to read both the usual high-level Top DICTs and also the FDArray\n    // discovered inside CID-keyed fonts.  When a Top DICT has a reference to\n    // a Private DICT that is read and saved into the Top DICT.\n    //\n    // In addition to the expected/optional values as outlined in TOP_DICT_META\n    // the following values might be saved into the Top DICT.\n    //\n    //    _subrs []        array of local CFF subroutines from Private DICT\n    //    _subrsBias       bias value computed from number of subroutines\n    //                      (see calcCFFSubroutineBias() and parseCFFCharstring())\n    //    _defaultWidthX   default widths for CFF characters\n    //    _nominalWidthX   bias added to width embedded within glyph description\n    //\n    //    _privateDict     saved copy of parsed Private DICT from Top DICT\n    function gatherCFFTopDicts(data, start, cffIndex, strings) {\n        var topDictArray = [];\n        for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {\n            var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);\n            var topDict = parseCFFTopDict(topDictData, strings);\n            topDict._subrs = [];\n            topDict._subrsBias = 0;\n            var privateSize = topDict.private[0];\n            var privateOffset = topDict.private[1];\n            if (privateSize !== 0 && privateOffset !== 0) {\n                var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);\n                topDict._defaultWidthX = privateDict.defaultWidthX;\n                topDict._nominalWidthX = privateDict.nominalWidthX;\n                if (privateDict.subrs !== 0) {\n                    var subrOffset = privateOffset + privateDict.subrs;\n                    var subrIndex = parseCFFIndex(data, subrOffset + start);\n                    topDict._subrs = subrIndex.objects;\n                    topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n                }\n                topDict._privateDict = privateDict;\n            }\n            topDictArray.push(topDict);\n        }\n        return topDictArray;\n    }\n\n    // Parse the CFF charset table, which contains internal names for all the glyphs.\n    // This function will return a list of glyph names.\n    // See Adobe TN #5176 chapter 13, \"Charsets\".\n    function parseCFFCharset(data, start, nGlyphs, strings) {\n        var sid;\n        var count;\n        var parser = new parse.Parser(data, start);\n\n        // The .notdef glyph is not included, so subtract 1.\n        nGlyphs -= 1;\n        var charset = ['.notdef'];\n\n        var format = parser.parseCard8();\n        if (format === 0) {\n            for (var i = 0; i < nGlyphs; i += 1) {\n                sid = parser.parseSID();\n                charset.push(getCFFString(strings, sid));\n            }\n        } else if (format === 1) {\n            while (charset.length <= nGlyphs) {\n                sid = parser.parseSID();\n                count = parser.parseCard8();\n                for (var i$1 = 0; i$1 <= count; i$1 += 1) {\n                    charset.push(getCFFString(strings, sid));\n                    sid += 1;\n                }\n            }\n        } else if (format === 2) {\n            while (charset.length <= nGlyphs) {\n                sid = parser.parseSID();\n                count = parser.parseCard16();\n                for (var i$2 = 0; i$2 <= count; i$2 += 1) {\n                    charset.push(getCFFString(strings, sid));\n                    sid += 1;\n                }\n            }\n        } else {\n            throw new Error('Unknown charset format ' + format);\n        }\n\n        return charset;\n    }\n\n    // Parse the CFF encoding data. Only one encoding can be specified per font.\n    // See Adobe TN #5176 chapter 12, \"Encodings\".\n    function parseCFFEncoding(data, start, charset) {\n        var code;\n        var enc = {};\n        var parser = new parse.Parser(data, start);\n        var format = parser.parseCard8();\n        if (format === 0) {\n            var nCodes = parser.parseCard8();\n            for (var i = 0; i < nCodes; i += 1) {\n                code = parser.parseCard8();\n                enc[code] = i;\n            }\n        } else if (format === 1) {\n            var nRanges = parser.parseCard8();\n            code = 1;\n            for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {\n                var first = parser.parseCard8();\n                var nLeft = parser.parseCard8();\n                for (var j = first; j <= first + nLeft; j += 1) {\n                    enc[j] = code;\n                    code += 1;\n                }\n            }\n        } else {\n            throw new Error('Unknown encoding format ' + format);\n        }\n\n        return new CffEncoding(enc, charset);\n    }\n\n    // Take in charstring code and return a Glyph object.\n    // The encoding is described in the Type 2 Charstring Format\n    // https://www.microsoft.com/typography/OTSPEC/charstr2.htm\n    function parseCFFCharstring(font, glyph, code) {\n        var c1x;\n        var c1y;\n        var c2x;\n        var c2y;\n        var p = new Path();\n        var stack = [];\n        var nStems = 0;\n        var haveWidth = false;\n        var open = false;\n        var x = 0;\n        var y = 0;\n        var subrs;\n        var subrsBias;\n        var defaultWidthX;\n        var nominalWidthX;\n        if (font.isCIDFont) {\n            var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n            var fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n            subrs = fdDict._subrs;\n            subrsBias = fdDict._subrsBias;\n            defaultWidthX = fdDict._defaultWidthX;\n            nominalWidthX = fdDict._nominalWidthX;\n        } else {\n            subrs = font.tables.cff.topDict._subrs;\n            subrsBias = font.tables.cff.topDict._subrsBias;\n            defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n            nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n        }\n        var width = defaultWidthX;\n\n        function newContour(x, y) {\n            if (open) {\n                p.closePath();\n            }\n\n            p.moveTo(x, y);\n            open = true;\n        }\n\n        function parseStems() {\n            var hasWidthArg;\n\n            // The number of stem operators on the stack is always even.\n            // If the value is uneven, that means a width is specified.\n            hasWidthArg = stack.length % 2 !== 0;\n            if (hasWidthArg && !haveWidth) {\n                width = stack.shift() + nominalWidthX;\n            }\n\n            nStems += stack.length >> 1;\n            stack.length = 0;\n            haveWidth = true;\n        }\n\n        function parse$$1(code) {\n            var b1;\n            var b2;\n            var b3;\n            var b4;\n            var codeIndex;\n            var subrCode;\n            var jpx;\n            var jpy;\n            var c3x;\n            var c3y;\n            var c4x;\n            var c4y;\n\n            var i = 0;\n            while (i < code.length) {\n                var v = code[i];\n                i += 1;\n                switch (v) {\n                    case 1:\n                        // hstem\n                        parseStems();\n                        break;\n                    case 3:\n                        // vstem\n                        parseStems();\n                        break;\n                    case 4:\n                        // vmoveto\n                        if (stack.length > 1 && !haveWidth) {\n                            width = stack.shift() + nominalWidthX;\n                            haveWidth = true;\n                        }\n\n                        y += stack.pop();\n                        newContour(x, y);\n                        break;\n                    case 5:\n                        // rlineto\n                        while (stack.length > 0) {\n                            x += stack.shift();\n                            y += stack.shift();\n                            p.lineTo(x, y);\n                        }\n\n                        break;\n                    case 6:\n                        // hlineto\n                        while (stack.length > 0) {\n                            x += stack.shift();\n                            p.lineTo(x, y);\n                            if (stack.length === 0) {\n                                break;\n                            }\n\n                            y += stack.shift();\n                            p.lineTo(x, y);\n                        }\n\n                        break;\n                    case 7:\n                        // vlineto\n                        while (stack.length > 0) {\n                            y += stack.shift();\n                            p.lineTo(x, y);\n                            if (stack.length === 0) {\n                                break;\n                            }\n\n                            x += stack.shift();\n                            p.lineTo(x, y);\n                        }\n\n                        break;\n                    case 8:\n                        // rrcurveto\n                        while (stack.length > 0) {\n                            c1x = x + stack.shift();\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            x = c2x + stack.shift();\n                            y = c2y + stack.shift();\n                            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                    case 10:\n                        // callsubr\n                        codeIndex = stack.pop() + subrsBias;\n                        subrCode = subrs[codeIndex];\n                        if (subrCode) {\n                            parse$$1(subrCode);\n                        }\n\n                        break;\n                    case 11:\n                        // return\n                        return;\n                    case 12:\n                        // flex operators\n                        v = code[i];\n                        i += 1;\n                        switch (v) {\n                            case 35:\n                                // flex\n                                // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n                                c1x = x + stack.shift(); // dx1\n                                c1y = y + stack.shift(); // dy1\n                                c2x = c1x + stack.shift(); // dx2\n                                c2y = c1y + stack.shift(); // dy2\n                                jpx = c2x + stack.shift(); // dx3\n                                jpy = c2y + stack.shift(); // dy3\n                                c3x = jpx + stack.shift(); // dx4\n                                c3y = jpy + stack.shift(); // dy4\n                                c4x = c3x + stack.shift(); // dx5\n                                c4y = c3y + stack.shift(); // dy5\n                                x = c4x + stack.shift(); // dx6\n                                y = c4y + stack.shift(); // dy6\n                                stack.shift(); // flex depth\n                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                                p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                                break;\n                            case 34:\n                                // hflex\n                                // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n                                c1x = x + stack.shift(); // dx1\n                                c1y = y; // dy1\n                                c2x = c1x + stack.shift(); // dx2\n                                c2y = c1y + stack.shift(); // dy2\n                                jpx = c2x + stack.shift(); // dx3\n                                jpy = c2y; // dy3\n                                c3x = jpx + stack.shift(); // dx4\n                                c3y = c2y; // dy4\n                                c4x = c3x + stack.shift(); // dx5\n                                c4y = y; // dy5\n                                x = c4x + stack.shift(); // dx6\n                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                                p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                                break;\n                            case 36:\n                                // hflex1\n                                // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n                                c1x = x + stack.shift(); // dx1\n                                c1y = y + stack.shift(); // dy1\n                                c2x = c1x + stack.shift(); // dx2\n                                c2y = c1y + stack.shift(); // dy2\n                                jpx = c2x + stack.shift(); // dx3\n                                jpy = c2y; // dy3\n                                c3x = jpx + stack.shift(); // dx4\n                                c3y = c2y; // dy4\n                                c4x = c3x + stack.shift(); // dx5\n                                c4y = c3y + stack.shift(); // dy5\n                                x = c4x + stack.shift(); // dx6\n                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                                p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                                break;\n                            case 37:\n                                // flex1\n                                // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n                                c1x = x + stack.shift(); // dx1\n                                c1y = y + stack.shift(); // dy1\n                                c2x = c1x + stack.shift(); // dx2\n                                c2y = c1y + stack.shift(); // dy2\n                                jpx = c2x + stack.shift(); // dx3\n                                jpy = c2y + stack.shift(); // dy3\n                                c3x = jpx + stack.shift(); // dx4\n                                c3y = jpy + stack.shift(); // dy4\n                                c4x = c3x + stack.shift(); // dx5\n                                c4y = c3y + stack.shift(); // dy5\n                                if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                                    x = c4x + stack.shift();\n                                } else {\n                                    y = c4y + stack.shift();\n                                }\n\n                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                                p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                                break;\n                            default:\n                                console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);\n                                stack.length = 0;\n                        }\n                        break;\n                    case 14:\n                        // endchar\n                        if (stack.length > 0 && !haveWidth) {\n                            width = stack.shift() + nominalWidthX;\n                            haveWidth = true;\n                        }\n\n                        if (open) {\n                            p.closePath();\n                            open = false;\n                        }\n\n                        break;\n                    case 18:\n                        // hstemhm\n                        parseStems();\n                        break;\n                    case 19: // hintmask\n                    case 20:\n                        // cntrmask\n                        parseStems();\n                        i += nStems + 7 >> 3;\n                        break;\n                    case 21:\n                        // rmoveto\n                        if (stack.length > 2 && !haveWidth) {\n                            width = stack.shift() + nominalWidthX;\n                            haveWidth = true;\n                        }\n\n                        y += stack.pop();\n                        x += stack.pop();\n                        newContour(x, y);\n                        break;\n                    case 22:\n                        // hmoveto\n                        if (stack.length > 1 && !haveWidth) {\n                            width = stack.shift() + nominalWidthX;\n                            haveWidth = true;\n                        }\n\n                        x += stack.pop();\n                        newContour(x, y);\n                        break;\n                    case 23:\n                        // vstemhm\n                        parseStems();\n                        break;\n                    case 24:\n                        // rcurveline\n                        while (stack.length > 2) {\n                            c1x = x + stack.shift();\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            x = c2x + stack.shift();\n                            y = c2y + stack.shift();\n                            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                        break;\n                    case 25:\n                        // rlinecurve\n                        while (stack.length > 6) {\n                            x += stack.shift();\n                            y += stack.shift();\n                            p.lineTo(x, y);\n                        }\n\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        break;\n                    case 26:\n                        // vvcurveto\n                        if (stack.length % 2) {\n                            x += stack.shift();\n                        }\n\n                        while (stack.length > 0) {\n                            c1x = x;\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            x = c2x;\n                            y = c2y + stack.shift();\n                            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                    case 27:\n                        // hhcurveto\n                        if (stack.length % 2) {\n                            y += stack.shift();\n                        }\n\n                        while (stack.length > 0) {\n                            c1x = x + stack.shift();\n                            c1y = y;\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            x = c2x + stack.shift();\n                            y = c2y;\n                            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                    case 28:\n                        // shortint\n                        b1 = code[i];\n                        b2 = code[i + 1];\n                        stack.push((b1 << 24 | b2 << 16) >> 16);\n                        i += 2;\n                        break;\n                    case 29:\n                        // callgsubr\n                        codeIndex = stack.pop() + font.gsubrsBias;\n                        subrCode = font.gsubrs[codeIndex];\n                        if (subrCode) {\n                            parse$$1(subrCode);\n                        }\n\n                        break;\n                    case 30:\n                        // vhcurveto\n                        while (stack.length > 0) {\n                            c1x = x;\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            x = c2x + stack.shift();\n                            y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                            if (stack.length === 0) {\n                                break;\n                            }\n\n                            c1x = x + stack.shift();\n                            c1y = y;\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            y = c2y + stack.shift();\n                            x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                    case 31:\n                        // hvcurveto\n                        while (stack.length > 0) {\n                            c1x = x + stack.shift();\n                            c1y = y;\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            y = c2y + stack.shift();\n                            x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                            if (stack.length === 0) {\n                                break;\n                            }\n\n                            c1x = x;\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            x = c2x + stack.shift();\n                            y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                    default:\n                        if (v < 32) {\n                            console.log('Glyph ' + glyph.index + ': unknown operator ' + v);\n                        } else if (v < 247) {\n                            stack.push(v - 139);\n                        } else if (v < 251) {\n                            b1 = code[i];\n                            i += 1;\n                            stack.push((v - 247) * 256 + b1 + 108);\n                        } else if (v < 255) {\n                            b1 = code[i];\n                            i += 1;\n                            stack.push(-(v - 251) * 256 - b1 - 108);\n                        } else {\n                            b1 = code[i];\n                            b2 = code[i + 1];\n                            b3 = code[i + 2];\n                            b4 = code[i + 3];\n                            i += 4;\n                            stack.push((b1 << 24 | b2 << 16 | b3 << 8 | b4) / 65536);\n                        }\n                }\n            }\n        }\n\n        parse$$1(code);\n\n        glyph.advanceWidth = width;\n        return p;\n    }\n\n    function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n        var fdSelect = [];\n        var fdIndex;\n        var parser = new parse.Parser(data, start);\n        var format = parser.parseCard8();\n        if (format === 0) {\n            // Simple list of nGlyphs elements\n            for (var iGid = 0; iGid < nGlyphs; iGid++) {\n                fdIndex = parser.parseCard8();\n                if (fdIndex >= fdArrayCount) {\n                    throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n                }\n                fdSelect.push(fdIndex);\n            }\n        } else if (format === 3) {\n            // Ranges\n            var nRanges = parser.parseCard16();\n            var first = parser.parseCard16();\n            if (first !== 0) {\n                throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);\n            }\n            var next;\n            for (var iRange = 0; iRange < nRanges; iRange++) {\n                fdIndex = parser.parseCard8();\n                next = parser.parseCard16();\n                if (fdIndex >= fdArrayCount) {\n                    throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n                }\n                if (next > nGlyphs) {\n                    throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);\n                }\n                for (; first < next; first++) {\n                    fdSelect.push(fdIndex);\n                }\n                first = next;\n            }\n            if (next !== nGlyphs) {\n                throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);\n            }\n        } else {\n            throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);\n        }\n        return fdSelect;\n    }\n\n    // Parse the `CFF` table, which contains the glyph outlines in PostScript format.\n    function parseCFFTable(data, start, font) {\n        font.tables.cff = {};\n        var header = parseCFFHeader(data, start);\n        var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);\n        var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n        var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);\n        var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n        font.gsubrs = globalSubrIndex.objects;\n        font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\n        var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);\n        if (topDictArray.length !== 1) {\n            throw new Error('CFF table has too many fonts in \\'FontSet\\' - count of fonts NameIndex.length = ' + topDictArray.length);\n        }\n\n        var topDict = topDictArray[0];\n        font.tables.cff.topDict = topDict;\n\n        if (topDict._privateDict) {\n            font.defaultWidthX = topDict._privateDict.defaultWidthX;\n            font.nominalWidthX = topDict._privateDict.nominalWidthX;\n        }\n\n        if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {\n            font.isCIDFont = true;\n        }\n\n        if (font.isCIDFont) {\n            var fdArrayOffset = topDict.fdArray;\n            var fdSelectOffset = topDict.fdSelect;\n            if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n                throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');\n            }\n            fdArrayOffset += start;\n            var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n            var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);\n            topDict._fdArray = fdArray;\n            fdSelectOffset += start;\n            topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);\n        }\n\n        var privateDictOffset = start + topDict.private[1];\n        var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);\n        font.defaultWidthX = privateDict.defaultWidthX;\n        font.nominalWidthX = privateDict.nominalWidthX;\n\n        if (privateDict.subrs !== 0) {\n            var subrOffset = privateDictOffset + privateDict.subrs;\n            var subrIndex = parseCFFIndex(data, subrOffset);\n            font.subrs = subrIndex.objects;\n            font.subrsBias = calcCFFSubroutineBias(font.subrs);\n        } else {\n            font.subrs = [];\n            font.subrsBias = 0;\n        }\n\n        // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n        var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n        font.nGlyphs = charStringsIndex.objects.length;\n\n        var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);\n        if (topDict.encoding === 0) {\n            // Standard encoding\n            font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);\n        } else if (topDict.encoding === 1) {\n            // Expert encoding\n            font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);\n        } else {\n            font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);\n        }\n\n        // Prefer the CMAP encoding to the CFF encoding.\n        font.encoding = font.encoding || font.cffEncoding;\n\n        font.glyphs = new glyphset.GlyphSet(font);\n        for (var i = 0; i < font.nGlyphs; i += 1) {\n            var charString = charStringsIndex.objects[i];\n            font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));\n        }\n    }\n\n    // Convert a string to a String ID (SID).\n    // The list of strings is modified in place.\n    function encodeString(s, strings) {\n        var sid;\n\n        // Is the string in the CFF standard strings?\n        var i = cffStandardStrings.indexOf(s);\n        if (i >= 0) {\n            sid = i;\n        }\n\n        // Is the string already in the string index?\n        i = strings.indexOf(s);\n        if (i >= 0) {\n            sid = i + cffStandardStrings.length;\n        } else {\n            sid = cffStandardStrings.length + strings.length;\n            strings.push(s);\n        }\n\n        return sid;\n    }\n\n    function makeHeader() {\n        return new table.Record('Header', [{ name: 'major', type: 'Card8', value: 1 }, { name: 'minor', type: 'Card8', value: 0 }, { name: 'hdrSize', type: 'Card8', value: 4 }, { name: 'major', type: 'Card8', value: 1 }]);\n    }\n\n    function makeNameIndex(fontNames) {\n        var t = new table.Record('Name INDEX', [{ name: 'names', type: 'INDEX', value: [] }]);\n        t.names = [];\n        for (var i = 0; i < fontNames.length; i += 1) {\n            t.names.push({ name: 'name_' + i, type: 'NAME', value: fontNames[i] });\n        }\n\n        return t;\n    }\n\n    // Given a dictionary's metadata, create a DICT structure.\n    function makeDict(meta, attrs, strings) {\n        var m = {};\n        for (var i = 0; i < meta.length; i += 1) {\n            var entry = meta[i];\n            var value = attrs[entry.name];\n            if (value !== undefined && !equals(value, entry.value)) {\n                if (entry.type === 'SID') {\n                    value = encodeString(value, strings);\n                }\n\n                m[entry.op] = { name: entry.name, type: entry.type, value: value };\n            }\n        }\n\n        return m;\n    }\n\n    // The Top DICT houses the global font attributes.\n    function makeTopDict(attrs, strings) {\n        var t = new table.Record('Top DICT', [{ name: 'dict', type: 'DICT', value: {} }]);\n        t.dict = makeDict(TOP_DICT_META, attrs, strings);\n        return t;\n    }\n\n    function makeTopDictIndex(topDict) {\n        var t = new table.Record('Top DICT INDEX', [{ name: 'topDicts', type: 'INDEX', value: [] }]);\n        t.topDicts = [{ name: 'topDict_0', type: 'TABLE', value: topDict }];\n        return t;\n    }\n\n    function makeStringIndex(strings) {\n        var t = new table.Record('String INDEX', [{ name: 'strings', type: 'INDEX', value: [] }]);\n        t.strings = [];\n        for (var i = 0; i < strings.length; i += 1) {\n            t.strings.push({ name: 'string_' + i, type: 'STRING', value: strings[i] });\n        }\n\n        return t;\n    }\n\n    function makeGlobalSubrIndex() {\n        // Currently we don't use subroutines.\n        return new table.Record('Global Subr INDEX', [{ name: 'subrs', type: 'INDEX', value: [] }]);\n    }\n\n    function makeCharsets(glyphNames, strings) {\n        var t = new table.Record('Charsets', [{ name: 'format', type: 'Card8', value: 0 }]);\n        for (var i = 0; i < glyphNames.length; i += 1) {\n            var glyphName = glyphNames[i];\n            var glyphSID = encodeString(glyphName, strings);\n            t.fields.push({ name: 'glyph_' + i, type: 'SID', value: glyphSID });\n        }\n\n        return t;\n    }\n\n    function glyphToOps(glyph) {\n        var ops = [];\n        var path = glyph.path;\n        ops.push({ name: 'width', type: 'NUMBER', value: glyph.advanceWidth });\n        var x = 0;\n        var y = 0;\n        for (var i = 0; i < path.commands.length; i += 1) {\n            var dx = void 0;\n            var dy = void 0;\n            var cmd = path.commands[i];\n            if (cmd.type === 'Q') {\n                // CFF only supports bézier curves, so convert the quad to a bézier.\n                var _13 = 1 / 3;\n                var _23 = 2 / 3;\n\n                // We're going to create a new command so we don't change the original path.\n                cmd = {\n                    type: 'C',\n                    x: cmd.x,\n                    y: cmd.y,\n                    x1: _13 * x + _23 * cmd.x1,\n                    y1: _13 * y + _23 * cmd.y1,\n                    x2: _13 * cmd.x + _23 * cmd.x1,\n                    y2: _13 * cmd.y + _23 * cmd.y1\n                };\n            }\n\n            if (cmd.type === 'M') {\n                dx = Math.round(cmd.x - x);\n                dy = Math.round(cmd.y - y);\n                ops.push({ name: 'dx', type: 'NUMBER', value: dx });\n                ops.push({ name: 'dy', type: 'NUMBER', value: dy });\n                ops.push({ name: 'rmoveto', type: 'OP', value: 21 });\n                x = Math.round(cmd.x);\n                y = Math.round(cmd.y);\n            } else if (cmd.type === 'L') {\n                dx = Math.round(cmd.x - x);\n                dy = Math.round(cmd.y - y);\n                ops.push({ name: 'dx', type: 'NUMBER', value: dx });\n                ops.push({ name: 'dy', type: 'NUMBER', value: dy });\n                ops.push({ name: 'rlineto', type: 'OP', value: 5 });\n                x = Math.round(cmd.x);\n                y = Math.round(cmd.y);\n            } else if (cmd.type === 'C') {\n                var dx1 = Math.round(cmd.x1 - x);\n                var dy1 = Math.round(cmd.y1 - y);\n                var dx2 = Math.round(cmd.x2 - cmd.x1);\n                var dy2 = Math.round(cmd.y2 - cmd.y1);\n                dx = Math.round(cmd.x - cmd.x2);\n                dy = Math.round(cmd.y - cmd.y2);\n                ops.push({ name: 'dx1', type: 'NUMBER', value: dx1 });\n                ops.push({ name: 'dy1', type: 'NUMBER', value: dy1 });\n                ops.push({ name: 'dx2', type: 'NUMBER', value: dx2 });\n                ops.push({ name: 'dy2', type: 'NUMBER', value: dy2 });\n                ops.push({ name: 'dx', type: 'NUMBER', value: dx });\n                ops.push({ name: 'dy', type: 'NUMBER', value: dy });\n                ops.push({ name: 'rrcurveto', type: 'OP', value: 8 });\n                x = Math.round(cmd.x);\n                y = Math.round(cmd.y);\n            }\n\n            // Contours are closed automatically.\n        }\n\n        ops.push({ name: 'endchar', type: 'OP', value: 14 });\n        return ops;\n    }\n\n    function makeCharStringsIndex(glyphs) {\n        var t = new table.Record('CharStrings INDEX', [{ name: 'charStrings', type: 'INDEX', value: [] }]);\n\n        for (var i = 0; i < glyphs.length; i += 1) {\n            var glyph = glyphs.get(i);\n            var ops = glyphToOps(glyph);\n            t.charStrings.push({ name: glyph.name, type: 'CHARSTRING', value: ops });\n        }\n\n        return t;\n    }\n\n    function makePrivateDict(attrs, strings) {\n        var t = new table.Record('Private DICT', [{ name: 'dict', type: 'DICT', value: {} }]);\n        t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);\n        return t;\n    }\n\n    function makeCFFTable(glyphs, options) {\n        var t = new table.Table('CFF ', [{ name: 'header', type: 'RECORD' }, { name: 'nameIndex', type: 'RECORD' }, { name: 'topDictIndex', type: 'RECORD' }, { name: 'stringIndex', type: 'RECORD' }, { name: 'globalSubrIndex', type: 'RECORD' }, { name: 'charsets', type: 'RECORD' }, { name: 'charStringsIndex', type: 'RECORD' }, { name: 'privateDict', type: 'RECORD' }]);\n\n        var fontScale = 1 / options.unitsPerEm;\n        // We use non-zero values for the offsets so that the DICT encodes them.\n        // This is important because the size of the Top DICT plays a role in offset calculation,\n        // and the size shouldn't change after we've written correct offsets.\n        var attrs = {\n            version: options.version,\n            fullName: options.fullName,\n            familyName: options.familyName,\n            weight: options.weightName,\n            fontBBox: options.fontBBox || [0, 0, 0, 0],\n            fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],\n            charset: 999,\n            encoding: 0,\n            charStrings: 999,\n            private: [0, 999]\n        };\n\n        var privateAttrs = {};\n\n        var glyphNames = [];\n        var glyph;\n\n        // Skip first glyph (.notdef)\n        for (var i = 1; i < glyphs.length; i += 1) {\n            glyph = glyphs.get(i);\n            glyphNames.push(glyph.name);\n        }\n\n        var strings = [];\n\n        t.header = makeHeader();\n        t.nameIndex = makeNameIndex([options.postScriptName]);\n        var topDict = makeTopDict(attrs, strings);\n        t.topDictIndex = makeTopDictIndex(topDict);\n        t.globalSubrIndex = makeGlobalSubrIndex();\n        t.charsets = makeCharsets(glyphNames, strings);\n        t.charStringsIndex = makeCharStringsIndex(glyphs);\n        t.privateDict = makePrivateDict(privateAttrs, strings);\n\n        // Needs to come at the end, to encode all custom strings used in the font.\n        t.stringIndex = makeStringIndex(strings);\n\n        var startOffset = t.header.sizeOf() + t.nameIndex.sizeOf() + t.topDictIndex.sizeOf() + t.stringIndex.sizeOf() + t.globalSubrIndex.sizeOf();\n        attrs.charset = startOffset;\n\n        // We use the CFF standard encoding; proper encoding will be handled in cmap.\n        attrs.encoding = 0;\n        attrs.charStrings = attrs.charset + t.charsets.sizeOf();\n        attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();\n\n        // Recreate the Top DICT INDEX with the correct offsets.\n        topDict = makeTopDict(attrs, strings);\n        t.topDictIndex = makeTopDictIndex(topDict);\n\n        return t;\n    }\n\n    var cff = { parse: parseCFFTable, make: makeCFFTable };\n\n    // The `head` table contains global information about the font.\n    // https://www.microsoft.com/typography/OTSPEC/head.htm\n\n    // Parse the header `head` table\n    function parseHeadTable(data, start) {\n        var head = {};\n        var p = new parse.Parser(data, start);\n        head.version = p.parseVersion();\n        head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n        head.checkSumAdjustment = p.parseULong();\n        head.magicNumber = p.parseULong();\n        check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');\n        head.flags = p.parseUShort();\n        head.unitsPerEm = p.parseUShort();\n        head.created = p.parseLongDateTime();\n        head.modified = p.parseLongDateTime();\n        head.xMin = p.parseShort();\n        head.yMin = p.parseShort();\n        head.xMax = p.parseShort();\n        head.yMax = p.parseShort();\n        head.macStyle = p.parseUShort();\n        head.lowestRecPPEM = p.parseUShort();\n        head.fontDirectionHint = p.parseShort();\n        head.indexToLocFormat = p.parseShort();\n        head.glyphDataFormat = p.parseShort();\n        return head;\n    }\n\n    function makeHeadTable(options) {\n        // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970\n        var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;\n        var createdTimestamp = timestamp;\n\n        if (options.createdTimestamp) {\n            createdTimestamp = options.createdTimestamp + 2082844800;\n        }\n\n        return new table.Table('head', [{ name: 'version', type: 'FIXED', value: 0x00010000 }, { name: 'fontRevision', type: 'FIXED', value: 0x00010000 }, { name: 'checkSumAdjustment', type: 'ULONG', value: 0 }, { name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5 }, { name: 'flags', type: 'USHORT', value: 0 }, { name: 'unitsPerEm', type: 'USHORT', value: 1000 }, { name: 'created', type: 'LONGDATETIME', value: createdTimestamp }, { name: 'modified', type: 'LONGDATETIME', value: timestamp }, { name: 'xMin', type: 'SHORT', value: 0 }, { name: 'yMin', type: 'SHORT', value: 0 }, { name: 'xMax', type: 'SHORT', value: 0 }, { name: 'yMax', type: 'SHORT', value: 0 }, { name: 'macStyle', type: 'USHORT', value: 0 }, { name: 'lowestRecPPEM', type: 'USHORT', value: 0 }, { name: 'fontDirectionHint', type: 'SHORT', value: 2 }, { name: 'indexToLocFormat', type: 'SHORT', value: 0 }, { name: 'glyphDataFormat', type: 'SHORT', value: 0 }], options);\n    }\n\n    var head = { parse: parseHeadTable, make: makeHeadTable };\n\n    // The `hhea` table contains information for horizontal layout.\n    // https://www.microsoft.com/typography/OTSPEC/hhea.htm\n\n    // Parse the horizontal header `hhea` table\n    function parseHheaTable(data, start) {\n        var hhea = {};\n        var p = new parse.Parser(data, start);\n        hhea.version = p.parseVersion();\n        hhea.ascender = p.parseShort();\n        hhea.descender = p.parseShort();\n        hhea.lineGap = p.parseShort();\n        hhea.advanceWidthMax = p.parseUShort();\n        hhea.minLeftSideBearing = p.parseShort();\n        hhea.minRightSideBearing = p.parseShort();\n        hhea.xMaxExtent = p.parseShort();\n        hhea.caretSlopeRise = p.parseShort();\n        hhea.caretSlopeRun = p.parseShort();\n        hhea.caretOffset = p.parseShort();\n        p.relativeOffset += 8;\n        hhea.metricDataFormat = p.parseShort();\n        hhea.numberOfHMetrics = p.parseUShort();\n        return hhea;\n    }\n\n    function makeHheaTable(options) {\n        return new table.Table('hhea', [{ name: 'version', type: 'FIXED', value: 0x00010000 }, { name: 'ascender', type: 'FWORD', value: 0 }, { name: 'descender', type: 'FWORD', value: 0 }, { name: 'lineGap', type: 'FWORD', value: 0 }, { name: 'advanceWidthMax', type: 'UFWORD', value: 0 }, { name: 'minLeftSideBearing', type: 'FWORD', value: 0 }, { name: 'minRightSideBearing', type: 'FWORD', value: 0 }, { name: 'xMaxExtent', type: 'FWORD', value: 0 }, { name: 'caretSlopeRise', type: 'SHORT', value: 1 }, { name: 'caretSlopeRun', type: 'SHORT', value: 0 }, { name: 'caretOffset', type: 'SHORT', value: 0 }, { name: 'reserved1', type: 'SHORT', value: 0 }, { name: 'reserved2', type: 'SHORT', value: 0 }, { name: 'reserved3', type: 'SHORT', value: 0 }, { name: 'reserved4', type: 'SHORT', value: 0 }, { name: 'metricDataFormat', type: 'SHORT', value: 0 }, { name: 'numberOfHMetrics', type: 'USHORT', value: 0 }], options);\n    }\n\n    var hhea = { parse: parseHheaTable, make: makeHheaTable };\n\n    // The `hmtx` table contains the horizontal metrics for all glyphs.\n    // https://www.microsoft.com/typography/OTSPEC/hmtx.htm\n\n    // Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n    // This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\n    function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {\n        var advanceWidth;\n        var leftSideBearing;\n        var p = new parse.Parser(data, start);\n        for (var i = 0; i < numGlyphs; i += 1) {\n            // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n            if (i < numMetrics) {\n                advanceWidth = p.parseUShort();\n                leftSideBearing = p.parseShort();\n            }\n\n            var glyph = glyphs.get(i);\n            glyph.advanceWidth = advanceWidth;\n            glyph.leftSideBearing = leftSideBearing;\n        }\n    }\n\n    function makeHmtxTable(glyphs) {\n        var t = new table.Table('hmtx', []);\n        for (var i = 0; i < glyphs.length; i += 1) {\n            var glyph = glyphs.get(i);\n            var advanceWidth = glyph.advanceWidth || 0;\n            var leftSideBearing = glyph.leftSideBearing || 0;\n            t.fields.push({ name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth });\n            t.fields.push({ name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing });\n        }\n\n        return t;\n    }\n\n    var hmtx = { parse: parseHmtxTable, make: makeHmtxTable };\n\n    // The `ltag` table stores IETF BCP-47 language tags. It allows supporting\n    // languages for which TrueType does not assign a numeric code.\n    // https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6ltag.html\n    // http://www.w3.org/International/articles/language-tags/\n    // http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n\n    function makeLtagTable(tags) {\n        var result = new table.Table('ltag', [{ name: 'version', type: 'ULONG', value: 1 }, { name: 'flags', type: 'ULONG', value: 0 }, { name: 'numTags', type: 'ULONG', value: tags.length }]);\n\n        var stringPool = '';\n        var stringPoolOffset = 12 + tags.length * 4;\n        for (var i = 0; i < tags.length; ++i) {\n            var pos = stringPool.indexOf(tags[i]);\n            if (pos < 0) {\n                pos = stringPool.length;\n                stringPool += tags[i];\n            }\n\n            result.fields.push({ name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos });\n            result.fields.push({ name: 'length ' + i, type: 'USHORT', value: tags[i].length });\n        }\n\n        result.fields.push({ name: 'stringPool', type: 'CHARARRAY', value: stringPool });\n        return result;\n    }\n\n    function parseLtagTable(data, start) {\n        var p = new parse.Parser(data, start);\n        var tableVersion = p.parseULong();\n        check.argument(tableVersion === 1, 'Unsupported ltag table version.');\n        // The 'ltag' specification does not define any flags; skip the field.\n        p.skip('uLong', 1);\n        var numTags = p.parseULong();\n\n        var tags = [];\n        for (var i = 0; i < numTags; i++) {\n            var tag = '';\n            var offset = start + p.parseUShort();\n            var length = p.parseUShort();\n            for (var j = offset; j < offset + length; ++j) {\n                tag += String.fromCharCode(data.getInt8(j));\n            }\n\n            tags.push(tag);\n        }\n\n        return tags;\n    }\n\n    var ltag = { make: makeLtagTable, parse: parseLtagTable };\n\n    // The `maxp` table establishes the memory requirements for the font.\n    // We need it just to get the number of glyphs in the font.\n    // https://www.microsoft.com/typography/OTSPEC/maxp.htm\n\n    // Parse the maximum profile `maxp` table.\n    function parseMaxpTable(data, start) {\n        var maxp = {};\n        var p = new parse.Parser(data, start);\n        maxp.version = p.parseVersion();\n        maxp.numGlyphs = p.parseUShort();\n        if (maxp.version === 1.0) {\n            maxp.maxPoints = p.parseUShort();\n            maxp.maxContours = p.parseUShort();\n            maxp.maxCompositePoints = p.parseUShort();\n            maxp.maxCompositeContours = p.parseUShort();\n            maxp.maxZones = p.parseUShort();\n            maxp.maxTwilightPoints = p.parseUShort();\n            maxp.maxStorage = p.parseUShort();\n            maxp.maxFunctionDefs = p.parseUShort();\n            maxp.maxInstructionDefs = p.parseUShort();\n            maxp.maxStackElements = p.parseUShort();\n            maxp.maxSizeOfInstructions = p.parseUShort();\n            maxp.maxComponentElements = p.parseUShort();\n            maxp.maxComponentDepth = p.parseUShort();\n        }\n\n        return maxp;\n    }\n\n    function makeMaxpTable(numGlyphs) {\n        return new table.Table('maxp', [{ name: 'version', type: 'FIXED', value: 0x00005000 }, { name: 'numGlyphs', type: 'USHORT', value: numGlyphs }]);\n    }\n\n    var maxp = { parse: parseMaxpTable, make: makeMaxpTable };\n\n    // The `name` naming table.\n    // https://www.microsoft.com/typography/OTSPEC/name.htm\n\n    // NameIDs for the name table.\n    var nameTableNames = ['copyright', // 0\n    'fontFamily', // 1\n    'fontSubfamily', // 2\n    'uniqueID', // 3\n    'fullName', // 4\n    'version', // 5\n    'postScriptName', // 6\n    'trademark', // 7\n    'manufacturer', // 8\n    'designer', // 9\n    'description', // 10\n    'manufacturerURL', // 11\n    'designerURL', // 12\n    'license', // 13\n    'licenseURL', // 14\n    'reserved', // 15\n    'preferredFamily', // 16\n    'preferredSubfamily', // 17\n    'compatibleFullName', // 18\n    'sampleText', // 19\n    'postScriptFindFontName', // 20\n    'wwsFamily', // 21\n    'wwsSubfamily' // 22\n    ];\n\n    var macLanguages = {\n        0: 'en',\n        1: 'fr',\n        2: 'de',\n        3: 'it',\n        4: 'nl',\n        5: 'sv',\n        6: 'es',\n        7: 'da',\n        8: 'pt',\n        9: 'no',\n        10: 'he',\n        11: 'ja',\n        12: 'ar',\n        13: 'fi',\n        14: 'el',\n        15: 'is',\n        16: 'mt',\n        17: 'tr',\n        18: 'hr',\n        19: 'zh-Hant',\n        20: 'ur',\n        21: 'hi',\n        22: 'th',\n        23: 'ko',\n        24: 'lt',\n        25: 'pl',\n        26: 'hu',\n        27: 'es',\n        28: 'lv',\n        29: 'se',\n        30: 'fo',\n        31: 'fa',\n        32: 'ru',\n        33: 'zh',\n        34: 'nl-BE',\n        35: 'ga',\n        36: 'sq',\n        37: 'ro',\n        38: 'cz',\n        39: 'sk',\n        40: 'si',\n        41: 'yi',\n        42: 'sr',\n        43: 'mk',\n        44: 'bg',\n        45: 'uk',\n        46: 'be',\n        47: 'uz',\n        48: 'kk',\n        49: 'az-Cyrl',\n        50: 'az-Arab',\n        51: 'hy',\n        52: 'ka',\n        53: 'mo',\n        54: 'ky',\n        55: 'tg',\n        56: 'tk',\n        57: 'mn-CN',\n        58: 'mn',\n        59: 'ps',\n        60: 'ks',\n        61: 'ku',\n        62: 'sd',\n        63: 'bo',\n        64: 'ne',\n        65: 'sa',\n        66: 'mr',\n        67: 'bn',\n        68: 'as',\n        69: 'gu',\n        70: 'pa',\n        71: 'or',\n        72: 'ml',\n        73: 'kn',\n        74: 'ta',\n        75: 'te',\n        76: 'si',\n        77: 'my',\n        78: 'km',\n        79: 'lo',\n        80: 'vi',\n        81: 'id',\n        82: 'tl',\n        83: 'ms',\n        84: 'ms-Arab',\n        85: 'am',\n        86: 'ti',\n        87: 'om',\n        88: 'so',\n        89: 'sw',\n        90: 'rw',\n        91: 'rn',\n        92: 'ny',\n        93: 'mg',\n        94: 'eo',\n        128: 'cy',\n        129: 'eu',\n        130: 'ca',\n        131: 'la',\n        132: 'qu',\n        133: 'gn',\n        134: 'ay',\n        135: 'tt',\n        136: 'ug',\n        137: 'dz',\n        138: 'jv',\n        139: 'su',\n        140: 'gl',\n        141: 'af',\n        142: 'br',\n        143: 'iu',\n        144: 'gd',\n        145: 'gv',\n        146: 'ga',\n        147: 'to',\n        148: 'el-polyton',\n        149: 'kl',\n        150: 'az',\n        151: 'nn'\n    };\n\n    // MacOS language ID → MacOS script ID\n    //\n    // Note that the script ID is not sufficient to determine what encoding\n    // to use in TrueType files. For some languages, MacOS used a modification\n    // of a mainstream script. For example, an Icelandic name would be stored\n    // with smRoman in the TrueType naming table, but the actual encoding\n    // is a special Icelandic version of the normal Macintosh Roman encoding.\n    // As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal\n    // Syllables but MacOS had run out of available script codes, so this was\n    // done as a (pretty radical) \"modification\" of Ethiopic.\n    //\n    // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n    var macLanguageToScript = {\n        0: 0, // langEnglish → smRoman\n        1: 0, // langFrench → smRoman\n        2: 0, // langGerman → smRoman\n        3: 0, // langItalian → smRoman\n        4: 0, // langDutch → smRoman\n        5: 0, // langSwedish → smRoman\n        6: 0, // langSpanish → smRoman\n        7: 0, // langDanish → smRoman\n        8: 0, // langPortuguese → smRoman\n        9: 0, // langNorwegian → smRoman\n        10: 5, // langHebrew → smHebrew\n        11: 1, // langJapanese → smJapanese\n        12: 4, // langArabic → smArabic\n        13: 0, // langFinnish → smRoman\n        14: 6, // langGreek → smGreek\n        15: 0, // langIcelandic → smRoman (modified)\n        16: 0, // langMaltese → smRoman\n        17: 0, // langTurkish → smRoman (modified)\n        18: 0, // langCroatian → smRoman (modified)\n        19: 2, // langTradChinese → smTradChinese\n        20: 4, // langUrdu → smArabic\n        21: 9, // langHindi → smDevanagari\n        22: 21, // langThai → smThai\n        23: 3, // langKorean → smKorean\n        24: 29, // langLithuanian → smCentralEuroRoman\n        25: 29, // langPolish → smCentralEuroRoman\n        26: 29, // langHungarian → smCentralEuroRoman\n        27: 29, // langEstonian → smCentralEuroRoman\n        28: 29, // langLatvian → smCentralEuroRoman\n        29: 0, // langSami → smRoman\n        30: 0, // langFaroese → smRoman (modified)\n        31: 4, // langFarsi → smArabic (modified)\n        32: 7, // langRussian → smCyrillic\n        33: 25, // langSimpChinese → smSimpChinese\n        34: 0, // langFlemish → smRoman\n        35: 0, // langIrishGaelic → smRoman (modified)\n        36: 0, // langAlbanian → smRoman\n        37: 0, // langRomanian → smRoman (modified)\n        38: 29, // langCzech → smCentralEuroRoman\n        39: 29, // langSlovak → smCentralEuroRoman\n        40: 0, // langSlovenian → smRoman (modified)\n        41: 5, // langYiddish → smHebrew\n        42: 7, // langSerbian → smCyrillic\n        43: 7, // langMacedonian → smCyrillic\n        44: 7, // langBulgarian → smCyrillic\n        45: 7, // langUkrainian → smCyrillic (modified)\n        46: 7, // langByelorussian → smCyrillic\n        47: 7, // langUzbek → smCyrillic\n        48: 7, // langKazakh → smCyrillic\n        49: 7, // langAzerbaijani → smCyrillic\n        50: 4, // langAzerbaijanAr → smArabic\n        51: 24, // langArmenian → smArmenian\n        52: 23, // langGeorgian → smGeorgian\n        53: 7, // langMoldavian → smCyrillic\n        54: 7, // langKirghiz → smCyrillic\n        55: 7, // langTajiki → smCyrillic\n        56: 7, // langTurkmen → smCyrillic\n        57: 27, // langMongolian → smMongolian\n        58: 7, // langMongolianCyr → smCyrillic\n        59: 4, // langPashto → smArabic\n        60: 4, // langKurdish → smArabic\n        61: 4, // langKashmiri → smArabic\n        62: 4, // langSindhi → smArabic\n        63: 26, // langTibetan → smTibetan\n        64: 9, // langNepali → smDevanagari\n        65: 9, // langSanskrit → smDevanagari\n        66: 9, // langMarathi → smDevanagari\n        67: 13, // langBengali → smBengali\n        68: 13, // langAssamese → smBengali\n        69: 11, // langGujarati → smGujarati\n        70: 10, // langPunjabi → smGurmukhi\n        71: 12, // langOriya → smOriya\n        72: 17, // langMalayalam → smMalayalam\n        73: 16, // langKannada → smKannada\n        74: 14, // langTamil → smTamil\n        75: 15, // langTelugu → smTelugu\n        76: 18, // langSinhalese → smSinhalese\n        77: 19, // langBurmese → smBurmese\n        78: 20, // langKhmer → smKhmer\n        79: 22, // langLao → smLao\n        80: 30, // langVietnamese → smVietnamese\n        81: 0, // langIndonesian → smRoman\n        82: 0, // langTagalog → smRoman\n        83: 0, // langMalayRoman → smRoman\n        84: 4, // langMalayArabic → smArabic\n        85: 28, // langAmharic → smEthiopic\n        86: 28, // langTigrinya → smEthiopic\n        87: 28, // langOromo → smEthiopic\n        88: 0, // langSomali → smRoman\n        89: 0, // langSwahili → smRoman\n        90: 0, // langKinyarwanda → smRoman\n        91: 0, // langRundi → smRoman\n        92: 0, // langNyanja → smRoman\n        93: 0, // langMalagasy → smRoman\n        94: 0, // langEsperanto → smRoman\n        128: 0, // langWelsh → smRoman (modified)\n        129: 0, // langBasque → smRoman\n        130: 0, // langCatalan → smRoman\n        131: 0, // langLatin → smRoman\n        132: 0, // langQuechua → smRoman\n        133: 0, // langGuarani → smRoman\n        134: 0, // langAymara → smRoman\n        135: 7, // langTatar → smCyrillic\n        136: 4, // langUighur → smArabic\n        137: 26, // langDzongkha → smTibetan\n        138: 0, // langJavaneseRom → smRoman\n        139: 0, // langSundaneseRom → smRoman\n        140: 0, // langGalician → smRoman\n        141: 0, // langAfrikaans → smRoman\n        142: 0, // langBreton → smRoman (modified)\n        143: 28, // langInuktitut → smEthiopic (modified)\n        144: 0, // langScottishGaelic → smRoman (modified)\n        145: 0, // langManxGaelic → smRoman (modified)\n        146: 0, // langIrishGaelicScript → smRoman (modified)\n        147: 0, // langTongan → smRoman\n        148: 6, // langGreekAncient → smRoman\n        149: 0, // langGreenlandic → smRoman\n        150: 0, // langAzerbaijanRoman → smRoman\n        151: 0 // langNynorsk → smRoman\n    };\n\n    // While Microsoft indicates a region/country for all its language\n    // IDs, we omit the region code if it's equal to the \"most likely\n    // region subtag\" according to Unicode CLDR. For scripts, we omit\n    // the subtag if it is equal to the Suppress-Script entry in the\n    // IANA language subtag registry for IETF BCP 47.\n    //\n    // For example, Microsoft states that its language code 0x041A is\n    // Croatian in Croatia. We transform this to the BCP 47 language code 'hr'\n    // and not 'hr-HR' because Croatia is the default country for Croatian,\n    // according to Unicode CLDR. As another example, Microsoft states\n    // that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform\n    // this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script\n    // for the Croatian language, according to IANA.\n    //\n    // http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html\n    // http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n    var windowsLanguages = {\n        0x0436: 'af',\n        0x041C: 'sq',\n        0x0484: 'gsw',\n        0x045E: 'am',\n        0x1401: 'ar-DZ',\n        0x3C01: 'ar-BH',\n        0x0C01: 'ar',\n        0x0801: 'ar-IQ',\n        0x2C01: 'ar-JO',\n        0x3401: 'ar-KW',\n        0x3001: 'ar-LB',\n        0x1001: 'ar-LY',\n        0x1801: 'ary',\n        0x2001: 'ar-OM',\n        0x4001: 'ar-QA',\n        0x0401: 'ar-SA',\n        0x2801: 'ar-SY',\n        0x1C01: 'aeb',\n        0x3801: 'ar-AE',\n        0x2401: 'ar-YE',\n        0x042B: 'hy',\n        0x044D: 'as',\n        0x082C: 'az-Cyrl',\n        0x042C: 'az',\n        0x046D: 'ba',\n        0x042D: 'eu',\n        0x0423: 'be',\n        0x0845: 'bn',\n        0x0445: 'bn-IN',\n        0x201A: 'bs-Cyrl',\n        0x141A: 'bs',\n        0x047E: 'br',\n        0x0402: 'bg',\n        0x0403: 'ca',\n        0x0C04: 'zh-HK',\n        0x1404: 'zh-MO',\n        0x0804: 'zh',\n        0x1004: 'zh-SG',\n        0x0404: 'zh-TW',\n        0x0483: 'co',\n        0x041A: 'hr',\n        0x101A: 'hr-BA',\n        0x0405: 'cs',\n        0x0406: 'da',\n        0x048C: 'prs',\n        0x0465: 'dv',\n        0x0813: 'nl-BE',\n        0x0413: 'nl',\n        0x0C09: 'en-AU',\n        0x2809: 'en-BZ',\n        0x1009: 'en-CA',\n        0x2409: 'en-029',\n        0x4009: 'en-IN',\n        0x1809: 'en-IE',\n        0x2009: 'en-JM',\n        0x4409: 'en-MY',\n        0x1409: 'en-NZ',\n        0x3409: 'en-PH',\n        0x4809: 'en-SG',\n        0x1C09: 'en-ZA',\n        0x2C09: 'en-TT',\n        0x0809: 'en-GB',\n        0x0409: 'en',\n        0x3009: 'en-ZW',\n        0x0425: 'et',\n        0x0438: 'fo',\n        0x0464: 'fil',\n        0x040B: 'fi',\n        0x080C: 'fr-BE',\n        0x0C0C: 'fr-CA',\n        0x040C: 'fr',\n        0x140C: 'fr-LU',\n        0x180C: 'fr-MC',\n        0x100C: 'fr-CH',\n        0x0462: 'fy',\n        0x0456: 'gl',\n        0x0437: 'ka',\n        0x0C07: 'de-AT',\n        0x0407: 'de',\n        0x1407: 'de-LI',\n        0x1007: 'de-LU',\n        0x0807: 'de-CH',\n        0x0408: 'el',\n        0x046F: 'kl',\n        0x0447: 'gu',\n        0x0468: 'ha',\n        0x040D: 'he',\n        0x0439: 'hi',\n        0x040E: 'hu',\n        0x040F: 'is',\n        0x0470: 'ig',\n        0x0421: 'id',\n        0x045D: 'iu',\n        0x085D: 'iu-Latn',\n        0x083C: 'ga',\n        0x0434: 'xh',\n        0x0435: 'zu',\n        0x0410: 'it',\n        0x0810: 'it-CH',\n        0x0411: 'ja',\n        0x044B: 'kn',\n        0x043F: 'kk',\n        0x0453: 'km',\n        0x0486: 'quc',\n        0x0487: 'rw',\n        0x0441: 'sw',\n        0x0457: 'kok',\n        0x0412: 'ko',\n        0x0440: 'ky',\n        0x0454: 'lo',\n        0x0426: 'lv',\n        0x0427: 'lt',\n        0x082E: 'dsb',\n        0x046E: 'lb',\n        0x042F: 'mk',\n        0x083E: 'ms-BN',\n        0x043E: 'ms',\n        0x044C: 'ml',\n        0x043A: 'mt',\n        0x0481: 'mi',\n        0x047A: 'arn',\n        0x044E: 'mr',\n        0x047C: 'moh',\n        0x0450: 'mn',\n        0x0850: 'mn-CN',\n        0x0461: 'ne',\n        0x0414: 'nb',\n        0x0814: 'nn',\n        0x0482: 'oc',\n        0x0448: 'or',\n        0x0463: 'ps',\n        0x0415: 'pl',\n        0x0416: 'pt',\n        0x0816: 'pt-PT',\n        0x0446: 'pa',\n        0x046B: 'qu-BO',\n        0x086B: 'qu-EC',\n        0x0C6B: 'qu',\n        0x0418: 'ro',\n        0x0417: 'rm',\n        0x0419: 'ru',\n        0x243B: 'smn',\n        0x103B: 'smj-NO',\n        0x143B: 'smj',\n        0x0C3B: 'se-FI',\n        0x043B: 'se',\n        0x083B: 'se-SE',\n        0x203B: 'sms',\n        0x183B: 'sma-NO',\n        0x1C3B: 'sms',\n        0x044F: 'sa',\n        0x1C1A: 'sr-Cyrl-BA',\n        0x0C1A: 'sr',\n        0x181A: 'sr-Latn-BA',\n        0x081A: 'sr-Latn',\n        0x046C: 'nso',\n        0x0432: 'tn',\n        0x045B: 'si',\n        0x041B: 'sk',\n        0x0424: 'sl',\n        0x2C0A: 'es-AR',\n        0x400A: 'es-BO',\n        0x340A: 'es-CL',\n        0x240A: 'es-CO',\n        0x140A: 'es-CR',\n        0x1C0A: 'es-DO',\n        0x300A: 'es-EC',\n        0x440A: 'es-SV',\n        0x100A: 'es-GT',\n        0x480A: 'es-HN',\n        0x080A: 'es-MX',\n        0x4C0A: 'es-NI',\n        0x180A: 'es-PA',\n        0x3C0A: 'es-PY',\n        0x280A: 'es-PE',\n        0x500A: 'es-PR',\n\n        // Microsoft has defined two different language codes for\n        // “Spanish with modern sorting” and “Spanish with traditional\n        // sorting”. This makes sense for collation APIs, and it would be\n        // possible to express this in BCP 47 language tags via Unicode\n        // extensions (eg., es-u-co-trad is Spanish with traditional\n        // sorting). However, for storing names in fonts, the distinction\n        // does not make sense, so we give “es” in both cases.\n        0x0C0A: 'es',\n        0x040A: 'es',\n\n        0x540A: 'es-US',\n        0x380A: 'es-UY',\n        0x200A: 'es-VE',\n        0x081D: 'sv-FI',\n        0x041D: 'sv',\n        0x045A: 'syr',\n        0x0428: 'tg',\n        0x085F: 'tzm',\n        0x0449: 'ta',\n        0x0444: 'tt',\n        0x044A: 'te',\n        0x041E: 'th',\n        0x0451: 'bo',\n        0x041F: 'tr',\n        0x0442: 'tk',\n        0x0480: 'ug',\n        0x0422: 'uk',\n        0x042E: 'hsb',\n        0x0420: 'ur',\n        0x0843: 'uz-Cyrl',\n        0x0443: 'uz',\n        0x042A: 'vi',\n        0x0452: 'cy',\n        0x0488: 'wo',\n        0x0485: 'sah',\n        0x0478: 'ii',\n        0x046A: 'yo'\n    };\n\n    // Returns a IETF BCP 47 language code, for example 'zh-Hant'\n    // for 'Chinese in the traditional script'.\n    function getLanguageCode(platformID, languageID, ltag) {\n        switch (platformID) {\n            case 0:\n                // Unicode\n                if (languageID === 0xFFFF) {\n                    return 'und';\n                } else if (ltag) {\n                    return ltag[languageID];\n                }\n\n                break;\n\n            case 1:\n                // Macintosh\n                return macLanguages[languageID];\n\n            case 3:\n                // Windows\n                return windowsLanguages[languageID];\n        }\n\n        return undefined;\n    }\n\n    var utf16 = 'utf-16';\n\n    // MacOS script ID → encoding. This table stores the default case,\n    // which can be overridden by macLanguageEncodings.\n    var macScriptEncodings = {\n        0: 'macintosh', // smRoman\n        1: 'x-mac-japanese', // smJapanese\n        2: 'x-mac-chinesetrad', // smTradChinese\n        3: 'x-mac-korean', // smKorean\n        6: 'x-mac-greek', // smGreek\n        7: 'x-mac-cyrillic', // smCyrillic\n        9: 'x-mac-devanagai', // smDevanagari\n        10: 'x-mac-gurmukhi', // smGurmukhi\n        11: 'x-mac-gujarati', // smGujarati\n        12: 'x-mac-oriya', // smOriya\n        13: 'x-mac-bengali', // smBengali\n        14: 'x-mac-tamil', // smTamil\n        15: 'x-mac-telugu', // smTelugu\n        16: 'x-mac-kannada', // smKannada\n        17: 'x-mac-malayalam', // smMalayalam\n        18: 'x-mac-sinhalese', // smSinhalese\n        19: 'x-mac-burmese', // smBurmese\n        20: 'x-mac-khmer', // smKhmer\n        21: 'x-mac-thai', // smThai\n        22: 'x-mac-lao', // smLao\n        23: 'x-mac-georgian', // smGeorgian\n        24: 'x-mac-armenian', // smArmenian\n        25: 'x-mac-chinesesimp', // smSimpChinese\n        26: 'x-mac-tibetan', // smTibetan\n        27: 'x-mac-mongolian', // smMongolian\n        28: 'x-mac-ethiopic', // smEthiopic\n        29: 'x-mac-ce', // smCentralEuroRoman\n        30: 'x-mac-vietnamese', // smVietnamese\n        31: 'x-mac-extarabic' // smExtArabic\n    };\n\n    // MacOS language ID → encoding. This table stores the exceptional\n    // cases, which override macScriptEncodings. For writing MacOS naming\n    // tables, we need to emit a MacOS script ID. Therefore, we cannot\n    // merge macScriptEncodings into macLanguageEncodings.\n    //\n    // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n    var macLanguageEncodings = {\n        15: 'x-mac-icelandic', // langIcelandic\n        17: 'x-mac-turkish', // langTurkish\n        18: 'x-mac-croatian', // langCroatian\n        24: 'x-mac-ce', // langLithuanian\n        25: 'x-mac-ce', // langPolish\n        26: 'x-mac-ce', // langHungarian\n        27: 'x-mac-ce', // langEstonian\n        28: 'x-mac-ce', // langLatvian\n        30: 'x-mac-icelandic', // langFaroese\n        37: 'x-mac-romanian', // langRomanian\n        38: 'x-mac-ce', // langCzech\n        39: 'x-mac-ce', // langSlovak\n        40: 'x-mac-ce', // langSlovenian\n        143: 'x-mac-inuit', // langInuktitut\n        146: 'x-mac-gaelic' // langIrishGaelicScript\n    };\n\n    function getEncoding(platformID, encodingID, languageID) {\n        switch (platformID) {\n            case 0:\n                // Unicode\n                return utf16;\n\n            case 1:\n                // Apple Macintosh\n                return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];\n\n            case 3:\n                // Microsoft Windows\n                if (encodingID === 1 || encodingID === 10) {\n                    return utf16;\n                }\n\n                break;\n        }\n\n        return undefined;\n    }\n\n    // Parse the naming `name` table.\n    // FIXME: Format 1 additional fields are not supported yet.\n    // ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].\n    function parseNameTable(data, start, ltag) {\n        var name = {};\n        var p = new parse.Parser(data, start);\n        var format = p.parseUShort();\n        var count = p.parseUShort();\n        var stringOffset = p.offset + p.parseUShort();\n        for (var i = 0; i < count; i++) {\n            var platformID = p.parseUShort();\n            var encodingID = p.parseUShort();\n            var languageID = p.parseUShort();\n            var nameID = p.parseUShort();\n            var property = nameTableNames[nameID] || nameID;\n            var byteLength = p.parseUShort();\n            var offset = p.parseUShort();\n            var language = getLanguageCode(platformID, languageID, ltag);\n            var encoding = getEncoding(platformID, encodingID, languageID);\n            if (encoding !== undefined && language !== undefined) {\n                var text = void 0;\n                if (encoding === utf16) {\n                    text = decode.UTF16(data, stringOffset + offset, byteLength);\n                } else {\n                    text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);\n                }\n\n                if (text) {\n                    var translations = name[property];\n                    if (translations === undefined) {\n                        translations = name[property] = {};\n                    }\n\n                    translations[language] = text;\n                }\n            }\n        }\n\n        var langTagCount = 0;\n        if (format === 1) {\n            // FIXME: Also handle Microsoft's 'name' table 1.\n            langTagCount = p.parseUShort();\n        }\n\n        return name;\n    }\n\n    // {23: 'foo'} → {'foo': 23}\n    // ['bar', 'baz'] → {'bar': 0, 'baz': 1}\n    function reverseDict(dict) {\n        var result = {};\n        for (var key in dict) {\n            result[dict[key]] = parseInt(key);\n        }\n\n        return result;\n    }\n\n    function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {\n        return new table.Record('NameRecord', [{ name: 'platformID', type: 'USHORT', value: platformID }, { name: 'encodingID', type: 'USHORT', value: encodingID }, { name: 'languageID', type: 'USHORT', value: languageID }, { name: 'nameID', type: 'USHORT', value: nameID }, { name: 'length', type: 'USHORT', value: length }, { name: 'offset', type: 'USHORT', value: offset }]);\n    }\n\n    // Finds the position of needle in haystack, or -1 if not there.\n    // Like String.indexOf(), but for arrays.\n    function findSubArray(needle, haystack) {\n        var needleLength = needle.length;\n        var limit = haystack.length - needleLength + 1;\n\n        loop: for (var pos = 0; pos < limit; pos++) {\n            for (; pos < limit; pos++) {\n                for (var k = 0; k < needleLength; k++) {\n                    if (haystack[pos + k] !== needle[k]) {\n                        continue loop;\n                    }\n                }\n\n                return pos;\n            }\n        }\n\n        return -1;\n    }\n\n    function addStringToPool(s, pool) {\n        var offset = findSubArray(s, pool);\n        if (offset < 0) {\n            offset = pool.length;\n            var i = 0;\n            var len = s.length;\n            for (; i < len; ++i) {\n                pool.push(s[i]);\n            }\n        }\n\n        return offset;\n    }\n\n    function makeNameTable(names, ltag) {\n        var nameID;\n        var nameIDs = [];\n\n        var namesWithNumericKeys = {};\n        var nameTableIds = reverseDict(nameTableNames);\n        for (var key in names) {\n            var id = nameTableIds[key];\n            if (id === undefined) {\n                id = key;\n            }\n\n            nameID = parseInt(id);\n\n            if (isNaN(nameID)) {\n                throw new Error('Name table entry \"' + key + '\" does not exist, see nameTableNames for complete list.');\n            }\n\n            namesWithNumericKeys[nameID] = names[key];\n            nameIDs.push(nameID);\n        }\n\n        var macLanguageIds = reverseDict(macLanguages);\n        var windowsLanguageIds = reverseDict(windowsLanguages);\n\n        var nameRecords = [];\n        var stringPool = [];\n\n        for (var i = 0; i < nameIDs.length; i++) {\n            nameID = nameIDs[i];\n            var translations = namesWithNumericKeys[nameID];\n            for (var lang in translations) {\n                var text = translations[lang];\n\n                // For MacOS, we try to emit the name in the form that was introduced\n                // in the initial version of the TrueType spec (in the late 1980s).\n                // However, this can fail for various reasons: the requested BCP 47\n                // language code might not have an old-style Mac equivalent;\n                // we might not have a codec for the needed character encoding;\n                // or the name might contain characters that cannot be expressed\n                // in the old-style Macintosh encoding. In case of failure, we emit\n                // the name in a more modern fashion (Unicode encoding with BCP 47\n                // language tags) that is recognized by MacOS 10.5, released in 2009.\n                // If fonts were only read by operating systems, we could simply\n                // emit all names in the modern form; this would be much easier.\n                // However, there are many applications and libraries that read\n                // 'name' tables directly, and these will usually only recognize\n                // the ancient form (silently skipping the unrecognized names).\n                var macPlatform = 1; // Macintosh\n                var macLanguage = macLanguageIds[lang];\n                var macScript = macLanguageToScript[macLanguage];\n                var macEncoding = getEncoding(macPlatform, macScript, macLanguage);\n                var macName = encode.MACSTRING(text, macEncoding);\n                if (macName === undefined) {\n                    macPlatform = 0; // Unicode\n                    macLanguage = ltag.indexOf(lang);\n                    if (macLanguage < 0) {\n                        macLanguage = ltag.length;\n                        ltag.push(lang);\n                    }\n\n                    macScript = 4; // Unicode 2.0 and later\n                    macName = encode.UTF16(text);\n                }\n\n                var macNameOffset = addStringToPool(macName, stringPool);\n                nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage, nameID, macName.length, macNameOffset));\n\n                var winLanguage = windowsLanguageIds[lang];\n                if (winLanguage !== undefined) {\n                    var winName = encode.UTF16(text);\n                    var winNameOffset = addStringToPool(winName, stringPool);\n                    nameRecords.push(makeNameRecord(3, 1, winLanguage, nameID, winName.length, winNameOffset));\n                }\n            }\n        }\n\n        nameRecords.sort(function (a, b) {\n            return a.platformID - b.platformID || a.encodingID - b.encodingID || a.languageID - b.languageID || a.nameID - b.nameID;\n        });\n\n        var t = new table.Table('name', [{ name: 'format', type: 'USHORT', value: 0 }, { name: 'count', type: 'USHORT', value: nameRecords.length }, { name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12 }]);\n\n        for (var r = 0; r < nameRecords.length; r++) {\n            t.fields.push({ name: 'record_' + r, type: 'RECORD', value: nameRecords[r] });\n        }\n\n        t.fields.push({ name: 'strings', type: 'LITERAL', value: stringPool });\n        return t;\n    }\n\n    var _name = { parse: parseNameTable, make: makeNameTable };\n\n    // The `OS/2` table contains metrics required in OpenType fonts.\n    // https://www.microsoft.com/typography/OTSPEC/os2.htm\n\n    var unicodeRanges = [{ begin: 0x0000, end: 0x007F }, // Basic Latin\n    { begin: 0x0080, end: 0x00FF }, // Latin-1 Supplement\n    { begin: 0x0100, end: 0x017F }, // Latin Extended-A\n    { begin: 0x0180, end: 0x024F }, // Latin Extended-B\n    { begin: 0x0250, end: 0x02AF }, // IPA Extensions\n    { begin: 0x02B0, end: 0x02FF }, // Spacing Modifier Letters\n    { begin: 0x0300, end: 0x036F }, // Combining Diacritical Marks\n    { begin: 0x0370, end: 0x03FF }, // Greek and Coptic\n    { begin: 0x2C80, end: 0x2CFF }, // Coptic\n    { begin: 0x0400, end: 0x04FF }, // Cyrillic\n    { begin: 0x0530, end: 0x058F }, // Armenian\n    { begin: 0x0590, end: 0x05FF }, // Hebrew\n    { begin: 0xA500, end: 0xA63F }, // Vai\n    { begin: 0x0600, end: 0x06FF }, // Arabic\n    { begin: 0x07C0, end: 0x07FF }, // NKo\n    { begin: 0x0900, end: 0x097F }, // Devanagari\n    { begin: 0x0980, end: 0x09FF }, // Bengali\n    { begin: 0x0A00, end: 0x0A7F }, // Gurmukhi\n    { begin: 0x0A80, end: 0x0AFF }, // Gujarati\n    { begin: 0x0B00, end: 0x0B7F }, // Oriya\n    { begin: 0x0B80, end: 0x0BFF }, // Tamil\n    { begin: 0x0C00, end: 0x0C7F }, // Telugu\n    { begin: 0x0C80, end: 0x0CFF }, // Kannada\n    { begin: 0x0D00, end: 0x0D7F }, // Malayalam\n    { begin: 0x0E00, end: 0x0E7F }, // Thai\n    { begin: 0x0E80, end: 0x0EFF }, // Lao\n    { begin: 0x10A0, end: 0x10FF }, // Georgian\n    { begin: 0x1B00, end: 0x1B7F }, // Balinese\n    { begin: 0x1100, end: 0x11FF }, // Hangul Jamo\n    { begin: 0x1E00, end: 0x1EFF }, // Latin Extended Additional\n    { begin: 0x1F00, end: 0x1FFF }, // Greek Extended\n    { begin: 0x2000, end: 0x206F }, // General Punctuation\n    { begin: 0x2070, end: 0x209F }, // Superscripts And Subscripts\n    { begin: 0x20A0, end: 0x20CF }, // Currency Symbol\n    { begin: 0x20D0, end: 0x20FF }, // Combining Diacritical Marks For Symbols\n    { begin: 0x2100, end: 0x214F }, // Letterlike Symbols\n    { begin: 0x2150, end: 0x218F }, // Number Forms\n    { begin: 0x2190, end: 0x21FF }, // Arrows\n    { begin: 0x2200, end: 0x22FF }, // Mathematical Operators\n    { begin: 0x2300, end: 0x23FF }, // Miscellaneous Technical\n    { begin: 0x2400, end: 0x243F }, // Control Pictures\n    { begin: 0x2440, end: 0x245F }, // Optical Character Recognition\n    { begin: 0x2460, end: 0x24FF }, // Enclosed Alphanumerics\n    { begin: 0x2500, end: 0x257F }, // Box Drawing\n    { begin: 0x2580, end: 0x259F }, // Block Elements\n    { begin: 0x25A0, end: 0x25FF }, // Geometric Shapes\n    { begin: 0x2600, end: 0x26FF }, // Miscellaneous Symbols\n    { begin: 0x2700, end: 0x27BF }, // Dingbats\n    { begin: 0x3000, end: 0x303F }, // CJK Symbols And Punctuation\n    { begin: 0x3040, end: 0x309F }, // Hiragana\n    { begin: 0x30A0, end: 0x30FF }, // Katakana\n    { begin: 0x3100, end: 0x312F }, // Bopomofo\n    { begin: 0x3130, end: 0x318F }, // Hangul Compatibility Jamo\n    { begin: 0xA840, end: 0xA87F }, // Phags-pa\n    { begin: 0x3200, end: 0x32FF }, // Enclosed CJK Letters And Months\n    { begin: 0x3300, end: 0x33FF }, // CJK Compatibility\n    { begin: 0xAC00, end: 0xD7AF }, // Hangul Syllables\n    { begin: 0xD800, end: 0xDFFF }, // Non-Plane 0 *\n    { begin: 0x10900, end: 0x1091F }, // Phoenicia\n    { begin: 0x4E00, end: 0x9FFF }, // CJK Unified Ideographs\n    { begin: 0xE000, end: 0xF8FF }, // Private Use Area (plane 0)\n    { begin: 0x31C0, end: 0x31EF }, // CJK Strokes\n    { begin: 0xFB00, end: 0xFB4F }, // Alphabetic Presentation Forms\n    { begin: 0xFB50, end: 0xFDFF }, // Arabic Presentation Forms-A\n    { begin: 0xFE20, end: 0xFE2F }, // Combining Half Marks\n    { begin: 0xFE10, end: 0xFE1F }, // Vertical Forms\n    { begin: 0xFE50, end: 0xFE6F }, // Small Form Variants\n    { begin: 0xFE70, end: 0xFEFF }, // Arabic Presentation Forms-B\n    { begin: 0xFF00, end: 0xFFEF }, // Halfwidth And Fullwidth Forms\n    { begin: 0xFFF0, end: 0xFFFF }, // Specials\n    { begin: 0x0F00, end: 0x0FFF }, // Tibetan\n    { begin: 0x0700, end: 0x074F }, // Syriac\n    { begin: 0x0780, end: 0x07BF }, // Thaana\n    { begin: 0x0D80, end: 0x0DFF }, // Sinhala\n    { begin: 0x1000, end: 0x109F }, // Myanmar\n    { begin: 0x1200, end: 0x137F }, // Ethiopic\n    { begin: 0x13A0, end: 0x13FF }, // Cherokee\n    { begin: 0x1400, end: 0x167F }, // Unified Canadian Aboriginal Syllabics\n    { begin: 0x1680, end: 0x169F }, // Ogham\n    { begin: 0x16A0, end: 0x16FF }, // Runic\n    { begin: 0x1780, end: 0x17FF }, // Khmer\n    { begin: 0x1800, end: 0x18AF }, // Mongolian\n    { begin: 0x2800, end: 0x28FF }, // Braille Patterns\n    { begin: 0xA000, end: 0xA48F }, // Yi Syllables\n    { begin: 0x1700, end: 0x171F }, // Tagalog\n    { begin: 0x10300, end: 0x1032F }, // Old Italic\n    { begin: 0x10330, end: 0x1034F }, // Gothic\n    { begin: 0x10400, end: 0x1044F }, // Deseret\n    { begin: 0x1D000, end: 0x1D0FF }, // Byzantine Musical Symbols\n    { begin: 0x1D400, end: 0x1D7FF }, // Mathematical Alphanumeric Symbols\n    { begin: 0xFF000, end: 0xFFFFD }, // Private Use (plane 15)\n    { begin: 0xFE00, end: 0xFE0F }, // Variation Selectors\n    { begin: 0xE0000, end: 0xE007F }, // Tags\n    { begin: 0x1900, end: 0x194F }, // Limbu\n    { begin: 0x1950, end: 0x197F }, // Tai Le\n    { begin: 0x1980, end: 0x19DF }, // New Tai Lue\n    { begin: 0x1A00, end: 0x1A1F }, // Buginese\n    { begin: 0x2C00, end: 0x2C5F }, // Glagolitic\n    { begin: 0x2D30, end: 0x2D7F }, // Tifinagh\n    { begin: 0x4DC0, end: 0x4DFF }, // Yijing Hexagram Symbols\n    { begin: 0xA800, end: 0xA82F }, // Syloti Nagri\n    { begin: 0x10000, end: 0x1007F }, // Linear B Syllabary\n    { begin: 0x10140, end: 0x1018F }, // Ancient Greek Numbers\n    { begin: 0x10380, end: 0x1039F }, // Ugaritic\n    { begin: 0x103A0, end: 0x103DF }, // Old Persian\n    { begin: 0x10450, end: 0x1047F }, // Shavian\n    { begin: 0x10480, end: 0x104AF }, // Osmanya\n    { begin: 0x10800, end: 0x1083F }, // Cypriot Syllabary\n    { begin: 0x10A00, end: 0x10A5F }, // Kharoshthi\n    { begin: 0x1D300, end: 0x1D35F }, // Tai Xuan Jing Symbols\n    { begin: 0x12000, end: 0x123FF }, // Cuneiform\n    { begin: 0x1D360, end: 0x1D37F }, // Counting Rod Numerals\n    { begin: 0x1B80, end: 0x1BBF }, // Sundanese\n    { begin: 0x1C00, end: 0x1C4F }, // Lepcha\n    { begin: 0x1C50, end: 0x1C7F }, // Ol Chiki\n    { begin: 0xA880, end: 0xA8DF }, // Saurashtra\n    { begin: 0xA900, end: 0xA92F }, // Kayah Li\n    { begin: 0xA930, end: 0xA95F }, // Rejang\n    { begin: 0xAA00, end: 0xAA5F }, // Cham\n    { begin: 0x10190, end: 0x101CF }, // Ancient Symbols\n    { begin: 0x101D0, end: 0x101FF }, // Phaistos Disc\n    { begin: 0x102A0, end: 0x102DF }, // Carian\n    { begin: 0x1F030, end: 0x1F09F // Domino Tiles\n    }];\n\n    function getUnicodeRange(unicode) {\n        for (var i = 0; i < unicodeRanges.length; i += 1) {\n            var range = unicodeRanges[i];\n            if (unicode >= range.begin && unicode < range.end) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    // Parse the OS/2 and Windows metrics `OS/2` table\n    function parseOS2Table(data, start) {\n        var os2 = {};\n        var p = new parse.Parser(data, start);\n        os2.version = p.parseUShort();\n        os2.xAvgCharWidth = p.parseShort();\n        os2.usWeightClass = p.parseUShort();\n        os2.usWidthClass = p.parseUShort();\n        os2.fsType = p.parseUShort();\n        os2.ySubscriptXSize = p.parseShort();\n        os2.ySubscriptYSize = p.parseShort();\n        os2.ySubscriptXOffset = p.parseShort();\n        os2.ySubscriptYOffset = p.parseShort();\n        os2.ySuperscriptXSize = p.parseShort();\n        os2.ySuperscriptYSize = p.parseShort();\n        os2.ySuperscriptXOffset = p.parseShort();\n        os2.ySuperscriptYOffset = p.parseShort();\n        os2.yStrikeoutSize = p.parseShort();\n        os2.yStrikeoutPosition = p.parseShort();\n        os2.sFamilyClass = p.parseShort();\n        os2.panose = [];\n        for (var i = 0; i < 10; i++) {\n            os2.panose[i] = p.parseByte();\n        }\n\n        os2.ulUnicodeRange1 = p.parseULong();\n        os2.ulUnicodeRange2 = p.parseULong();\n        os2.ulUnicodeRange3 = p.parseULong();\n        os2.ulUnicodeRange4 = p.parseULong();\n        os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());\n        os2.fsSelection = p.parseUShort();\n        os2.usFirstCharIndex = p.parseUShort();\n        os2.usLastCharIndex = p.parseUShort();\n        os2.sTypoAscender = p.parseShort();\n        os2.sTypoDescender = p.parseShort();\n        os2.sTypoLineGap = p.parseShort();\n        os2.usWinAscent = p.parseUShort();\n        os2.usWinDescent = p.parseUShort();\n        if (os2.version >= 1) {\n            os2.ulCodePageRange1 = p.parseULong();\n            os2.ulCodePageRange2 = p.parseULong();\n        }\n\n        if (os2.version >= 2) {\n            os2.sxHeight = p.parseShort();\n            os2.sCapHeight = p.parseShort();\n            os2.usDefaultChar = p.parseUShort();\n            os2.usBreakChar = p.parseUShort();\n            os2.usMaxContent = p.parseUShort();\n        }\n\n        return os2;\n    }\n\n    function makeOS2Table(options) {\n        return new table.Table('OS/2', [{ name: 'version', type: 'USHORT', value: 0x0003 }, { name: 'xAvgCharWidth', type: 'SHORT', value: 0 }, { name: 'usWeightClass', type: 'USHORT', value: 0 }, { name: 'usWidthClass', type: 'USHORT', value: 0 }, { name: 'fsType', type: 'USHORT', value: 0 }, { name: 'ySubscriptXSize', type: 'SHORT', value: 650 }, { name: 'ySubscriptYSize', type: 'SHORT', value: 699 }, { name: 'ySubscriptXOffset', type: 'SHORT', value: 0 }, { name: 'ySubscriptYOffset', type: 'SHORT', value: 140 }, { name: 'ySuperscriptXSize', type: 'SHORT', value: 650 }, { name: 'ySuperscriptYSize', type: 'SHORT', value: 699 }, { name: 'ySuperscriptXOffset', type: 'SHORT', value: 0 }, { name: 'ySuperscriptYOffset', type: 'SHORT', value: 479 }, { name: 'yStrikeoutSize', type: 'SHORT', value: 49 }, { name: 'yStrikeoutPosition', type: 'SHORT', value: 258 }, { name: 'sFamilyClass', type: 'SHORT', value: 0 }, { name: 'bFamilyType', type: 'BYTE', value: 0 }, { name: 'bSerifStyle', type: 'BYTE', value: 0 }, { name: 'bWeight', type: 'BYTE', value: 0 }, { name: 'bProportion', type: 'BYTE', value: 0 }, { name: 'bContrast', type: 'BYTE', value: 0 }, { name: 'bStrokeVariation', type: 'BYTE', value: 0 }, { name: 'bArmStyle', type: 'BYTE', value: 0 }, { name: 'bLetterform', type: 'BYTE', value: 0 }, { name: 'bMidline', type: 'BYTE', value: 0 }, { name: 'bXHeight', type: 'BYTE', value: 0 }, { name: 'ulUnicodeRange1', type: 'ULONG', value: 0 }, { name: 'ulUnicodeRange2', type: 'ULONG', value: 0 }, { name: 'ulUnicodeRange3', type: 'ULONG', value: 0 }, { name: 'ulUnicodeRange4', type: 'ULONG', value: 0 }, { name: 'achVendID', type: 'CHARARRAY', value: 'XXXX' }, { name: 'fsSelection', type: 'USHORT', value: 0 }, { name: 'usFirstCharIndex', type: 'USHORT', value: 0 }, { name: 'usLastCharIndex', type: 'USHORT', value: 0 }, { name: 'sTypoAscender', type: 'SHORT', value: 0 }, { name: 'sTypoDescender', type: 'SHORT', value: 0 }, { name: 'sTypoLineGap', type: 'SHORT', value: 0 }, { name: 'usWinAscent', type: 'USHORT', value: 0 }, { name: 'usWinDescent', type: 'USHORT', value: 0 }, { name: 'ulCodePageRange1', type: 'ULONG', value: 0 }, { name: 'ulCodePageRange2', type: 'ULONG', value: 0 }, { name: 'sxHeight', type: 'SHORT', value: 0 }, { name: 'sCapHeight', type: 'SHORT', value: 0 }, { name: 'usDefaultChar', type: 'USHORT', value: 0 }, { name: 'usBreakChar', type: 'USHORT', value: 0 }, { name: 'usMaxContext', type: 'USHORT', value: 0 }], options);\n    }\n\n    var os2 = { parse: parseOS2Table, make: makeOS2Table, unicodeRanges: unicodeRanges, getUnicodeRange: getUnicodeRange };\n\n    // The `post` table stores additional PostScript information, such as glyph names.\n    // https://www.microsoft.com/typography/OTSPEC/post.htm\n\n    // Parse the PostScript `post` table\n    function parsePostTable(data, start) {\n        var post = {};\n        var p = new parse.Parser(data, start);\n        post.version = p.parseVersion();\n        post.italicAngle = p.parseFixed();\n        post.underlinePosition = p.parseShort();\n        post.underlineThickness = p.parseShort();\n        post.isFixedPitch = p.parseULong();\n        post.minMemType42 = p.parseULong();\n        post.maxMemType42 = p.parseULong();\n        post.minMemType1 = p.parseULong();\n        post.maxMemType1 = p.parseULong();\n        switch (post.version) {\n            case 1:\n                post.names = standardNames.slice();\n                break;\n            case 2:\n                post.numberOfGlyphs = p.parseUShort();\n                post.glyphNameIndex = new Array(post.numberOfGlyphs);\n                for (var i = 0; i < post.numberOfGlyphs; i++) {\n                    post.glyphNameIndex[i] = p.parseUShort();\n                }\n\n                post.names = [];\n                for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n                    if (post.glyphNameIndex[i$1] >= standardNames.length) {\n                        var nameLength = p.parseChar();\n                        post.names.push(p.parseString(nameLength));\n                    }\n                }\n\n                break;\n            case 2.5:\n                post.numberOfGlyphs = p.parseUShort();\n                post.offset = new Array(post.numberOfGlyphs);\n                for (var i$2 = 0; i$2 < post.numberOfGlyphs; i$2++) {\n                    post.offset[i$2] = p.parseChar();\n                }\n\n                break;\n        }\n        return post;\n    }\n\n    function makePostTable() {\n        return new table.Table('post', [{ name: 'version', type: 'FIXED', value: 0x00030000 }, { name: 'italicAngle', type: 'FIXED', value: 0 }, { name: 'underlinePosition', type: 'FWORD', value: 0 }, { name: 'underlineThickness', type: 'FWORD', value: 0 }, { name: 'isFixedPitch', type: 'ULONG', value: 0 }, { name: 'minMemType42', type: 'ULONG', value: 0 }, { name: 'maxMemType42', type: 'ULONG', value: 0 }, { name: 'minMemType1', type: 'ULONG', value: 0 }, { name: 'maxMemType1', type: 'ULONG', value: 0 }]);\n    }\n\n    var post = { parse: parsePostTable, make: makePostTable };\n\n    // The `GSUB` table contains ligatures, among other things.\n    // https://www.microsoft.com/typography/OTSPEC/gsub.htm\n\n    var subtableParsers = new Array(9); // subtableParsers[0] is unused\n\n    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\n    subtableParsers[1] = function parseLookup1() {\n        var start = this.offset + this.relativeOffset;\n        var substFormat = this.parseUShort();\n        if (substFormat === 1) {\n            return {\n                substFormat: 1,\n                coverage: this.parsePointer(Parser.coverage),\n                deltaGlyphId: this.parseUShort()\n            };\n        } else if (substFormat === 2) {\n            return {\n                substFormat: 2,\n                coverage: this.parsePointer(Parser.coverage),\n                substitute: this.parseOffset16List()\n            };\n        }\n        check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');\n    };\n\n    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\n    subtableParsers[2] = function parseLookup2() {\n        var substFormat = this.parseUShort();\n        check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            sequences: this.parseListOfLists()\n        };\n    };\n\n    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\n    subtableParsers[3] = function parseLookup3() {\n        var substFormat = this.parseUShort();\n        check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            alternateSets: this.parseListOfLists()\n        };\n    };\n\n    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\n    subtableParsers[4] = function parseLookup4() {\n        var substFormat = this.parseUShort();\n        check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            ligatureSets: this.parseListOfLists(function () {\n                return {\n                    ligGlyph: this.parseUShort(),\n                    components: this.parseUShortList(this.parseUShort() - 1)\n                };\n            })\n        };\n    };\n\n    var lookupRecordDesc = {\n        sequenceIndex: Parser.uShort,\n        lookupListIndex: Parser.uShort\n    };\n\n    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\n    subtableParsers[5] = function parseLookup5() {\n        var start = this.offset + this.relativeOffset;\n        var substFormat = this.parseUShort();\n\n        if (substFormat === 1) {\n            return {\n                substFormat: substFormat,\n                coverage: this.parsePointer(Parser.coverage),\n                ruleSets: this.parseListOfLists(function () {\n                    var glyphCount = this.parseUShort();\n                    var substCount = this.parseUShort();\n                    return {\n                        input: this.parseUShortList(glyphCount - 1),\n                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                    };\n                })\n            };\n        } else if (substFormat === 2) {\n            return {\n                substFormat: substFormat,\n                coverage: this.parsePointer(Parser.coverage),\n                classDef: this.parsePointer(Parser.classDef),\n                classSets: this.parseListOfLists(function () {\n                    var glyphCount = this.parseUShort();\n                    var substCount = this.parseUShort();\n                    return {\n                        classes: this.parseUShortList(glyphCount - 1),\n                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                    };\n                })\n            };\n        } else if (substFormat === 3) {\n            var glyphCount = this.parseUShort();\n            var substCount = this.parseUShort();\n            return {\n                substFormat: substFormat,\n                coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n                lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n            };\n        }\n        check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');\n    };\n\n    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\n    subtableParsers[6] = function parseLookup6() {\n        var start = this.offset + this.relativeOffset;\n        var substFormat = this.parseUShort();\n        if (substFormat === 1) {\n            return {\n                substFormat: 1,\n                coverage: this.parsePointer(Parser.coverage),\n                chainRuleSets: this.parseListOfLists(function () {\n                    return {\n                        backtrack: this.parseUShortList(),\n                        input: this.parseUShortList(this.parseShort() - 1),\n                        lookahead: this.parseUShortList(),\n                        lookupRecords: this.parseRecordList(lookupRecordDesc)\n                    };\n                })\n            };\n        } else if (substFormat === 2) {\n            return {\n                substFormat: 2,\n                coverage: this.parsePointer(Parser.coverage),\n                backtrackClassDef: this.parsePointer(Parser.classDef),\n                inputClassDef: this.parsePointer(Parser.classDef),\n                lookaheadClassDef: this.parsePointer(Parser.classDef),\n                chainClassSet: this.parseListOfLists(function () {\n                    return {\n                        backtrack: this.parseUShortList(),\n                        input: this.parseUShortList(this.parseShort() - 1),\n                        lookahead: this.parseUShortList(),\n                        lookupRecords: this.parseRecordList(lookupRecordDesc)\n                    };\n                })\n            };\n        } else if (substFormat === 3) {\n            return {\n                substFormat: 3,\n                backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                lookupRecords: this.parseRecordList(lookupRecordDesc)\n            };\n        }\n        check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');\n    };\n\n    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\n    subtableParsers[7] = function parseLookup7() {\n        // Extension Substitution subtable\n        var substFormat = this.parseUShort();\n        check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');\n        var extensionLookupType = this.parseUShort();\n        var extensionParser = new Parser(this.data, this.offset + this.parseULong());\n        return {\n            substFormat: 1,\n            lookupType: extensionLookupType,\n            extension: subtableParsers[extensionLookupType].call(extensionParser)\n        };\n    };\n\n    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\n    subtableParsers[8] = function parseLookup8() {\n        var substFormat = this.parseUShort();\n        check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            substitutes: this.parseUShortList()\n        };\n    };\n\n    // https://www.microsoft.com/typography/OTSPEC/gsub.htm\n    function parseGsubTable(data, start) {\n        start = start || 0;\n        var p = new Parser(data, start);\n        var tableVersion = p.parseVersion();\n        check.argument(tableVersion === 1, 'Unsupported GSUB table version.');\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers)\n        };\n    }\n\n    // GSUB Writing //////////////////////////////////////////////\n    var subtableMakers = new Array(9);\n\n    subtableMakers[1] = function makeLookup1(subtable) {\n        if (subtable.substFormat === 1) {\n            return new table.Table('substitutionTable', [{ name: 'substFormat', type: 'USHORT', value: 1 }, { name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage) }, { name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId }]);\n        } else {\n            return new table.Table('substitutionTable', [{ name: 'substFormat', type: 'USHORT', value: 2 }, { name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage) }].concat(table.ushortList('substitute', subtable.substitute)));\n        }\n        check.fail('Lookup type 1 substFormat must be 1 or 2.');\n    };\n\n    subtableMakers[3] = function makeLookup3(subtable) {\n        check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');\n        return new table.Table('substitutionTable', [{ name: 'substFormat', type: 'USHORT', value: 1 }, { name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage) }].concat(table.tableList('altSet', subtable.alternateSets, function (alternateSet) {\n            return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));\n        })));\n    };\n\n    subtableMakers[4] = function makeLookup4(subtable) {\n        check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');\n        return new table.Table('substitutionTable', [{ name: 'substFormat', type: 'USHORT', value: 1 }, { name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage) }].concat(table.tableList('ligSet', subtable.ligatureSets, function (ligatureSet) {\n            return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function (ligature) {\n                return new table.Table('ligatureTable', [{ name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph }].concat(table.ushortList('component', ligature.components, ligature.components.length + 1)));\n            }));\n        })));\n    };\n\n    function makeGsubTable(gsub) {\n        return new table.Table('GSUB', [{ name: 'version', type: 'ULONG', value: 0x10000 }, { name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts) }, { name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features) }, { name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers) }]);\n    }\n\n    var gsub = { parse: parseGsubTable, make: makeGsubTable };\n\n    // The `GPOS` table contains kerning pairs, among other things.\n    // https://www.microsoft.com/typography/OTSPEC/gpos.htm\n\n    // Parse the metadata `meta` table.\n    // https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html\n    function parseMetaTable(data, start) {\n        var p = new parse.Parser(data, start);\n        var tableVersion = p.parseULong();\n        check.argument(tableVersion === 1, 'Unsupported META table version.');\n        p.parseULong(); // flags - currently unused and set to 0\n        p.parseULong(); // tableOffset\n        var numDataMaps = p.parseULong();\n\n        var tags = {};\n        for (var i = 0; i < numDataMaps; i++) {\n            var tag = p.parseTag();\n            var dataOffset = p.parseULong();\n            var dataLength = p.parseULong();\n            var text = decode.UTF8(data, start + dataOffset, dataLength);\n\n            tags[tag] = text;\n        }\n        return tags;\n    }\n\n    function makeMetaTable(tags) {\n        var numTags = Object.keys(tags).length;\n        var stringPool = '';\n        var stringPoolOffset = 16 + numTags * 12;\n\n        var result = new table.Table('meta', [{ name: 'version', type: 'ULONG', value: 1 }, { name: 'flags', type: 'ULONG', value: 0 }, { name: 'offset', type: 'ULONG', value: stringPoolOffset }, { name: 'numTags', type: 'ULONG', value: numTags }]);\n\n        for (var tag in tags) {\n            var pos = stringPool.length;\n            stringPool += tags[tag];\n\n            result.fields.push({ name: 'tag ' + tag, type: 'TAG', value: tag });\n            result.fields.push({ name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos });\n            result.fields.push({ name: 'length ' + tag, type: 'ULONG', value: tags[tag].length });\n        }\n\n        result.fields.push({ name: 'stringPool', type: 'CHARARRAY', value: stringPool });\n\n        return result;\n    }\n\n    var meta = { parse: parseMetaTable, make: makeMetaTable };\n\n    // The `sfnt` wrapper provides organization for the tables in the font.\n    // It is the top-level data structure in a font.\n    // https://www.microsoft.com/typography/OTSPEC/otff.htm\n    // Recommendations for creating OpenType Fonts:\n    // http://www.microsoft.com/typography/otspec140/recom.htm\n\n    function log2(v) {\n        return Math.log(v) / Math.log(2) | 0;\n    }\n\n    function computeCheckSum(bytes) {\n        while (bytes.length % 4 !== 0) {\n            bytes.push(0);\n        }\n\n        var sum = 0;\n        for (var i = 0; i < bytes.length; i += 4) {\n            sum += (bytes[i] << 24) + (bytes[i + 1] << 16) + (bytes[i + 2] << 8) + bytes[i + 3];\n        }\n\n        sum %= Math.pow(2, 32);\n        return sum;\n    }\n\n    function makeTableRecord(tag, checkSum, offset, length) {\n        return new table.Record('Table Record', [{ name: 'tag', type: 'TAG', value: tag !== undefined ? tag : '' }, { name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0 }, { name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0 }, { name: 'length', type: 'ULONG', value: length !== undefined ? length : 0 }]);\n    }\n\n    function makeSfntTable(tables) {\n        var sfnt = new table.Table('sfnt', [{ name: 'version', type: 'TAG', value: 'OTTO' }, { name: 'numTables', type: 'USHORT', value: 0 }, { name: 'searchRange', type: 'USHORT', value: 0 }, { name: 'entrySelector', type: 'USHORT', value: 0 }, { name: 'rangeShift', type: 'USHORT', value: 0 }]);\n        sfnt.tables = tables;\n        sfnt.numTables = tables.length;\n        var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));\n        sfnt.searchRange = 16 * highestPowerOf2;\n        sfnt.entrySelector = log2(highestPowerOf2);\n        sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;\n\n        var recordFields = [];\n        var tableFields = [];\n\n        var offset = sfnt.sizeOf() + makeTableRecord().sizeOf() * sfnt.numTables;\n        while (offset % 4 !== 0) {\n            offset += 1;\n            tableFields.push({ name: 'padding', type: 'BYTE', value: 0 });\n        }\n\n        for (var i = 0; i < tables.length; i += 1) {\n            var t = tables[i];\n            check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');\n            var tableLength = t.sizeOf();\n            var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);\n            recordFields.push({ name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord });\n            tableFields.push({ name: t.tableName + ' table', type: 'RECORD', value: t });\n            offset += tableLength;\n            check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');\n            while (offset % 4 !== 0) {\n                offset += 1;\n                tableFields.push({ name: 'padding', type: 'BYTE', value: 0 });\n            }\n        }\n\n        // Table records need to be sorted alphabetically.\n        recordFields.sort(function (r1, r2) {\n            if (r1.value.tag > r2.value.tag) {\n                return 1;\n            } else {\n                return -1;\n            }\n        });\n\n        sfnt.fields = sfnt.fields.concat(recordFields);\n        sfnt.fields = sfnt.fields.concat(tableFields);\n        return sfnt;\n    }\n\n    // Get the metrics for a character. If the string has more than one character\n    // this function returns metrics for the first available character.\n    // You can provide optional fallback metrics if no characters are available.\n    function metricsForChar(font, chars, notFoundMetrics) {\n        for (var i = 0; i < chars.length; i += 1) {\n            var glyphIndex = font.charToGlyphIndex(chars[i]);\n            if (glyphIndex > 0) {\n                var glyph = font.glyphs.get(glyphIndex);\n                return glyph.getMetrics();\n            }\n        }\n\n        return notFoundMetrics;\n    }\n\n    function average(vs) {\n        var sum = 0;\n        for (var i = 0; i < vs.length; i += 1) {\n            sum += vs[i];\n        }\n\n        return sum / vs.length;\n    }\n\n    // Convert the font object to a SFNT data structure.\n    // This structure contains all the necessary tables and metadata to create a binary OTF file.\n    function fontToSfntTable(font) {\n        var xMins = [];\n        var yMins = [];\n        var xMaxs = [];\n        var yMaxs = [];\n        var advanceWidths = [];\n        var leftSideBearings = [];\n        var rightSideBearings = [];\n        var firstCharIndex;\n        var lastCharIndex = 0;\n        var ulUnicodeRange1 = 0;\n        var ulUnicodeRange2 = 0;\n        var ulUnicodeRange3 = 0;\n        var ulUnicodeRange4 = 0;\n\n        for (var i = 0; i < font.glyphs.length; i += 1) {\n            var glyph = font.glyphs.get(i);\n            var unicode = glyph.unicode | 0;\n\n            if (isNaN(glyph.advanceWidth)) {\n                throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');\n            }\n\n            if (firstCharIndex > unicode || firstCharIndex === undefined) {\n                // ignore .notdef char\n                if (unicode > 0) {\n                    firstCharIndex = unicode;\n                }\n            }\n\n            if (lastCharIndex < unicode) {\n                lastCharIndex = unicode;\n            }\n\n            var position = os2.getUnicodeRange(unicode);\n            if (position < 32) {\n                ulUnicodeRange1 |= 1 << position;\n            } else if (position < 64) {\n                ulUnicodeRange2 |= 1 << position - 32;\n            } else if (position < 96) {\n                ulUnicodeRange3 |= 1 << position - 64;\n            } else if (position < 123) {\n                ulUnicodeRange4 |= 1 << position - 96;\n            } else {\n                throw new Error('Unicode ranges bits > 123 are reserved for internal usage');\n            }\n            // Skip non-important characters.\n            if (glyph.name === '.notdef') {\n                continue;\n            }\n            var metrics = glyph.getMetrics();\n            xMins.push(metrics.xMin);\n            yMins.push(metrics.yMin);\n            xMaxs.push(metrics.xMax);\n            yMaxs.push(metrics.yMax);\n            leftSideBearings.push(metrics.leftSideBearing);\n            rightSideBearings.push(metrics.rightSideBearing);\n            advanceWidths.push(glyph.advanceWidth);\n        }\n\n        var globals = {\n            xMin: Math.min.apply(null, xMins),\n            yMin: Math.min.apply(null, yMins),\n            xMax: Math.max.apply(null, xMaxs),\n            yMax: Math.max.apply(null, yMaxs),\n            advanceWidthMax: Math.max.apply(null, advanceWidths),\n            advanceWidthAvg: average(advanceWidths),\n            minLeftSideBearing: Math.min.apply(null, leftSideBearings),\n            maxLeftSideBearing: Math.max.apply(null, leftSideBearings),\n            minRightSideBearing: Math.min.apply(null, rightSideBearings)\n        };\n        globals.ascender = font.ascender;\n        globals.descender = font.descender;\n\n        var headTable = head.make({\n            flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)\n            unitsPerEm: font.unitsPerEm,\n            xMin: globals.xMin,\n            yMin: globals.yMin,\n            xMax: globals.xMax,\n            yMax: globals.yMax,\n            lowestRecPPEM: 3,\n            createdTimestamp: font.createdTimestamp\n        });\n\n        var hheaTable = hhea.make({\n            ascender: globals.ascender,\n            descender: globals.descender,\n            advanceWidthMax: globals.advanceWidthMax,\n            minLeftSideBearing: globals.minLeftSideBearing,\n            minRightSideBearing: globals.minRightSideBearing,\n            xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),\n            numberOfHMetrics: font.glyphs.length\n        });\n\n        var maxpTable = maxp.make(font.glyphs.length);\n\n        var os2Table = os2.make({\n            xAvgCharWidth: Math.round(globals.advanceWidthAvg),\n            usWeightClass: font.tables.os2.usWeightClass,\n            usWidthClass: font.tables.os2.usWidthClass,\n            usFirstCharIndex: firstCharIndex,\n            usLastCharIndex: lastCharIndex,\n            ulUnicodeRange1: ulUnicodeRange1,\n            ulUnicodeRange2: ulUnicodeRange2,\n            ulUnicodeRange3: ulUnicodeRange3,\n            ulUnicodeRange4: ulUnicodeRange4,\n            fsSelection: font.tables.os2.fsSelection, // REGULAR\n            // See http://typophile.com/node/13081 for more info on vertical metrics.\n            // We get metrics for typical characters (such as \"x\" for xHeight).\n            // We provide some fallback characters if characters are unavailable: their\n            // ordering was chosen experimentally.\n            sTypoAscender: globals.ascender,\n            sTypoDescender: globals.descender,\n            sTypoLineGap: 0,\n            usWinAscent: globals.yMax,\n            usWinDescent: Math.abs(globals.yMin),\n            ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now\n            sxHeight: metricsForChar(font, 'xyvw', { yMax: Math.round(globals.ascender / 2) }).yMax,\n            sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,\n            usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.\n            usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.\n        });\n\n        var hmtxTable = hmtx.make(font.glyphs);\n        var cmapTable = cmap.make(font.glyphs);\n\n        var englishFamilyName = font.getEnglishName('fontFamily');\n        var englishStyleName = font.getEnglishName('fontSubfamily');\n        var englishFullName = englishFamilyName + ' ' + englishStyleName;\n        var postScriptName = font.getEnglishName('postScriptName');\n        if (!postScriptName) {\n            postScriptName = englishFamilyName.replace(/\\s/g, '') + '-' + englishStyleName;\n        }\n\n        var names = {};\n        for (var n in font.names) {\n            names[n] = font.names[n];\n        }\n\n        if (!names.uniqueID) {\n            names.uniqueID = { en: font.getEnglishName('manufacturer') + ':' + englishFullName };\n        }\n\n        if (!names.postScriptName) {\n            names.postScriptName = { en: postScriptName };\n        }\n\n        if (!names.preferredFamily) {\n            names.preferredFamily = font.names.fontFamily;\n        }\n\n        if (!names.preferredSubfamily) {\n            names.preferredSubfamily = font.names.fontSubfamily;\n        }\n\n        var languageTags = [];\n        var nameTable = _name.make(names, languageTags);\n        var ltagTable = languageTags.length > 0 ? ltag.make(languageTags) : undefined;\n\n        var postTable = post.make();\n        var cffTable = cff.make(font.glyphs, {\n            version: font.getEnglishName('version'),\n            fullName: englishFullName,\n            familyName: englishFamilyName,\n            weightName: englishStyleName,\n            postScriptName: postScriptName,\n            unitsPerEm: font.unitsPerEm,\n            fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]\n        });\n\n        var metaTable = font.metas && Object.keys(font.metas).length > 0 ? meta.make(font.metas) : undefined;\n\n        // The order does not matter because makeSfntTable() will sort them.\n        var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];\n        if (ltagTable) {\n            tables.push(ltagTable);\n        }\n        // Optional tables\n        if (font.tables.gsub) {\n            tables.push(gsub.make(font.tables.gsub));\n        }\n        if (metaTable) {\n            tables.push(metaTable);\n        }\n\n        var sfntTable = makeSfntTable(tables);\n\n        // Compute the font's checkSum and store it in head.checkSumAdjustment.\n        var bytes = sfntTable.encode();\n        var checkSum = computeCheckSum(bytes);\n        var tableFields = sfntTable.fields;\n        var checkSumAdjusted = false;\n        for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {\n            if (tableFields[i$1].name === 'head table') {\n                tableFields[i$1].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;\n                checkSumAdjusted = true;\n                break;\n            }\n        }\n\n        if (!checkSumAdjusted) {\n            throw new Error('Could not find head table with checkSum to adjust.');\n        }\n\n        return sfntTable;\n    }\n\n    var sfnt = { make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum: computeCheckSum };\n\n    // The Layout object is the prototype of Substitution objects, and provides\n    // utility methods to manipulate common layout tables (GPOS, GSUB, GDEF...)\n\n    function searchTag(arr, tag) {\n        /* jshint bitwise: false */\n        var imin = 0;\n        var imax = arr.length - 1;\n        while (imin <= imax) {\n            var imid = imin + imax >>> 1;\n            var val = arr[imid].tag;\n            if (val === tag) {\n                return imid;\n            } else if (val < tag) {\n                imin = imid + 1;\n            } else {\n                imax = imid - 1;\n            }\n        }\n        // Not found: return -1-insertion point\n        return -imin - 1;\n    }\n\n    function binSearch(arr, value) {\n        /* jshint bitwise: false */\n        var imin = 0;\n        var imax = arr.length - 1;\n        while (imin <= imax) {\n            var imid = imin + imax >>> 1;\n            var val = arr[imid];\n            if (val === value) {\n                return imid;\n            } else if (val < value) {\n                imin = imid + 1;\n            } else {\n                imax = imid - 1;\n            }\n        }\n        // Not found: return -1-insertion point\n        return -imin - 1;\n    }\n\n    /**\n     * @exports opentype.Layout\n     * @class\n     */\n    function Layout(font, tableName) {\n        this.font = font;\n        this.tableName = tableName;\n    }\n\n    Layout.prototype = {\n\n        /**\n         * Binary search an object by \"tag\" property\n         * @instance\n         * @function searchTag\n         * @memberof opentype.Layout\n         * @param  {Array} arr\n         * @param  {string} tag\n         * @return {number}\n         */\n        searchTag: searchTag,\n\n        /**\n         * Binary search in a list of numbers\n         * @instance\n         * @function binSearch\n         * @memberof opentype.Layout\n         * @param  {Array} arr\n         * @param  {number} value\n         * @return {number}\n         */\n        binSearch: binSearch,\n\n        /**\n         * Get or create the Layout table (GSUB, GPOS etc).\n         * @param  {boolean} create - Whether to create a new one.\n         * @return {Object} The GSUB or GPOS table.\n         */\n        getTable: function getTable(create) {\n            var layout = this.font.tables[this.tableName];\n            if (!layout && create) {\n                layout = this.font.tables[this.tableName] = this.createDefaultTable();\n            }\n            return layout;\n        },\n\n        /**\n         * Returns all scripts in the substitution table.\n         * @instance\n         * @return {Array}\n         */\n        getScriptNames: function getScriptNames() {\n            var layout = this.getTable();\n            if (!layout) {\n                return [];\n            }\n            return layout.scripts.map(function (script) {\n                return script.tag;\n            });\n        },\n\n        /**\n         * Returns the best bet for a script name.\n         * Returns 'DFLT' if it exists.\n         * If not, returns 'latn' if it exists.\n         * If neither exist, returns undefined.\n         */\n        getDefaultScriptName: function getDefaultScriptName() {\n            var layout = this.getTable();\n            if (!layout) {\n                return;\n            }\n            var hasLatn = false;\n            for (var i = 0; i < layout.scripts.length; i++) {\n                var name = layout.scripts[i].tag;\n                if (name === 'DFLT') {\n                    return name;\n                }\n                if (name === 'latn') {\n                    hasLatn = true;\n                }\n            }\n            if (hasLatn) {\n                return 'latn';\n            }\n        },\n\n        /**\n         * Returns all LangSysRecords in the given script.\n         * @instance\n         * @param {string} [script='DFLT']\n         * @param {boolean} create - forces the creation of this script table if it doesn't exist.\n         * @return {Object} An object with tag and script properties.\n         */\n        getScriptTable: function getScriptTable(script, create) {\n            var layout = this.getTable(create);\n            if (layout) {\n                script = script || 'DFLT';\n                var scripts = layout.scripts;\n                var pos = searchTag(layout.scripts, script);\n                if (pos >= 0) {\n                    return scripts[pos].script;\n                } else if (create) {\n                    var scr = {\n                        tag: script,\n                        script: {\n                            defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n                            langSysRecords: []\n                        }\n                    };\n                    scripts.splice(-1 - pos, 0, scr);\n                    return scr.script;\n                }\n            }\n        },\n\n        /**\n         * Returns a language system table\n         * @instance\n         * @param {string} [script='DFLT']\n         * @param {string} [language='dlft']\n         * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.\n         * @return {Object}\n         */\n        getLangSysTable: function getLangSysTable(script, language, create) {\n            var scriptTable = this.getScriptTable(script, create);\n            if (scriptTable) {\n                if (!language || language === 'dflt' || language === 'DFLT') {\n                    return scriptTable.defaultLangSys;\n                }\n                var pos = searchTag(scriptTable.langSysRecords, language);\n                if (pos >= 0) {\n                    return scriptTable.langSysRecords[pos].langSys;\n                } else if (create) {\n                    var langSysRecord = {\n                        tag: language,\n                        langSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] }\n                    };\n                    scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n                    return langSysRecord.langSys;\n                }\n            }\n        },\n\n        /**\n         * Get a specific feature table.\n         * @instance\n         * @param {string} [script='DFLT']\n         * @param {string} [language='dlft']\n         * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm\n         * @param {boolean} create - forces the creation of the feature table if it doesn't exist.\n         * @return {Object}\n         */\n        getFeatureTable: function getFeatureTable(script, language, feature, create) {\n            var langSysTable = this.getLangSysTable(script, language, create);\n            if (langSysTable) {\n                var featureRecord;\n                var featIndexes = langSysTable.featureIndexes;\n                var allFeatures = this.font.tables[this.tableName].features;\n                // The FeatureIndex array of indices is in arbitrary order,\n                // even if allFeatures is sorted alphabetically by feature tag.\n                for (var i = 0; i < featIndexes.length; i++) {\n                    featureRecord = allFeatures[featIndexes[i]];\n                    if (featureRecord.tag === feature) {\n                        return featureRecord.feature;\n                    }\n                }\n                if (create) {\n                    var index = allFeatures.length;\n                    // Automatic ordering of features would require to shift feature indexes in the script list.\n                    check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');\n                    featureRecord = {\n                        tag: feature,\n                        feature: { params: 0, lookupListIndexes: [] }\n                    };\n                    allFeatures.push(featureRecord);\n                    featIndexes.push(index);\n                    return featureRecord.feature;\n                }\n            }\n        },\n\n        /**\n         * Get the lookup tables of a given type for a script/language/feature.\n         * @instance\n         * @param {string} [script='DFLT']\n         * @param {string} [language='dlft']\n         * @param {string} feature - 4-letter feature code\n         * @param {number} lookupType - 1 to 8\n         * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.\n         * @return {Object[]}\n         */\n        getLookupTables: function getLookupTables(script, language, feature, lookupType, create) {\n            var featureTable = this.getFeatureTable(script, language, feature, create);\n            var tables = [];\n            if (featureTable) {\n                var lookupTable;\n                var lookupListIndexes = featureTable.lookupListIndexes;\n                var allLookups = this.font.tables[this.tableName].lookups;\n                // lookupListIndexes are in no particular order, so use naive search.\n                for (var i = 0; i < lookupListIndexes.length; i++) {\n                    lookupTable = allLookups[lookupListIndexes[i]];\n                    if (lookupTable.lookupType === lookupType) {\n                        tables.push(lookupTable);\n                    }\n                }\n                if (tables.length === 0 && create) {\n                    lookupTable = {\n                        lookupType: lookupType,\n                        lookupFlag: 0,\n                        subtables: [],\n                        markFilteringSet: undefined\n                    };\n                    var index = allLookups.length;\n                    allLookups.push(lookupTable);\n                    lookupListIndexes.push(index);\n                    return [lookupTable];\n                }\n            }\n            return tables;\n        },\n\n        /**\n         * Returns the list of glyph indexes of a coverage table.\n         * Format 1: the list is stored raw\n         * Format 2: compact list as range records.\n         * @instance\n         * @param  {Object} coverageTable\n         * @return {Array}\n         */\n        expandCoverage: function expandCoverage(coverageTable) {\n            if (coverageTable.format === 1) {\n                return coverageTable.glyphs;\n            } else {\n                var glyphs = [];\n                var ranges = coverageTable.ranges;\n                for (var i = 0; i < ranges.length; i++) {\n                    var range = ranges[i];\n                    var start = range.start;\n                    var end = range.end;\n                    for (var j = start; j <= end; j++) {\n                        glyphs.push(j);\n                    }\n                }\n                return glyphs;\n            }\n        }\n\n    };\n\n    // The Substitution object provides utility methods to manipulate\n    // the GSUB substitution table.\n\n    /**\n     * @exports opentype.Substitution\n     * @class\n     * @extends opentype.Layout\n     * @param {opentype.Font}\n     * @constructor\n     */\n    function Substitution(font) {\n        Layout.call(this, font, 'gsub');\n    }\n\n    // Check if 2 arrays of primitives are equal.\n    function arraysEqual(ar1, ar2) {\n        var n = ar1.length;\n        if (n !== ar2.length) {\n            return false;\n        }\n        for (var i = 0; i < n; i++) {\n            if (ar1[i] !== ar2[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Find the first subtable of a lookup table in a particular format.\n    function getSubstFormat(lookupTable, format, defaultSubtable) {\n        var subtables = lookupTable.subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            if (subtable.substFormat === format) {\n                return subtable;\n            }\n        }\n        if (defaultSubtable) {\n            subtables.push(defaultSubtable);\n            return defaultSubtable;\n        }\n        return undefined;\n    }\n\n    Substitution.prototype = Layout.prototype;\n\n    /**\n     * Create a default GSUB table.\n     * @return {Object} gsub - The GSUB table.\n     */\n    Substitution.prototype.createDefaultTable = function () {\n        // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n        return {\n            version: 1,\n            scripts: [{\n                tag: 'DFLT',\n                script: {\n                    defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n                    langSysRecords: []\n                }\n            }],\n            features: [],\n            lookups: []\n        };\n    };\n\n    /**\n     * List all single substitutions (lookup type 1) for a given script, language, and feature.\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dflt']\n     * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n     * @return {Array} substitutions - The list of substitutions.\n     */\n    Substitution.prototype.getSingle = function (feature, script, language) {\n        var this$1 = this;\n\n        var substitutions = [];\n        var lookupTables = this.getLookupTables(script, language, feature, 1);\n        for (var idx = 0; idx < lookupTables.length; idx++) {\n            var subtables = lookupTables[idx].subtables;\n            for (var i = 0; i < subtables.length; i++) {\n                var subtable = subtables[i];\n                var glyphs = this$1.expandCoverage(subtable.coverage);\n                var j = void 0;\n                if (subtable.substFormat === 1) {\n                    var delta = subtable.deltaGlyphId;\n                    for (j = 0; j < glyphs.length; j++) {\n                        var glyph = glyphs[j];\n                        substitutions.push({ sub: glyph, by: glyph + delta });\n                    }\n                } else {\n                    var substitute = subtable.substitute;\n                    for (j = 0; j < glyphs.length; j++) {\n                        substitutions.push({ sub: glyphs[j], by: substitute[j] });\n                    }\n                }\n            }\n        }\n        return substitutions;\n    };\n\n    /**\n     * List all alternates (lookup type 3) for a given script, language, and feature.\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dflt']\n     * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n     * @return {Array} alternates - The list of alternates\n     */\n    Substitution.prototype.getAlternates = function (feature, script, language) {\n        var this$1 = this;\n\n        var alternates = [];\n        var lookupTables = this.getLookupTables(script, language, feature, 3);\n        for (var idx = 0; idx < lookupTables.length; idx++) {\n            var subtables = lookupTables[idx].subtables;\n            for (var i = 0; i < subtables.length; i++) {\n                var subtable = subtables[i];\n                var glyphs = this$1.expandCoverage(subtable.coverage);\n                var alternateSets = subtable.alternateSets;\n                for (var j = 0; j < glyphs.length; j++) {\n                    alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n                }\n            }\n        }\n        return alternates;\n    };\n\n    /**\n     * List all ligatures (lookup type 4) for a given script, language, and feature.\n     * The result is an array of ligature objects like { sub: [ids], by: id }\n     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dflt']\n     * @return {Array} ligatures - The list of ligatures.\n     */\n    Substitution.prototype.getLigatures = function (feature, script, language) {\n        var this$1 = this;\n\n        var ligatures = [];\n        var lookupTables = this.getLookupTables(script, language, feature, 4);\n        for (var idx = 0; idx < lookupTables.length; idx++) {\n            var subtables = lookupTables[idx].subtables;\n            for (var i = 0; i < subtables.length; i++) {\n                var subtable = subtables[i];\n                var glyphs = this$1.expandCoverage(subtable.coverage);\n                var ligatureSets = subtable.ligatureSets;\n                for (var j = 0; j < glyphs.length; j++) {\n                    var startGlyph = glyphs[j];\n                    var ligSet = ligatureSets[j];\n                    for (var k = 0; k < ligSet.length; k++) {\n                        var lig = ligSet[k];\n                        ligatures.push({\n                            sub: [startGlyph].concat(lig.components),\n                            by: lig.ligGlyph\n                        });\n                    }\n                }\n            }\n        }\n        return ligatures;\n    };\n\n    /**\n     * Add or modify a single substitution (lookup type 1)\n     * Format 2, more flexible, is always used.\n     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n     * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dflt']\n     */\n    Substitution.prototype.addSingle = function (feature, substitution, script, language) {\n        var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n        var subtable = getSubstFormat(lookupTable, 2, { // lookup type 1 subtable, format 2, coverage format 1\n            substFormat: 2,\n            coverage: { format: 1, glyphs: [] },\n            substitute: []\n        });\n        check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n        var coverageGlyph = substitution.sub;\n        var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n        if (pos < 0) {\n            pos = -1 - pos;\n            subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n            subtable.substitute.splice(pos, 0, 0);\n        }\n        subtable.substitute[pos] = substitution.by;\n    };\n\n    /**\n     * Add or modify an alternate substitution (lookup type 1)\n     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n     * @param {Object} substitution - { sub: id, by: [ids] }\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dflt']\n     */\n    Substitution.prototype.addAlternate = function (feature, substitution, script, language) {\n        var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n        var subtable = getSubstFormat(lookupTable, 1, { // lookup type 3 subtable, format 1, coverage format 1\n            substFormat: 1,\n            coverage: { format: 1, glyphs: [] },\n            alternateSets: []\n        });\n        check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n        var coverageGlyph = substitution.sub;\n        var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n        if (pos < 0) {\n            pos = -1 - pos;\n            subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n            subtable.alternateSets.splice(pos, 0, 0);\n        }\n        subtable.alternateSets[pos] = substitution.by;\n    };\n\n    /**\n     * Add a ligature (lookup type 4)\n     * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n     * @param {Object} ligature - { sub: [ids], by: id }\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dflt']\n     */\n    Substitution.prototype.addLigature = function (feature, ligature, script, language) {\n        var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n        var subtable = lookupTable.subtables[0];\n        if (!subtable) {\n            subtable = { // lookup type 4 subtable, format 1, coverage format 1\n                substFormat: 1,\n                coverage: { format: 1, glyphs: [] },\n                ligatureSets: []\n            };\n            lookupTable.subtables[0] = subtable;\n        }\n        check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n        var coverageGlyph = ligature.sub[0];\n        var ligComponents = ligature.sub.slice(1);\n        var ligatureTable = {\n            ligGlyph: ligature.by,\n            components: ligComponents\n        };\n        var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n        if (pos >= 0) {\n            // ligatureSet already exists\n            var ligatureSet = subtable.ligatureSets[pos];\n            for (var i = 0; i < ligatureSet.length; i++) {\n                // If ligature already exists, return.\n                if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                    return;\n                }\n            }\n            // ligature does not exist: add it.\n            ligatureSet.push(ligatureTable);\n        } else {\n            // Create a new ligatureSet and add coverage for the first glyph.\n            pos = -1 - pos;\n            subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n            subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n        }\n    };\n\n    /**\n     * List all feature data for a given script and language.\n     * @param {string} feature - 4-letter feature name\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dflt']\n     * @return {Array} substitutions - The list of substitutions.\n     */\n    Substitution.prototype.getFeature = function (feature, script, language) {\n        if (/ss\\d\\d/.test(feature)) {\n            // ss01 - ss20\n            return this.getSingle(feature, script, language);\n        }\n        switch (feature) {\n            case 'aalt':\n            case 'salt':\n                return this.getSingle(feature, script, language).concat(this.getAlternates(feature, script, language));\n            case 'dlig':\n            case 'liga':\n            case 'rlig':\n                return this.getLigatures(feature, script, language);\n        }\n        return undefined;\n    };\n\n    /**\n     * Add a substitution to a feature for a given script and language.\n     * @param {string} feature - 4-letter feature name\n     * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dflt']\n     */\n    Substitution.prototype.add = function (feature, sub, script, language) {\n        if (/ss\\d\\d/.test(feature)) {\n            // ss01 - ss20\n            return this.addSingle(feature, sub, script, language);\n        }\n        switch (feature) {\n            case 'aalt':\n            case 'salt':\n                if (typeof sub.by === 'number') {\n                    return this.addSingle(feature, sub, script, language);\n                }\n                return this.addAlternate(feature, sub, script, language);\n            case 'dlig':\n            case 'liga':\n            case 'rlig':\n                return this.addLigature(feature, sub, script, language);\n        }\n        return undefined;\n    };\n\n    function isBrowser() {\n        return typeof window !== 'undefined';\n    }\n\n    function nodeBufferToArrayBuffer(buffer) {\n        var ab = new ArrayBuffer(buffer.length);\n        var view = new Uint8Array(ab);\n        for (var i = 0; i < buffer.length; ++i) {\n            view[i] = buffer[i];\n        }\n\n        return ab;\n    }\n\n    function arrayBufferToNodeBuffer(ab) {\n        var buffer = new Buffer(ab.byteLength);\n        var view = new Uint8Array(ab);\n        for (var i = 0; i < buffer.length; ++i) {\n            buffer[i] = view[i];\n        }\n\n        return buffer;\n    }\n\n    function checkArgument(expression, message) {\n        if (!expression) {\n            throw message;\n        }\n    }\n\n    /* A TrueType font hinting interpreter.\n    *\n    * (c) 2017 Axel Kittenberger\n    *\n    * This interpreter has been implemented according to this documentation:\n    * https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html\n    *\n    * According to the documentation F24DOT6 values are used for pixels.\n    * That means calculation is 1/64 pixel accurate and uses integer operations.\n    * However, Javascript has floating point operations by default and only\n    * those are available. One could make a case to simulate the 1/64 accuracy\n    * exactly by truncating after every division operation\n    * (for example with << 0) to get pixel exactly results as other TrueType\n    * implementations. It may make sense since some fonts are pixel optimized\n    * by hand using DELTAP instructions. The current implementation doesn't\n    * and rather uses full floating point precision.\n    *\n    * xScale, yScale and rotation is currently ignored.\n    *\n    * A few non-trivial instructions are missing as I didn't encounter yet\n    * a font that used them to test a possible implementation.\n    *\n    * Some fonts seem to use undocumented features regarding the twilight zone.\n    * Only some of them are implemented as they were encountered.\n    *\n    * The exports.DEBUG statements are removed on the minified distribution file.\n    */\n    var instructionTable;\n    var exec;\n    var execGlyph;\n    var execComponent;\n\n    /*\n    * Creates a hinting object.\n    *\n    * There ought to be exactly one\n    * for each truetype font that is used for hinting.\n    */\n    function Hinting(font) {\n        // the font this hinting object is for\n        this.font = font;\n\n        // cached states\n        this._fpgmState = this._prepState = undefined;\n\n        // errorState\n        // 0 ... all okay\n        // 1 ... had an error in a glyf,\n        //       continue working but stop spamming\n        //       the console\n        // 2 ... error at prep, stop hinting at this ppem\n        // 3 ... error at fpeg, stop hinting for this font at all\n        this._errorState = 0;\n    }\n\n    /*\n    * Not rounding.\n    */\n    function roundOff(v) {\n        return v;\n    }\n\n    /*\n    * Rounding to grid.\n    */\n    function roundToGrid(v) {\n        //Rounding in TT is supposed to \"symmetrical around zero\"\n        return Math.sign(v) * Math.round(Math.abs(v));\n    }\n\n    /*\n    * Rounding to double grid.\n    */\n    function roundToDoubleGrid(v) {\n        return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n    }\n\n    /*\n    * Rounding to half grid.\n    */\n    function roundToHalfGrid(v) {\n        return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n    }\n\n    /*\n    * Rounding to up to grid.\n    */\n    function roundUpToGrid(v) {\n        return Math.sign(v) * Math.ceil(Math.abs(v));\n    }\n\n    /*\n    * Rounding to down to grid.\n    */\n    function roundDownToGrid(v) {\n        return Math.sign(v) * Math.floor(Math.abs(v));\n    }\n\n    /*\n    * Super rounding.\n    */\n    var roundSuper = function roundSuper(v) {\n        var period = this.srPeriod;\n        var phase = this.srPhase;\n        var threshold = this.srThreshold;\n        var sign = 1;\n\n        if (v < 0) {\n            v = -v;\n            sign = -1;\n        }\n\n        v += threshold - phase;\n\n        v = Math.trunc(v / period) * period;\n\n        v += phase;\n\n        // according to http://xgridfit.sourceforge.net/round.html\n        if (sign > 0 && v < 0) {\n            return phase;\n        }\n        if (sign < 0 && v > 0) {\n            return -phase;\n        }\n\n        return v * sign;\n    };\n\n    /*\n    * Unit vector of x-axis.\n    */\n    var xUnitVector = {\n        x: 1,\n\n        y: 0,\n\n        axis: 'x',\n\n        // Gets the projected distance between two points.\n        // o1/o2 ... if true, respective original position is used.\n        distance: function distance(p1, p2, o1, o2) {\n            return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n        },\n\n        // Moves point p so the moved position has the same relative\n        // position to the moved positions of rp1 and rp2 than the\n        // original positions had.\n        //\n        // See APPENDIX on INTERPOLATE at the bottom of this file.\n        interpolate: function interpolate(p, rp1, rp2, pv) {\n            var do1;\n            var do2;\n            var doa1;\n            var doa2;\n            var dm1;\n            var dm2;\n            var dt;\n\n            if (!pv || pv === this) {\n                do1 = p.xo - rp1.xo;\n                do2 = p.xo - rp2.xo;\n                dm1 = rp1.x - rp1.xo;\n                dm2 = rp2.x - rp2.xo;\n                doa1 = Math.abs(do1);\n                doa2 = Math.abs(do2);\n                dt = doa1 + doa2;\n\n                if (dt === 0) {\n                    p.x = p.xo + (dm1 + dm2) / 2;\n                    return;\n                }\n\n                p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;\n                return;\n            }\n\n            do1 = pv.distance(p, rp1, true, true);\n            do2 = pv.distance(p, rp2, true, true);\n            dm1 = pv.distance(rp1, rp1, false, true);\n            dm2 = pv.distance(rp2, rp2, false, true);\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n\n            if (dt === 0) {\n                xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n                return;\n            }\n\n            xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n        },\n\n        // Slope of line normal to this\n        normalSlope: Number.NEGATIVE_INFINITY,\n\n        // Sets the point 'p' relative to point 'rp'\n        // by the distance 'd'.\n        //\n        // See APPENDIX on SETRELATIVE at the bottom of this file.\n        //\n        // p   ... point to set\n        // rp  ... reference point\n        // d   ... distance on projection vector\n        // pv  ... projection vector (undefined = this)\n        // org ... if true, uses the original position of rp as reference.\n        setRelative: function setRelative(p, rp, d, pv, org) {\n            if (!pv || pv === this) {\n                p.x = (org ? rp.xo : rp.x) + d;\n                return;\n            }\n\n            var rpx = org ? rp.xo : rp.x;\n            var rpy = org ? rp.yo : rp.y;\n            var rpdx = rpx + d * pv.x;\n            var rpdy = rpy + d * pv.y;\n\n            p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n        },\n\n        // Slope of vector line.\n        slope: 0,\n\n        // Touches the point p.\n        touch: function touch(p) {\n            p.xTouched = true;\n        },\n\n        // Tests if a point p is touched.\n        touched: function touched(p) {\n            return p.xTouched;\n        },\n\n        // Untouches the point p.\n        untouch: function untouch(p) {\n            p.xTouched = false;\n        }\n    };\n\n    /*\n    * Unit vector of y-axis.\n    */\n    var yUnitVector = {\n        x: 0,\n\n        y: 1,\n\n        axis: 'y',\n\n        // Gets the projected distance between two points.\n        // o1/o2 ... if true, respective original position is used.\n        distance: function distance(p1, p2, o1, o2) {\n            return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n        },\n\n        // Moves point p so the moved position has the same relative\n        // position to the moved positions of rp1 and rp2 than the\n        // original positions had.\n        //\n        // See APPENDIX on INTERPOLATE at the bottom of this file.\n        interpolate: function interpolate(p, rp1, rp2, pv) {\n            var do1;\n            var do2;\n            var doa1;\n            var doa2;\n            var dm1;\n            var dm2;\n            var dt;\n\n            if (!pv || pv === this) {\n                do1 = p.yo - rp1.yo;\n                do2 = p.yo - rp2.yo;\n                dm1 = rp1.y - rp1.yo;\n                dm2 = rp2.y - rp2.yo;\n                doa1 = Math.abs(do1);\n                doa2 = Math.abs(do2);\n                dt = doa1 + doa2;\n\n                if (dt === 0) {\n                    p.y = p.yo + (dm1 + dm2) / 2;\n                    return;\n                }\n\n                p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;\n                return;\n            }\n\n            do1 = pv.distance(p, rp1, true, true);\n            do2 = pv.distance(p, rp2, true, true);\n            dm1 = pv.distance(rp1, rp1, false, true);\n            dm2 = pv.distance(rp2, rp2, false, true);\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n\n            if (dt === 0) {\n                yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n                return;\n            }\n\n            yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n        },\n\n        // Slope of line normal to this.\n        normalSlope: 0,\n\n        // Sets the point 'p' relative to point 'rp'\n        // by the distance 'd'\n        //\n        // See APPENDIX on SETRELATIVE at the bottom of this file.\n        //\n        // p   ... point to set\n        // rp  ... reference point\n        // d   ... distance on projection vector\n        // pv  ... projection vector (undefined = this)\n        // org ... if true, uses the original position of rp as reference.\n        setRelative: function setRelative(p, rp, d, pv, org) {\n            if (!pv || pv === this) {\n                p.y = (org ? rp.yo : rp.y) + d;\n                return;\n            }\n\n            var rpx = org ? rp.xo : rp.x;\n            var rpy = org ? rp.yo : rp.y;\n            var rpdx = rpx + d * pv.x;\n            var rpdy = rpy + d * pv.y;\n\n            p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n        },\n\n        // Slope of vector line.\n        slope: Number.POSITIVE_INFINITY,\n\n        // Touches the point p.\n        touch: function touch(p) {\n            p.yTouched = true;\n        },\n\n        // Tests if a point p is touched.\n        touched: function touched(p) {\n            return p.yTouched;\n        },\n\n        // Untouches the point p.\n        untouch: function untouch(p) {\n            p.yTouched = false;\n        }\n    };\n\n    Object.freeze(xUnitVector);\n    Object.freeze(yUnitVector);\n\n    /*\n    * Creates a unit vector that is not x- or y-axis.\n    */\n    function UnitVector(x, y) {\n        this.x = x;\n        this.y = y;\n        this.axis = undefined;\n        this.slope = y / x;\n        this.normalSlope = -x / y;\n        Object.freeze(this);\n    }\n\n    /*\n    * Gets the projected distance between two points.\n    * o1/o2 ... if true, respective original position is used.\n    */\n    UnitVector.prototype.distance = function (p1, p2, o1, o2) {\n        return this.x * xUnitVector.distance(p1, p2, o1, o2) + this.y * yUnitVector.distance(p1, p2, o1, o2);\n    };\n\n    /*\n    * Moves point p so the moved position has the same relative\n    * position to the moved positions of rp1 and rp2 than the\n    * original positions had.\n    *\n    * See APPENDIX on INTERPOLATE at the bottom of this file.\n    */\n    UnitVector.prototype.interpolate = function (p, rp1, rp2, pv) {\n        var dm1;\n        var dm2;\n        var do1;\n        var do2;\n        var doa1;\n        var doa2;\n        var dt;\n\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt = doa1 + doa2;\n\n        if (dt === 0) {\n            this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n\n        this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n    };\n\n    /*\n    * Sets the point 'p' relative to point 'rp'\n    * by the distance 'd'\n    *\n    * See APPENDIX on SETRELATIVE at the bottom of this file.\n    *\n    * p   ...  point to set\n    * rp  ... reference point\n    * d   ... distance on projection vector\n    * pv  ... projection vector (undefined = this)\n    * org ... if true, uses the original position of rp as reference.\n    */\n    UnitVector.prototype.setRelative = function (p, rp, d, pv, org) {\n        pv = pv || this;\n\n        var rpx = org ? rp.xo : rp.x;\n        var rpy = org ? rp.yo : rp.y;\n        var rpdx = rpx + d * pv.x;\n        var rpdy = rpy + d * pv.y;\n\n        var pvns = pv.normalSlope;\n        var fvs = this.slope;\n\n        var px = p.x;\n        var py = p.y;\n\n        p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n        p.y = fvs * (p.x - px) + py;\n    };\n\n    /*\n    * Touches the point p.\n    */\n    UnitVector.prototype.touch = function (p) {\n        p.xTouched = true;\n        p.yTouched = true;\n    };\n\n    /*\n    * Returns a unit vector with x/y coordinates.\n    */\n    function getUnitVector(x, y) {\n        var d = Math.sqrt(x * x + y * y);\n\n        x /= d;\n        y /= d;\n\n        if (x === 1 && y === 0) {\n            return xUnitVector;\n        } else if (x === 0 && y === 1) {\n            return yUnitVector;\n        } else {\n            return new UnitVector(x, y);\n        }\n    }\n\n    /*\n    * Creates a point in the hinting engine.\n    */\n    function HPoint(x, y, lastPointOfContour, onCurve) {\n        this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value\n        this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value\n\n        this.lastPointOfContour = lastPointOfContour;\n        this.onCurve = onCurve;\n        this.prevPointOnContour = undefined;\n        this.nextPointOnContour = undefined;\n        this.xTouched = false;\n        this.yTouched = false;\n\n        Object.preventExtensions(this);\n    }\n\n    /*\n    * Returns the next touched point on the contour.\n    *\n    * v  ... unit vector to test touch axis.\n    */\n    HPoint.prototype.nextTouched = function (v) {\n        var p = this.nextPointOnContour;\n\n        while (!v.touched(p) && p !== this) {\n            p = p.nextPointOnContour;\n        }\n\n        return p;\n    };\n\n    /*\n    * Returns the previous touched point on the contour\n    *\n    * v  ... unit vector to test touch axis.\n    */\n    HPoint.prototype.prevTouched = function (v) {\n        var p = this.prevPointOnContour;\n\n        while (!v.touched(p) && p !== this) {\n            p = p.prevPointOnContour;\n        }\n\n        return p;\n    };\n\n    /*\n    * The zero point.\n    */\n    var HPZero = Object.freeze(new HPoint(0, 0));\n\n    /*\n    * The default state of the interpreter.\n    *\n    * Note: Freezing the defaultState and then deriving from it\n    * makes the V8 Javascript engine going awkward,\n    * so this is avoided, albeit the defaultState shouldn't\n    * ever change.\n    */\n    var defaultState = {\n        cvCutIn: 17 / 16, // control value cut in\n        deltaBase: 9,\n        deltaShift: 0.125,\n        loop: 1, // loops some instructions\n        minDis: 1, // minimum distance\n        autoFlip: true\n    };\n\n    /*\n    * The current state of the interpreter.\n    *\n    * env  ... 'fpgm' or 'prep' or 'glyf'\n    * prog ... the program\n    */\n    function State(env, prog) {\n        this.env = env;\n        this.stack = [];\n        this.prog = prog;\n\n        switch (env) {\n            case 'glyf':\n                this.zp0 = this.zp1 = this.zp2 = 1;\n                this.rp0 = this.rp1 = this.rp2 = 0;\n            /* fall through */\n            case 'prep':\n                this.fv = this.pv = this.dpv = xUnitVector;\n                this.round = roundToGrid;\n        }\n    }\n\n    /*\n    * Executes a glyph program.\n    *\n    * This does the hinting for each glyph.\n    *\n    * Returns an array of moved points.\n    *\n    * glyph: the glyph to hint\n    * ppem: the size the glyph is rendered for\n    */\n    Hinting.prototype.exec = function (glyph, ppem) {\n        if (typeof ppem !== 'number') {\n            throw new Error('Point size is not a number!');\n        }\n\n        // Received a fatal error, don't do any hinting anymore.\n        if (this._errorState > 2) {\n            return;\n        }\n\n        var font = this.font;\n        var prepState = this._prepState;\n\n        if (!prepState || prepState.ppem !== ppem) {\n            var fpgmState = this._fpgmState;\n\n            if (!fpgmState) {\n                // Executes the fpgm state.\n                // This is used by fonts to define functions.\n                State.prototype = defaultState;\n\n                fpgmState = this._fpgmState = new State('fpgm', font.tables.fpgm);\n\n                fpgmState.funcs = [];\n                fpgmState.font = font;\n\n                if (exports.DEBUG) {\n                    console.log('---EXEC FPGM---');\n                    fpgmState.step = -1;\n                }\n\n                try {\n                    exec(fpgmState);\n                } catch (e) {\n                    console.log('Hinting error in FPGM:' + e);\n                    this._errorState = 3;\n                    return;\n                }\n            }\n\n            // Executes the prep program for this ppem setting.\n            // This is used by fonts to set cvt values\n            // depending on to be rendered font size.\n\n            State.prototype = fpgmState;\n            prepState = this._prepState = new State('prep', font.tables.prep);\n\n            prepState.ppem = ppem;\n\n            // Creates a copy of the cvt table\n            // and scales it to the current ppem setting.\n            var oCvt = font.tables.cvt;\n            if (oCvt) {\n                var cvt = prepState.cvt = new Array(oCvt.length);\n                var scale = ppem / font.unitsPerEm;\n                for (var c = 0; c < oCvt.length; c++) {\n                    cvt[c] = oCvt[c] * scale;\n                }\n            } else {\n                prepState.cvt = [];\n            }\n\n            if (exports.DEBUG) {\n                console.log('---EXEC PREP---');\n                prepState.step = -1;\n            }\n\n            try {\n                exec(prepState);\n            } catch (e) {\n                if (this._errorState < 2) {\n                    console.log('Hinting error in PREP:' + e);\n                }\n                this._errorState = 2;\n            }\n        }\n\n        if (this._errorState > 1) {\n            return;\n        }\n\n        try {\n            return execGlyph(glyph, prepState);\n        } catch (e) {\n            if (this._errorState < 1) {\n                console.log('Hinting error:' + e);\n                console.log('Note: further hinting errors are silenced');\n            }\n            this._errorState = 1;\n            return undefined;\n        }\n    };\n\n    /*\n    * Executes the hinting program for a glyph.\n    */\n    execGlyph = function execGlyph(glyph, prepState) {\n        // original point positions\n        var xScale = prepState.ppem / prepState.font.unitsPerEm;\n        var yScale = xScale;\n        var components = glyph.components;\n        var contours;\n        var gZone;\n        var state;\n\n        State.prototype = prepState;\n        if (!components) {\n            state = new State('glyf', glyph.instructions);\n            if (exports.DEBUG) {\n                console.log('---EXEC GLYPH---');\n                state.step = -1;\n            }\n            execComponent(glyph, state, xScale, yScale);\n            gZone = state.gZone;\n        } else {\n            var font = prepState.font;\n            gZone = [];\n            contours = [];\n            for (var i = 0; i < components.length; i++) {\n                var c = components[i];\n                var cg = font.glyphs.get(c.glyphIndex);\n\n                state = new State('glyf', cg.instructions);\n\n                if (exports.DEBUG) {\n                    console.log('---EXEC COMP ' + i + '---');\n                    state.step = -1;\n                }\n\n                execComponent(cg, state, xScale, yScale);\n                // appends the computed points to the result array\n                // post processes the component points\n                var dx = Math.round(c.dx * xScale);\n                var dy = Math.round(c.dy * yScale);\n                var gz = state.gZone;\n                var cc = state.contours;\n                for (var pi = 0; pi < gz.length; pi++) {\n                    var p = gz[pi];\n                    p.xTouched = p.yTouched = false;\n                    p.xo = p.x = p.x + dx;\n                    p.yo = p.y = p.y + dy;\n                }\n\n                var gLen = gZone.length;\n                gZone.push.apply(gZone, gz);\n                for (var j = 0; j < cc.length; j++) {\n                    contours.push(cc[j] + gLen);\n                }\n            }\n\n            if (glyph.instructions && !state.inhibitGridFit) {\n                // the composite has instructions on its own\n                state = new State('glyf', glyph.instructions);\n\n                state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n\n                state.contours = contours;\n\n                // note: HPZero cannot be used here, since\n                //       the point might be modified\n                gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));\n\n                if (exports.DEBUG) {\n                    console.log('---EXEC COMPOSITE---');\n                    state.step = -1;\n                }\n\n                exec(state);\n\n                gZone.length -= 2;\n            }\n        }\n\n        return gZone;\n    };\n\n    /*\n    * Executes the hinting program for a component of a multi-component glyph\n    * or of the glyph itself by a non-component glyph.\n    */\n    execComponent = function execComponent(glyph, state, xScale, yScale) {\n        var points = glyph.points || [];\n        var pLen = points.length;\n        var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];\n        var contours = state.contours = [];\n\n        // Scales the original points and\n        // makes copies for the hinted points.\n        var cp; // current point\n        for (var i = 0; i < pLen; i++) {\n            cp = points[i];\n\n            gZone[i] = new HPoint(cp.x * xScale, cp.y * yScale, cp.lastPointOfContour, cp.onCurve);\n        }\n\n        // Chain links the contours.\n        var sp; // start point\n        var np; // next point\n\n        for (var i$1 = 0; i$1 < pLen; i$1++) {\n            cp = gZone[i$1];\n\n            if (!sp) {\n                sp = cp;\n                contours.push(i$1);\n            }\n\n            if (cp.lastPointOfContour) {\n                cp.nextPointOnContour = sp;\n                sp.prevPointOnContour = cp;\n                sp = undefined;\n            } else {\n                np = gZone[i$1 + 1];\n                cp.nextPointOnContour = np;\n                np.prevPointOnContour = cp;\n            }\n        }\n\n        if (state.inhibitGridFit) {\n            return;\n        }\n\n        gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));\n\n        exec(state);\n\n        // Removes the extra points.\n        gZone.length -= 2;\n\n        if (exports.DEBUG) {\n            console.log('FINISHED GLYPH', state.stack);\n            for (var i$2 = 0; i$2 < pLen; i$2++) {\n                console.log(i$2, gZone[i$2].x, gZone[i$2].y);\n            }\n        }\n    };\n\n    /*\n    * Executes the program loaded in state.\n    */\n    exec = function exec(state) {\n        var prog = state.prog;\n\n        if (!prog) {\n            return;\n        }\n\n        var pLen = prog.length;\n        var ins;\n\n        for (state.ip = 0; state.ip < pLen; state.ip++) {\n            if (exports.DEBUG) {\n                state.step++;\n            }\n            ins = instructionTable[prog[state.ip]];\n\n            if (!ins) {\n                throw new Error('unknown instruction: 0x' + Number(prog[state.ip]).toString(16));\n            }\n\n            ins(state);\n\n            // very extensive debugging for each step\n            /*\n            if (exports.DEBUG) {\n                var da;\n                if (state.gZone) {\n                    da = [];\n                    for (let i = 0; i < state.gZone.length; i++)\n                    {\n                        da.push(i + ' ' +\n                            state.gZone[i].x * 64 + ' ' +\n                            state.gZone[i].y * 64 + ' ' +\n                            (state.gZone[i].xTouched ? 'x' : '') +\n                            (state.gZone[i].yTouched ? 'y' : '')\n                        );\n                    }\n                    console.log('GZ', da);\n                }\n                 if (state.tZone) {\n                    da = [];\n                    for (let i = 0; i < state.tZone.length; i++) {\n                        da.push(i + ' ' +\n                            state.tZone[i].x * 64 + ' ' +\n                            state.tZone[i].y * 64 + ' ' +\n                            (state.tZone[i].xTouched ? 'x' : '') +\n                            (state.tZone[i].yTouched ? 'y' : '')\n                        );\n                    }\n                    console.log('TZ', da);\n                }\n                 if (state.stack.length > 10) {\n                    console.log(\n                        state.stack.length,\n                        '...', state.stack.slice(state.stack.length - 10)\n                    );\n                } else {\n                    console.log(state.stack.length, state.stack);\n                }\n            }\n            */\n        }\n    };\n\n    /*\n    * Initializes the twilight zone.\n    *\n    * This is only done if a SZPx instruction\n    * refers to the twilight zone.\n    */\n    function initTZone(state) {\n        var tZone = state.tZone = new Array(state.gZone.length);\n\n        // no idea if this is actually correct...\n        for (var i = 0; i < tZone.length; i++) {\n            tZone[i] = new HPoint(0, 0);\n        }\n    }\n\n    /*\n    * Skips the instruction pointer ahead over an IF/ELSE block.\n    * handleElse .. if true breaks on matching ELSE\n    */\n    function skip(state, handleElse) {\n        var prog = state.prog;\n        var ip = state.ip;\n        var nesting = 1;\n        var ins;\n\n        do {\n            ins = prog[++ip];\n            if (ins === 0x58) // IF\n                {\n                    nesting++;\n                } else if (ins === 0x59) // EIF\n                {\n                    nesting--;\n                } else if (ins === 0x40) // NPUSHB\n                {\n                    ip += prog[ip + 1] + 1;\n                } else if (ins === 0x41) // NPUSHW\n                {\n                    ip += 2 * prog[ip + 1] + 1;\n                } else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB\n                {\n                    ip += ins - 0xB0 + 1;\n                } else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW\n                {\n                    ip += (ins - 0xB8 + 1) * 2;\n                } else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE\n                {\n                    break;\n                }\n        } while (nesting > 0);\n\n        state.ip = ip;\n    }\n\n    /*----------------------------------------------------------*\n    *          And then a lot of instructions...                *\n    *----------------------------------------------------------*/\n\n    // SVTCA[a] Set freedom and projection Vectors To Coordinate Axis\n    // 0x00-0x01\n    function SVTCA(v, state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'SVTCA[' + v.axis + ']');\n        }\n\n        state.fv = state.pv = state.dpv = v;\n    }\n\n    // SPVTCA[a] Set Projection Vector to Coordinate Axis\n    // 0x02-0x03\n    function SPVTCA(v, state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'SPVTCA[' + v.axis + ']');\n        }\n\n        state.pv = state.dpv = v;\n    }\n\n    // SFVTCA[a] Set Freedom Vector to Coordinate Axis\n    // 0x04-0x05\n    function SFVTCA(v, state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'SFVTCA[' + v.axis + ']');\n        }\n\n        state.fv = v;\n    }\n\n    // SPVTL[a] Set Projection Vector To Line\n    // 0x06-0x07\n    function SPVTL(a, state) {\n        var stack = state.stack;\n        var p2i = stack.pop();\n        var p1i = stack.pop();\n        var p2 = state.z2[p2i];\n        var p1 = state.z1[p1i];\n\n        if (exports.DEBUG) {\n            console.log('SPVTL[' + a + ']', p2i, p1i);\n        }\n\n        var dx;\n        var dy;\n\n        if (!a) {\n            dx = p1.x - p2.x;\n            dy = p1.y - p2.y;\n        } else {\n            dx = p2.y - p1.y;\n            dy = p1.x - p2.x;\n        }\n\n        state.pv = state.dpv = getUnitVector(dx, dy);\n    }\n\n    // SFVTL[a] Set Freedom Vector To Line\n    // 0x08-0x09\n    function SFVTL(a, state) {\n        var stack = state.stack;\n        var p2i = stack.pop();\n        var p1i = stack.pop();\n        var p2 = state.z2[p2i];\n        var p1 = state.z1[p1i];\n\n        if (exports.DEBUG) {\n            console.log('SFVTL[' + a + ']', p2i, p1i);\n        }\n\n        var dx;\n        var dy;\n\n        if (!a) {\n            dx = p1.x - p2.x;\n            dy = p1.y - p2.y;\n        } else {\n            dx = p2.y - p1.y;\n            dy = p1.x - p2.x;\n        }\n\n        state.fv = getUnitVector(dx, dy);\n    }\n\n    // SPVFS[] Set Projection Vector From Stack\n    // 0x0A\n    function SPVFS(state) {\n        var stack = state.stack;\n        var y = stack.pop();\n        var x = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SPVFS[]', y, x);\n        }\n\n        state.pv = state.dpv = getUnitVector(x, y);\n    }\n\n    // SFVFS[] Set Freedom Vector From Stack\n    // 0x0B\n    function SFVFS(state) {\n        var stack = state.stack;\n        var y = stack.pop();\n        var x = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SPVFS[]', y, x);\n        }\n\n        state.fv = getUnitVector(x, y);\n    }\n\n    // GPV[] Get Projection Vector\n    // 0x0C\n    function GPV(state) {\n        var stack = state.stack;\n        var pv = state.pv;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'GPV[]');\n        }\n\n        stack.push(pv.x * 0x4000);\n        stack.push(pv.y * 0x4000);\n    }\n\n    // GFV[] Get Freedom Vector\n    // 0x0C\n    function GFV(state) {\n        var stack = state.stack;\n        var fv = state.fv;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'GFV[]');\n        }\n\n        stack.push(fv.x * 0x4000);\n        stack.push(fv.y * 0x4000);\n    }\n\n    // SFVTPV[] Set Freedom Vector To Projection Vector\n    // 0x0E\n    function SFVTPV(state) {\n        state.fv = state.pv;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SFVTPV[]');\n        }\n    }\n\n    // ISECT[] moves point p to the InterSECTion of two lines\n    // 0x0F\n    function ISECT(state) {\n        var stack = state.stack;\n        var pa0i = stack.pop();\n        var pa1i = stack.pop();\n        var pb0i = stack.pop();\n        var pb1i = stack.pop();\n        var pi = stack.pop();\n        var z0 = state.z0;\n        var z1 = state.z1;\n        var pa0 = z0[pa0i];\n        var pa1 = z0[pa1i];\n        var pb0 = z1[pb0i];\n        var pb1 = z1[pb1i];\n        var p = state.z2[pi];\n\n        if (exports.DEBUG) {\n            console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi);\n        }\n\n        // math from\n        // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n\n        var x1 = pa0.x;\n        var y1 = pa0.y;\n        var x2 = pa1.x;\n        var y2 = pa1.y;\n        var x3 = pb0.x;\n        var y3 = pb0.y;\n        var x4 = pb1.x;\n        var y4 = pb1.y;\n\n        var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n        var f1 = x1 * y2 - y1 * x2;\n        var f2 = x3 * y4 - y3 * x4;\n\n        p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n        p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n    }\n\n    // SRP0[] Set Reference Point 0\n    // 0x10\n    function SRP0(state) {\n        state.rp0 = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SRP0[]', state.rp0);\n        }\n    }\n\n    // SRP1[] Set Reference Point 1\n    // 0x11\n    function SRP1(state) {\n        state.rp1 = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SRP1[]', state.rp1);\n        }\n    }\n\n    // SRP1[] Set Reference Point 2\n    // 0x12\n    function SRP2(state) {\n        state.rp2 = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SRP2[]', state.rp2);\n        }\n    }\n\n    // SZP0[] Set Zone Pointer 0\n    // 0x13\n    function SZP0(state) {\n        var n = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SZP0[]', n);\n        }\n\n        state.zp0 = n;\n\n        switch (n) {\n            case 0:\n                if (!state.tZone) {\n                    initTZone(state);\n                }\n                state.z0 = state.tZone;\n                break;\n            case 1:\n                state.z0 = state.gZone;\n                break;\n            default:\n                throw new Error('Invalid zone pointer');\n        }\n    }\n\n    // SZP1[] Set Zone Pointer 1\n    // 0x14\n    function SZP1(state) {\n        var n = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SZP1[]', n);\n        }\n\n        state.zp1 = n;\n\n        switch (n) {\n            case 0:\n                if (!state.tZone) {\n                    initTZone(state);\n                }\n                state.z1 = state.tZone;\n                break;\n            case 1:\n                state.z1 = state.gZone;\n                break;\n            default:\n                throw new Error('Invalid zone pointer');\n        }\n    }\n\n    // SZP2[] Set Zone Pointer 2\n    // 0x15\n    function SZP2(state) {\n        var n = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SZP2[]', n);\n        }\n\n        state.zp2 = n;\n\n        switch (n) {\n            case 0:\n                if (!state.tZone) {\n                    initTZone(state);\n                }\n                state.z2 = state.tZone;\n                break;\n            case 1:\n                state.z2 = state.gZone;\n                break;\n            default:\n                throw new Error('Invalid zone pointer');\n        }\n    }\n\n    // SZPS[] Set Zone PointerS\n    // 0x16\n    function SZPS(state) {\n        var n = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SZPS[]', n);\n        }\n\n        state.zp0 = state.zp1 = state.zp2 = n;\n\n        switch (n) {\n            case 0:\n                if (!state.tZone) {\n                    initTZone(state);\n                }\n                state.z0 = state.z1 = state.z2 = state.tZone;\n                break;\n            case 1:\n                state.z0 = state.z1 = state.z2 = state.gZone;\n                break;\n            default:\n                throw new Error('Invalid zone pointer');\n        }\n    }\n\n    // SLOOP[] Set LOOP variable\n    // 0x17\n    function SLOOP(state) {\n        state.loop = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SLOOP[]', state.loop);\n        }\n    }\n\n    // RTG[] Round To Grid\n    // 0x18\n    function RTG(state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'RTG[]');\n        }\n\n        state.round = roundToGrid;\n    }\n\n    // RTHG[] Round To Half Grid\n    // 0x19\n    function RTHG(state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'RTHG[]');\n        }\n\n        state.round = roundToHalfGrid;\n    }\n\n    // SMD[] Set Minimum Distance\n    // 0x1A\n    function SMD(state) {\n        var d = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SMD[]', d);\n        }\n\n        state.minDis = d / 0x40;\n    }\n\n    // ELSE[] ELSE clause\n    // 0x1B\n    function ELSE(state) {\n        // This instruction has been reached by executing a then branch\n        // so it just skips ahead until matching EIF.\n        //\n        // In case the IF was negative the IF[] instruction already\n        // skipped forward over the ELSE[]\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'ELSE[]');\n        }\n\n        skip(state, false);\n    }\n\n    // JMPR[] JuMP Relative\n    // 0x1C\n    function JMPR(state) {\n        var o = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'JMPR[]', o);\n        }\n\n        // A jump by 1 would do nothing.\n        state.ip += o - 1;\n    }\n\n    // SCVTCI[] Set Control Value Table Cut-In\n    // 0x1D\n    function SCVTCI(state) {\n        var n = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SCVTCI[]', n);\n        }\n\n        state.cvCutIn = n / 0x40;\n    }\n\n    // DUP[] DUPlicate top stack element\n    // 0x20\n    function DUP(state) {\n        var stack = state.stack;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'DUP[]');\n        }\n\n        stack.push(stack[stack.length - 1]);\n    }\n\n    // POP[] POP top stack element\n    // 0x21\n    function POP(state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'POP[]');\n        }\n\n        state.stack.pop();\n    }\n\n    // CLEAR[] CLEAR the stack\n    // 0x22\n    function CLEAR(state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'CLEAR[]');\n        }\n\n        state.stack.length = 0;\n    }\n\n    // SWAP[] SWAP the top two elements on the stack\n    // 0x23\n    function SWAP(state) {\n        var stack = state.stack;\n\n        var a = stack.pop();\n        var b = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SWAP[]');\n        }\n\n        stack.push(a);\n        stack.push(b);\n    }\n\n    // DEPTH[] DEPTH of the stack\n    // 0x24\n    function DEPTH(state) {\n        var stack = state.stack;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'DEPTH[]');\n        }\n\n        stack.push(stack.length);\n    }\n\n    // LOOPCALL[] LOOPCALL function\n    // 0x2A\n    function LOOPCALL(state) {\n        var stack = state.stack;\n        var fn = stack.pop();\n        var c = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'LOOPCALL[]', fn, c);\n        }\n\n        // saves callers program\n        var cip = state.ip;\n        var cprog = state.prog;\n\n        state.prog = state.funcs[fn];\n\n        // executes the function\n        for (var i = 0; i < c; i++) {\n            exec(state);\n\n            if (exports.DEBUG) {\n                console.log(++state.step, i + 1 < c ? 'next loopcall' : 'done loopcall', i);\n            }\n        }\n\n        // restores the callers program\n        state.ip = cip;\n        state.prog = cprog;\n    }\n\n    // CALL[] CALL function\n    // 0x2B\n    function CALL(state) {\n        var fn = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'CALL[]', fn);\n        }\n\n        // saves callers program\n        var cip = state.ip;\n        var cprog = state.prog;\n\n        state.prog = state.funcs[fn];\n\n        // executes the function\n        exec(state);\n\n        // restores the callers program\n        state.ip = cip;\n        state.prog = cprog;\n\n        if (exports.DEBUG) {\n            console.log(++state.step, 'returning from', fn);\n        }\n    }\n\n    // CINDEX[] Copy the INDEXed element to the top of the stack\n    // 0x25\n    function CINDEX(state) {\n        var stack = state.stack;\n        var k = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'CINDEX[]', k);\n        }\n\n        // In case of k == 1, it copies the last element after popping\n        // thus stack.length - k.\n        stack.push(stack[stack.length - k]);\n    }\n\n    // MINDEX[] Move the INDEXed element to the top of the stack\n    // 0x26\n    function MINDEX(state) {\n        var stack = state.stack;\n        var k = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'MINDEX[]', k);\n        }\n\n        stack.push(stack.splice(stack.length - k, 1)[0]);\n    }\n\n    // FDEF[] Function DEFinition\n    // 0x2C\n    function FDEF(state) {\n        if (state.env !== 'fpgm') {\n            throw new Error('FDEF not allowed here');\n        }\n        var stack = state.stack;\n        var prog = state.prog;\n        var ip = state.ip;\n\n        var fn = stack.pop();\n        var ipBegin = ip;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'FDEF[]', fn);\n        }\n\n        while (prog[++ip] !== 0x2D) {}\n\n        state.ip = ip;\n        state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n    }\n\n    // MDAP[a] Move Direct Absolute Point\n    // 0x2E-0x2F\n    function MDAP(round, state) {\n        var pi = state.stack.pop();\n        var p = state.z0[pi];\n        var fv = state.fv;\n        var pv = state.pv;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'MDAP[' + round + ']', pi);\n        }\n\n        var d = pv.distance(p, HPZero);\n\n        if (round) {\n            d = state.round(d);\n        }\n\n        fv.setRelative(p, HPZero, d, pv);\n        fv.touch(p);\n\n        state.rp0 = state.rp1 = pi;\n    }\n\n    // IUP[a] Interpolate Untouched Points through the outline\n    // 0x30\n    function IUP(v, state) {\n        var z2 = state.z2;\n        var pLen = z2.length - 2;\n        var cp;\n        var pp;\n        var np;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'IUP[' + v.axis + ']');\n        }\n\n        for (var i = 0; i < pLen; i++) {\n            cp = z2[i]; // current point\n\n            // if this point has been touched go on\n            if (v.touched(cp)) {\n                continue;\n            }\n\n            pp = cp.prevTouched(v);\n\n            // no point on the contour has been touched?\n            if (pp === cp) {\n                continue;\n            }\n\n            np = cp.nextTouched(v);\n\n            if (pp === np) {\n                // only one point on the contour has been touched\n                // so simply moves the point like that\n\n                v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n            }\n\n            v.interpolate(cp, pp, np, v);\n        }\n    }\n\n    // SHP[] SHift Point using reference point\n    // 0x32-0x33\n    function SHP(a, state) {\n        var stack = state.stack;\n        var rpi = a ? state.rp1 : state.rp2;\n        var rp = (a ? state.z0 : state.z1)[rpi];\n        var fv = state.fv;\n        var pv = state.pv;\n        var loop = state.loop;\n        var z2 = state.z2;\n\n        while (loop--) {\n            var pi = stack.pop();\n            var p = z2[pi];\n\n            var d = pv.distance(rp, rp, false, true);\n            fv.setRelative(p, p, d, pv);\n            fv.touch(p);\n\n            if (exports.DEBUG) {\n                console.log(state.step, (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') + 'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi);\n            }\n        }\n\n        state.loop = 1;\n    }\n\n    // SHC[] SHift Contour using reference point\n    // 0x36-0x37\n    function SHC(a, state) {\n        var stack = state.stack;\n        var rpi = a ? state.rp1 : state.rp2;\n        var rp = (a ? state.z0 : state.z1)[rpi];\n        var fv = state.fv;\n        var pv = state.pv;\n        var ci = stack.pop();\n        var sp = state.z2[state.contours[ci]];\n        var p = sp;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SHC[' + a + ']', ci);\n        }\n\n        var d = pv.distance(rp, rp, false, true);\n\n        do {\n            if (p !== rp) {\n                fv.setRelative(p, p, d, pv);\n            }\n            p = p.nextPointOnContour;\n        } while (p !== sp);\n    }\n\n    // SHZ[] SHift Zone using reference point\n    // 0x36-0x37\n    function SHZ(a, state) {\n        var stack = state.stack;\n        var rpi = a ? state.rp1 : state.rp2;\n        var rp = (a ? state.z0 : state.z1)[rpi];\n        var fv = state.fv;\n        var pv = state.pv;\n\n        var e = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SHZ[' + a + ']', e);\n        }\n\n        var z;\n        switch (e) {\n            case 0:\n                z = state.tZone;break;\n            case 1:\n                z = state.gZone;break;\n            default:\n                throw new Error('Invalid zone');\n        }\n\n        var p;\n        var d = pv.distance(rp, rp, false, true);\n        var pLen = z.length - 2;\n        for (var i = 0; i < pLen; i++) {\n            p = z[i];\n            if (p !== rp) {\n                fv.setRelative(p, p, d, pv);\n            }\n        }\n    }\n\n    // SHPIX[] SHift point by a PIXel amount\n    // 0x38\n    function SHPIX(state) {\n        var stack = state.stack;\n        var loop = state.loop;\n        var fv = state.fv;\n        var d = stack.pop() / 0x40;\n        var z2 = state.z2;\n\n        while (loop--) {\n            var pi = stack.pop();\n            var p = z2[pi];\n\n            if (exports.DEBUG) {\n                console.log(state.step, (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') + 'SHPIX[]', pi, d);\n            }\n\n            fv.setRelative(p, p, d);\n            fv.touch(p);\n        }\n\n        state.loop = 1;\n    }\n\n    // IP[] Interpolate Point\n    // 0x39\n    function IP(state) {\n        var stack = state.stack;\n        var rp1i = state.rp1;\n        var rp2i = state.rp2;\n        var loop = state.loop;\n        var rp1 = state.z0[rp1i];\n        var rp2 = state.z1[rp2i];\n        var fv = state.fv;\n        var pv = state.dpv;\n        var z2 = state.z2;\n\n        while (loop--) {\n            var pi = stack.pop();\n            var p = z2[pi];\n\n            if (exports.DEBUG) {\n                console.log(state.step, (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') + 'IP[]', pi, rp1i, '<->', rp2i);\n            }\n\n            fv.interpolate(p, rp1, rp2, pv);\n\n            fv.touch(p);\n        }\n\n        state.loop = 1;\n    }\n\n    // MSIRP[a] Move Stack Indirect Relative Point\n    // 0x3A-0x3B\n    function MSIRP(a, state) {\n        var stack = state.stack;\n        var d = stack.pop() / 64;\n        var pi = stack.pop();\n        var p = state.z1[pi];\n        var rp0 = state.z0[state.rp0];\n        var fv = state.fv;\n        var pv = state.pv;\n\n        fv.setRelative(p, rp0, d, pv);\n        fv.touch(p);\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'MSIRP[' + a + ']', d, pi);\n        }\n\n        state.rp1 = state.rp0;\n        state.rp2 = pi;\n        if (a) {\n            state.rp0 = pi;\n        }\n    }\n\n    // ALIGNRP[] Align to reference point.\n    // 0x3C\n    function ALIGNRP(state) {\n        var stack = state.stack;\n        var rp0i = state.rp0;\n        var rp0 = state.z0[rp0i];\n        var loop = state.loop;\n        var fv = state.fv;\n        var pv = state.pv;\n        var z1 = state.z1;\n\n        while (loop--) {\n            var pi = stack.pop();\n            var p = z1[pi];\n\n            if (exports.DEBUG) {\n                console.log(state.step, (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') + 'ALIGNRP[]', pi);\n            }\n\n            fv.setRelative(p, rp0, 0, pv);\n            fv.touch(p);\n        }\n\n        state.loop = 1;\n    }\n\n    // RTG[] Round To Double Grid\n    // 0x3D\n    function RTDG(state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'RTDG[]');\n        }\n\n        state.round = roundToDoubleGrid;\n    }\n\n    // MIAP[a] Move Indirect Absolute Point\n    // 0x3E-0x3F\n    function MIAP(round, state) {\n        var stack = state.stack;\n        var n = stack.pop();\n        var pi = stack.pop();\n        var p = state.z0[pi];\n        var fv = state.fv;\n        var pv = state.pv;\n        var cv = state.cvt[n];\n\n        // TODO cvtcutin should be considered here\n        if (round) {\n            cv = state.round(cv);\n        }\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'MIAP[' + round + ']', n, '(', cv, ')', pi);\n        }\n\n        fv.setRelative(p, HPZero, cv, pv);\n\n        if (state.zp0 === 0) {\n            p.xo = p.x;\n            p.yo = p.y;\n        }\n\n        fv.touch(p);\n\n        state.rp0 = state.rp1 = pi;\n    }\n\n    // NPUSB[] PUSH N Bytes\n    // 0x40\n    function NPUSHB(state) {\n        var prog = state.prog;\n        var ip = state.ip;\n        var stack = state.stack;\n\n        var n = prog[++ip];\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'NPUSHB[]', n);\n        }\n\n        for (var i = 0; i < n; i++) {\n            stack.push(prog[++ip]);\n        }\n\n        state.ip = ip;\n    }\n\n    // NPUSHW[] PUSH N Words\n    // 0x41\n    function NPUSHW(state) {\n        var ip = state.ip;\n        var prog = state.prog;\n        var stack = state.stack;\n        var n = prog[++ip];\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'NPUSHW[]', n);\n        }\n\n        for (var i = 0; i < n; i++) {\n            var w = prog[++ip] << 8 | prog[++ip];\n            if (w & 0x8000) {\n                w = -((w ^ 0xffff) + 1);\n            }\n            stack.push(w);\n        }\n\n        state.ip = ip;\n    }\n\n    // WS[] Write Store\n    // 0x42\n    function WS(state) {\n        var stack = state.stack;\n        var store = state.store;\n\n        if (!store) {\n            store = state.store = [];\n        }\n\n        var v = stack.pop();\n        var l = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'WS', v, l);\n        }\n\n        store[l] = v;\n    }\n\n    // RS[] Read Store\n    // 0x43\n    function RS(state) {\n        var stack = state.stack;\n        var store = state.store;\n\n        var l = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'RS', l);\n        }\n\n        var v = store && store[l] || 0;\n\n        stack.push(v);\n    }\n\n    // WCVTP[] Write Control Value Table in Pixel units\n    // 0x44\n    function WCVTP(state) {\n        var stack = state.stack;\n\n        var v = stack.pop();\n        var l = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'WCVTP', v, l);\n        }\n\n        state.cvt[l] = v / 0x40;\n    }\n\n    // RCVT[] Read Control Value Table entry\n    // 0x45\n    function RCVT(state) {\n        var stack = state.stack;\n        var cvte = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'RCVT', cvte);\n        }\n\n        stack.push(state.cvt[cvte] * 0x40);\n    }\n\n    // GC[] Get Coordinate projected onto the projection vector\n    // 0x46-0x47\n    function GC(a, state) {\n        var stack = state.stack;\n        var pi = stack.pop();\n        var p = state.z2[pi];\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'GC[' + a + ']', pi);\n        }\n\n        stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);\n    }\n\n    // MD[a] Measure Distance\n    // 0x49-0x4A\n    function MD(a, state) {\n        var stack = state.stack;\n        var pi2 = stack.pop();\n        var pi1 = stack.pop();\n        var p2 = state.z1[pi2];\n        var p1 = state.z0[pi1];\n        var d = state.dpv.distance(p1, p2, a, a);\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d);\n        }\n\n        state.stack.push(Math.round(d * 64));\n    }\n\n    // MPPEM[] Measure Pixels Per EM\n    // 0x4B\n    function MPPEM(state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'MPPEM[]');\n        }\n        state.stack.push(state.ppem);\n    }\n\n    // FLIPON[] set the auto FLIP Boolean to ON\n    // 0x4D\n    function FLIPON(state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'FLIPON[]');\n        }\n        state.autoFlip = true;\n    }\n\n    // LT[] Less Than\n    // 0x50\n    function LT(state) {\n        var stack = state.stack;\n        var e2 = stack.pop();\n        var e1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'LT[]', e2, e1);\n        }\n\n        stack.push(e1 < e2 ? 1 : 0);\n    }\n\n    // LTEQ[] Less Than or EQual\n    // 0x53\n    function LTEQ(state) {\n        var stack = state.stack;\n        var e2 = stack.pop();\n        var e1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'LTEQ[]', e2, e1);\n        }\n\n        stack.push(e1 <= e2 ? 1 : 0);\n    }\n\n    // GTEQ[] Greater Than\n    // 0x52\n    function GT(state) {\n        var stack = state.stack;\n        var e2 = stack.pop();\n        var e1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'GT[]', e2, e1);\n        }\n\n        stack.push(e1 > e2 ? 1 : 0);\n    }\n\n    // GTEQ[] Greater Than or EQual\n    // 0x53\n    function GTEQ(state) {\n        var stack = state.stack;\n        var e2 = stack.pop();\n        var e1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'GTEQ[]', e2, e1);\n        }\n\n        stack.push(e1 >= e2 ? 1 : 0);\n    }\n\n    // EQ[] EQual\n    // 0x54\n    function EQ(state) {\n        var stack = state.stack;\n        var e2 = stack.pop();\n        var e1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'EQ[]', e2, e1);\n        }\n\n        stack.push(e2 === e1 ? 1 : 0);\n    }\n\n    // NEQ[] Not EQual\n    // 0x55\n    function NEQ(state) {\n        var stack = state.stack;\n        var e2 = stack.pop();\n        var e1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'NEQ[]', e2, e1);\n        }\n\n        stack.push(e2 !== e1 ? 1 : 0);\n    }\n\n    // ODD[] ODD\n    // 0x56\n    function ODD(state) {\n        var stack = state.stack;\n        var n = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'ODD[]', n);\n        }\n\n        stack.push(Math.trunc(n) % 2 ? 1 : 0);\n    }\n\n    // EVEN[] EVEN\n    // 0x57\n    function EVEN(state) {\n        var stack = state.stack;\n        var n = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'EVEN[]', n);\n        }\n\n        stack.push(Math.trunc(n) % 2 ? 0 : 1);\n    }\n\n    // IF[] IF test\n    // 0x58\n    function IF(state) {\n        var test = state.stack.pop();\n        var ins;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'IF[]', test);\n        }\n\n        // if test is true it just continues\n        // if not the ip is skipped until matching ELSE or EIF\n        if (!test) {\n            skip(state, true);\n\n            if (exports.DEBUG) {\n                console.log(state.step, ins === 0x1B ? 'ELSE[]' : 'EIF[]');\n            }\n        }\n    }\n\n    // EIF[] End IF\n    // 0x59\n    function EIF(state) {\n        // this can be reached normally when\n        // executing an else branch.\n        // -> just ignore it\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'EIF[]');\n        }\n    }\n\n    // AND[] logical AND\n    // 0x5A\n    function AND(state) {\n        var stack = state.stack;\n        var e2 = stack.pop();\n        var e1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'AND[]', e2, e1);\n        }\n\n        stack.push(e2 && e1 ? 1 : 0);\n    }\n\n    // OR[] logical OR\n    // 0x5B\n    function OR(state) {\n        var stack = state.stack;\n        var e2 = stack.pop();\n        var e1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'OR[]', e2, e1);\n        }\n\n        stack.push(e2 || e1 ? 1 : 0);\n    }\n\n    // NOT[] logical NOT\n    // 0x5C\n    function NOT(state) {\n        var stack = state.stack;\n        var e = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'NOT[]', e);\n        }\n\n        stack.push(e ? 0 : 1);\n    }\n\n    // DELTAP1[] DELTA exception P1\n    // DELTAP2[] DELTA exception P2\n    // DELTAP3[] DELTA exception P3\n    // 0x5D, 0x71, 0x72\n    function DELTAP123(b, state) {\n        var stack = state.stack;\n        var n = stack.pop();\n        var fv = state.fv;\n        var pv = state.pv;\n        var ppem = state.ppem;\n        var base = state.deltaBase + (b - 1) * 16;\n        var ds = state.deltaShift;\n        var z0 = state.z0;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'DELTAP[' + b + ']', n, stack);\n        }\n\n        for (var i = 0; i < n; i++) {\n            var pi = stack.pop();\n            var arg = stack.pop();\n            var appem = base + ((arg & 0xF0) >> 4);\n            if (appem !== ppem) {\n                continue;\n            }\n\n            var mag = (arg & 0x0F) - 8;\n            if (mag >= 0) {\n                mag++;\n            }\n            if (exports.DEBUG) {\n                console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds);\n            }\n\n            var p = z0[pi];\n            fv.setRelative(p, p, mag * ds, pv);\n        }\n    }\n\n    // SDB[] Set Delta Base in the graphics state\n    // 0x5E\n    function SDB(state) {\n        var stack = state.stack;\n        var n = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SDB[]', n);\n        }\n\n        state.deltaBase = n;\n    }\n\n    // SDS[] Set Delta Shift in the graphics state\n    // 0x5F\n    function SDS(state) {\n        var stack = state.stack;\n        var n = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SDS[]', n);\n        }\n\n        state.deltaShift = Math.pow(0.5, n);\n    }\n\n    // ADD[] ADD\n    // 0x60\n    function ADD(state) {\n        var stack = state.stack;\n        var n2 = stack.pop();\n        var n1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'ADD[]', n2, n1);\n        }\n\n        stack.push(n1 + n2);\n    }\n\n    // SUB[] SUB\n    // 0x61\n    function SUB(state) {\n        var stack = state.stack;\n        var n2 = stack.pop();\n        var n1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SUB[]', n2, n1);\n        }\n\n        stack.push(n1 - n2);\n    }\n\n    // DIV[] DIV\n    // 0x62\n    function DIV(state) {\n        var stack = state.stack;\n        var n2 = stack.pop();\n        var n1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'DIV[]', n2, n1);\n        }\n\n        stack.push(n1 * 64 / n2);\n    }\n\n    // MUL[] MUL\n    // 0x63\n    function MUL(state) {\n        var stack = state.stack;\n        var n2 = stack.pop();\n        var n1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'MUL[]', n2, n1);\n        }\n\n        stack.push(n1 * n2 / 64);\n    }\n\n    // ABS[] ABSolute value\n    // 0x64\n    function ABS(state) {\n        var stack = state.stack;\n        var n = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'ABS[]', n);\n        }\n\n        stack.push(Math.abs(n));\n    }\n\n    // NEG[] NEGate\n    // 0x65\n    function NEG(state) {\n        var stack = state.stack;\n        var n = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'NEG[]', n);\n        }\n\n        stack.push(-n);\n    }\n\n    // FLOOR[] FLOOR\n    // 0x66\n    function FLOOR(state) {\n        var stack = state.stack;\n        var n = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'FLOOR[]', n);\n        }\n\n        stack.push(Math.floor(n / 0x40) * 0x40);\n    }\n\n    // CEILING[] CEILING\n    // 0x67\n    function CEILING(state) {\n        var stack = state.stack;\n        var n = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'CEILING[]', n);\n        }\n\n        stack.push(Math.ceil(n / 0x40) * 0x40);\n    }\n\n    // ROUND[ab] ROUND value\n    // 0x68-0x6B\n    function ROUND(dt, state) {\n        var stack = state.stack;\n        var n = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'ROUND[]');\n        }\n\n        stack.push(state.round(n / 0x40) * 0x40);\n    }\n\n    // WCVTF[] Write Control Value Table in Funits\n    // 0x70\n    function WCVTF(state) {\n        var stack = state.stack;\n        var v = stack.pop();\n        var l = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'WCVTF[]', v, l);\n        }\n\n        state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n    }\n\n    // DELTAC1[] DELTA exception C1\n    // DELTAC2[] DELTA exception C2\n    // DELTAC3[] DELTA exception C3\n    // 0x73, 0x74, 0x75\n    function DELTAC123(b, state) {\n        var stack = state.stack;\n        var n = stack.pop();\n        var ppem = state.ppem;\n        var base = state.deltaBase + (b - 1) * 16;\n        var ds = state.deltaShift;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'DELTAC[' + b + ']', n, stack);\n        }\n\n        for (var i = 0; i < n; i++) {\n            var c = stack.pop();\n            var arg = stack.pop();\n            var appem = base + ((arg & 0xF0) >> 4);\n            if (appem !== ppem) {\n                continue;\n            }\n\n            var mag = (arg & 0x0F) - 8;\n            if (mag >= 0) {\n                mag++;\n            }\n\n            var delta = mag * ds;\n\n            if (exports.DEBUG) {\n                console.log(state.step, 'DELTACFIX', c, 'by', delta);\n            }\n\n            state.cvt[c] += delta;\n        }\n    }\n\n    // SROUND[] Super ROUND\n    // 0x76\n    function SROUND(state) {\n        var n = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SROUND[]', n);\n        }\n\n        state.round = roundSuper;\n\n        var period;\n\n        switch (n & 0xC0) {\n            case 0x00:\n                period = 0.5;\n                break;\n            case 0x40:\n                period = 1;\n                break;\n            case 0x80:\n                period = 2;\n                break;\n            default:\n                throw new Error('invalid SROUND value');\n        }\n\n        state.srPeriod = period;\n\n        switch (n & 0x30) {\n            case 0x00:\n                state.srPhase = 0;\n                break;\n            case 0x10:\n                state.srPhase = 0.25 * period;\n                break;\n            case 0x20:\n                state.srPhase = 0.5 * period;\n                break;\n            case 0x30:\n                state.srPhase = 0.75 * period;\n                break;\n            default:\n                throw new Error('invalid SROUND value');\n        }\n\n        n &= 0x0F;\n\n        if (n === 0) {\n            state.srThreshold = 0;\n        } else {\n            state.srThreshold = (n / 8 - 0.5) * period;\n        }\n    }\n\n    // S45ROUND[] Super ROUND 45 degrees\n    // 0x77\n    function S45ROUND(state) {\n        var n = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'S45ROUND[]', n);\n        }\n\n        state.round = roundSuper;\n\n        var period;\n\n        switch (n & 0xC0) {\n            case 0x00:\n                period = Math.sqrt(2) / 2;\n                break;\n            case 0x40:\n                period = Math.sqrt(2);\n                break;\n            case 0x80:\n                period = 2 * Math.sqrt(2);\n                break;\n            default:\n                throw new Error('invalid S45ROUND value');\n        }\n\n        state.srPeriod = period;\n\n        switch (n & 0x30) {\n            case 0x00:\n                state.srPhase = 0;\n                break;\n            case 0x10:\n                state.srPhase = 0.25 * period;\n                break;\n            case 0x20:\n                state.srPhase = 0.5 * period;\n                break;\n            case 0x30:\n                state.srPhase = 0.75 * period;\n                break;\n            default:\n                throw new Error('invalid S45ROUND value');\n        }\n\n        n &= 0x0F;\n\n        if (n === 0) {\n            state.srThreshold = 0;\n        } else {\n            state.srThreshold = (n / 8 - 0.5) * period;\n        }\n    }\n\n    // ROFF[] Round Off\n    // 0x7A\n    function ROFF(state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'ROFF[]');\n        }\n\n        state.round = roundOff;\n    }\n\n    // RUTG[] Round Up To Grid\n    // 0x7C\n    function RUTG(state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'RUTG[]');\n        }\n\n        state.round = roundUpToGrid;\n    }\n\n    // RDTG[] Round Down To Grid\n    // 0x7D\n    function RDTG(state) {\n        if (exports.DEBUG) {\n            console.log(state.step, 'RDTG[]');\n        }\n\n        state.round = roundDownToGrid;\n    }\n\n    // SCANCTRL[] SCAN conversion ConTRoL\n    // 0x85\n    function SCANCTRL(state) {\n        var n = state.stack.pop();\n\n        // ignored by opentype.js\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'SCANCTRL[]', n);\n        }\n    }\n\n    // SDPVTL[a] Set Dual Projection Vector To Line\n    // 0x86-0x87\n    function SDPVTL(a, state) {\n        var stack = state.stack;\n        var p2i = stack.pop();\n        var p1i = stack.pop();\n        var p2 = state.z2[p2i];\n        var p1 = state.z1[p1i];\n\n        if (exports.DEBUG) {\n            console.log('SDPVTL[' + a + ']', p2i, p1i);\n        }\n\n        var dx;\n        var dy;\n\n        if (!a) {\n            dx = p1.x - p2.x;\n            dy = p1.y - p2.y;\n        } else {\n            dx = p2.y - p1.y;\n            dy = p1.x - p2.x;\n        }\n\n        state.dpv = getUnitVector(dx, dy);\n    }\n\n    // GETINFO[] GET INFOrmation\n    // 0x88\n    function GETINFO(state) {\n        var stack = state.stack;\n        var sel = stack.pop();\n        var r = 0;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'GETINFO[]', sel);\n        }\n\n        // v35 as in no subpixel hinting\n        if (sel & 0x01) {\n            r = 35;\n        }\n\n        // TODO rotation and stretch currently not supported\n        // and thus those GETINFO are always 0.\n\n        // opentype.js is always gray scaling\n        if (sel & 0x20) {\n            r |= 0x1000;\n        }\n\n        stack.push(r);\n    }\n\n    // ROLL[] ROLL the top three stack elements\n    // 0x8A\n    function ROLL(state) {\n        var stack = state.stack;\n        var a = stack.pop();\n        var b = stack.pop();\n        var c = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'ROLL[]');\n        }\n\n        stack.push(b);\n        stack.push(a);\n        stack.push(c);\n    }\n\n    // MAX[] MAXimum of top two stack elements\n    // 0x8B\n    function MAX(state) {\n        var stack = state.stack;\n        var e2 = stack.pop();\n        var e1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'MAX[]', e2, e1);\n        }\n\n        stack.push(Math.max(e1, e2));\n    }\n\n    // MIN[] MINimum of top two stack elements\n    // 0x8C\n    function MIN(state) {\n        var stack = state.stack;\n        var e2 = stack.pop();\n        var e1 = stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'MIN[]', e2, e1);\n        }\n\n        stack.push(Math.min(e1, e2));\n    }\n\n    // SCANTYPE[] SCANTYPE\n    // 0x8D\n    function SCANTYPE(state) {\n        var n = state.stack.pop();\n        // ignored by opentype.js\n        if (exports.DEBUG) {\n            console.log(state.step, 'SCANTYPE[]', n);\n        }\n    }\n\n    // INSTCTRL[] INSTCTRL\n    // 0x8D\n    function INSTCTRL(state) {\n        var s = state.stack.pop();\n        var v = state.stack.pop();\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'INSTCTRL[]', s, v);\n        }\n\n        switch (s) {\n            case 1:\n                state.inhibitGridFit = !!v;return;\n            case 2:\n                state.ignoreCvt = !!v;return;\n            default:\n                throw new Error('invalid INSTCTRL[] selector');\n        }\n    }\n\n    // PUSHB[abc] PUSH Bytes\n    // 0xB0-0xB7\n    function PUSHB(n, state) {\n        var stack = state.stack;\n        var prog = state.prog;\n        var ip = state.ip;\n\n        if (exports.DEBUG) {\n            console.log(state.step, 'PUSHB[' + n + ']');\n        }\n\n        for (var i = 0; i < n; i++) {\n            stack.push(prog[++ip]);\n        }\n\n        state.ip = ip;\n    }\n\n    // PUSHW[abc] PUSH Words\n    // 0xB8-0xBF\n    function PUSHW(n, state) {\n        var ip = state.ip;\n        var prog = state.prog;\n        var stack = state.stack;\n\n        if (exports.DEBUG) {\n            console.log(state.ip, 'PUSHW[' + n + ']');\n        }\n\n        for (var i = 0; i < n; i++) {\n            var w = prog[++ip] << 8 | prog[++ip];\n            if (w & 0x8000) {\n                w = -((w ^ 0xffff) + 1);\n            }\n            stack.push(w);\n        }\n\n        state.ip = ip;\n    }\n\n    // MDRP[abcde] Move Direct Relative Point\n    // 0xD0-0xEF\n    // (if indirect is 0)\n    //\n    // and\n    //\n    // MIRP[abcde] Move Indirect Relative Point\n    // 0xE0-0xFF\n    // (if indirect is 1)\n\n    function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {\n        var stack = state.stack;\n        var cvte = indirect && stack.pop();\n        var pi = stack.pop();\n        var rp0i = state.rp0;\n        var rp = state.z0[rp0i];\n        var p = state.z1[pi];\n\n        var md = state.minDis;\n        var fv = state.fv;\n        var pv = state.dpv;\n        var od; // original distance\n        var d; // moving distance\n        var sign; // sign of distance\n        var cv;\n\n        d = od = pv.distance(p, rp, true, true);\n        sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0\n\n        // TODO consider autoFlip\n        d = Math.abs(d);\n\n        if (indirect) {\n            cv = state.cvt[cvte];\n\n            if (ro && Math.abs(d - cv) < state.cvCutIn) {\n                d = cv;\n            }\n        }\n\n        if (keepD && d < md) {\n            d = md;\n        }\n\n        if (ro) {\n            d = state.round(d);\n        }\n\n        fv.setRelative(p, rp, sign * d, pv);\n        fv.touch(p);\n\n        if (exports.DEBUG) {\n            console.log(state.step, (indirect ? 'MIRP[' : 'MDRP[') + (setRp0 ? 'M' : 'm') + (keepD ? '>' : '_') + (ro ? 'R' : '_') + (dt === 0 ? 'Gr' : dt === 1 ? 'Bl' : dt === 2 ? 'Wh' : '') + ']', indirect ? cvte + '(' + state.cvt[cvte] + ',' + cv + ')' : '', pi, '(d =', od, '->', sign * d, ')');\n        }\n\n        state.rp1 = state.rp0;\n        state.rp2 = pi;\n        if (setRp0) {\n            state.rp0 = pi;\n        }\n    }\n\n    /*\n    * The instruction table.\n    */\n    instructionTable = [\n    /* 0x00 */SVTCA.bind(undefined, yUnitVector),\n    /* 0x01 */SVTCA.bind(undefined, xUnitVector),\n    /* 0x02 */SPVTCA.bind(undefined, yUnitVector),\n    /* 0x03 */SPVTCA.bind(undefined, xUnitVector),\n    /* 0x04 */SFVTCA.bind(undefined, yUnitVector),\n    /* 0x05 */SFVTCA.bind(undefined, xUnitVector),\n    /* 0x06 */SPVTL.bind(undefined, 0),\n    /* 0x07 */SPVTL.bind(undefined, 1),\n    /* 0x08 */SFVTL.bind(undefined, 0),\n    /* 0x09 */SFVTL.bind(undefined, 1),\n    /* 0x0A */SPVFS,\n    /* 0x0B */SFVFS,\n    /* 0x0C */GPV,\n    /* 0x0D */GFV,\n    /* 0x0E */SFVTPV,\n    /* 0x0F */ISECT,\n    /* 0x10 */SRP0,\n    /* 0x11 */SRP1,\n    /* 0x12 */SRP2,\n    /* 0x13 */SZP0,\n    /* 0x14 */SZP1,\n    /* 0x15 */SZP2,\n    /* 0x16 */SZPS,\n    /* 0x17 */SLOOP,\n    /* 0x18 */RTG,\n    /* 0x19 */RTHG,\n    /* 0x1A */SMD,\n    /* 0x1B */ELSE,\n    /* 0x1C */JMPR,\n    /* 0x1D */SCVTCI,\n    /* 0x1E */undefined, // TODO SSWCI\n    /* 0x1F */undefined, // TODO SSW\n    /* 0x20 */DUP,\n    /* 0x21 */POP,\n    /* 0x22 */CLEAR,\n    /* 0x23 */SWAP,\n    /* 0x24 */DEPTH,\n    /* 0x25 */CINDEX,\n    /* 0x26 */MINDEX,\n    /* 0x27 */undefined, // TODO ALIGNPTS\n    /* 0x28 */undefined,\n    /* 0x29 */undefined, // TODO UTP\n    /* 0x2A */LOOPCALL,\n    /* 0x2B */CALL,\n    /* 0x2C */FDEF,\n    /* 0x2D */undefined, // ENDF (eaten by FDEF)\n    /* 0x2E */MDAP.bind(undefined, 0),\n    /* 0x2F */MDAP.bind(undefined, 1),\n    /* 0x30 */IUP.bind(undefined, yUnitVector),\n    /* 0x31 */IUP.bind(undefined, xUnitVector),\n    /* 0x32 */SHP.bind(undefined, 0),\n    /* 0x33 */SHP.bind(undefined, 1),\n    /* 0x34 */SHC.bind(undefined, 0),\n    /* 0x35 */SHC.bind(undefined, 1),\n    /* 0x36 */SHZ.bind(undefined, 0),\n    /* 0x37 */SHZ.bind(undefined, 1),\n    /* 0x38 */SHPIX,\n    /* 0x39 */IP,\n    /* 0x3A */MSIRP.bind(undefined, 0),\n    /* 0x3B */MSIRP.bind(undefined, 1),\n    /* 0x3C */ALIGNRP,\n    /* 0x3D */RTDG,\n    /* 0x3E */MIAP.bind(undefined, 0),\n    /* 0x3F */MIAP.bind(undefined, 1),\n    /* 0x40 */NPUSHB,\n    /* 0x41 */NPUSHW,\n    /* 0x42 */WS,\n    /* 0x43 */RS,\n    /* 0x44 */WCVTP,\n    /* 0x45 */RCVT,\n    /* 0x46 */GC.bind(undefined, 0),\n    /* 0x47 */GC.bind(undefined, 1),\n    /* 0x48 */undefined, // TODO SCFS\n    /* 0x49 */MD.bind(undefined, 0),\n    /* 0x4A */MD.bind(undefined, 1),\n    /* 0x4B */MPPEM,\n    /* 0x4C */undefined, // TODO MPS\n    /* 0x4D */FLIPON,\n    /* 0x4E */undefined, // TODO FLIPOFF\n    /* 0x4F */undefined, // TODO DEBUG\n    /* 0x50 */LT,\n    /* 0x51 */LTEQ,\n    /* 0x52 */GT,\n    /* 0x53 */GTEQ,\n    /* 0x54 */EQ,\n    /* 0x55 */NEQ,\n    /* 0x56 */ODD,\n    /* 0x57 */EVEN,\n    /* 0x58 */IF,\n    /* 0x59 */EIF,\n    /* 0x5A */AND,\n    /* 0x5B */OR,\n    /* 0x5C */NOT,\n    /* 0x5D */DELTAP123.bind(undefined, 1),\n    /* 0x5E */SDB,\n    /* 0x5F */SDS,\n    /* 0x60 */ADD,\n    /* 0x61 */SUB,\n    /* 0x62 */DIV,\n    /* 0x63 */MUL,\n    /* 0x64 */ABS,\n    /* 0x65 */NEG,\n    /* 0x66 */FLOOR,\n    /* 0x67 */CEILING,\n    /* 0x68 */ROUND.bind(undefined, 0),\n    /* 0x69 */ROUND.bind(undefined, 1),\n    /* 0x6A */ROUND.bind(undefined, 2),\n    /* 0x6B */ROUND.bind(undefined, 3),\n    /* 0x6C */undefined, // TODO NROUND[ab]\n    /* 0x6D */undefined, // TODO NROUND[ab]\n    /* 0x6E */undefined, // TODO NROUND[ab]\n    /* 0x6F */undefined, // TODO NROUND[ab]\n    /* 0x70 */WCVTF,\n    /* 0x71 */DELTAP123.bind(undefined, 2),\n    /* 0x72 */DELTAP123.bind(undefined, 3),\n    /* 0x73 */DELTAC123.bind(undefined, 1),\n    /* 0x74 */DELTAC123.bind(undefined, 2),\n    /* 0x75 */DELTAC123.bind(undefined, 3),\n    /* 0x76 */SROUND,\n    /* 0x77 */S45ROUND,\n    /* 0x78 */undefined, // TODO JROT[]\n    /* 0x79 */undefined, // TODO JROF[]\n    /* 0x7A */ROFF,\n    /* 0x7B */undefined,\n    /* 0x7C */RUTG,\n    /* 0x7D */RDTG,\n    /* 0x7E */POP, // actually SANGW, supposed to do only a pop though\n    /* 0x7F */POP, // actually AA, supposed to do only a pop though\n    /* 0x80 */undefined, // TODO FLIPPT\n    /* 0x81 */undefined, // TODO FLIPRGON\n    /* 0x82 */undefined, // TODO FLIPRGOFF\n    /* 0x83 */undefined,\n    /* 0x84 */undefined,\n    /* 0x85 */SCANCTRL,\n    /* 0x86 */SDPVTL.bind(undefined, 0),\n    /* 0x87 */SDPVTL.bind(undefined, 1),\n    /* 0x88 */GETINFO,\n    /* 0x89 */undefined, // TODO IDEF\n    /* 0x8A */ROLL,\n    /* 0x8B */MAX,\n    /* 0x8C */MIN,\n    /* 0x8D */SCANTYPE,\n    /* 0x8E */INSTCTRL,\n    /* 0x8F */undefined,\n    /* 0x90 */undefined,\n    /* 0x91 */undefined,\n    /* 0x92 */undefined,\n    /* 0x93 */undefined,\n    /* 0x94 */undefined,\n    /* 0x95 */undefined,\n    /* 0x96 */undefined,\n    /* 0x97 */undefined,\n    /* 0x98 */undefined,\n    /* 0x99 */undefined,\n    /* 0x9A */undefined,\n    /* 0x9B */undefined,\n    /* 0x9C */undefined,\n    /* 0x9D */undefined,\n    /* 0x9E */undefined,\n    /* 0x9F */undefined,\n    /* 0xA0 */undefined,\n    /* 0xA1 */undefined,\n    /* 0xA2 */undefined,\n    /* 0xA3 */undefined,\n    /* 0xA4 */undefined,\n    /* 0xA5 */undefined,\n    /* 0xA6 */undefined,\n    /* 0xA7 */undefined,\n    /* 0xA8 */undefined,\n    /* 0xA9 */undefined,\n    /* 0xAA */undefined,\n    /* 0xAB */undefined,\n    /* 0xAC */undefined,\n    /* 0xAD */undefined,\n    /* 0xAE */undefined,\n    /* 0xAF */undefined,\n    /* 0xB0 */PUSHB.bind(undefined, 1),\n    /* 0xB1 */PUSHB.bind(undefined, 2),\n    /* 0xB2 */PUSHB.bind(undefined, 3),\n    /* 0xB3 */PUSHB.bind(undefined, 4),\n    /* 0xB4 */PUSHB.bind(undefined, 5),\n    /* 0xB5 */PUSHB.bind(undefined, 6),\n    /* 0xB6 */PUSHB.bind(undefined, 7),\n    /* 0xB7 */PUSHB.bind(undefined, 8),\n    /* 0xB8 */PUSHW.bind(undefined, 1),\n    /* 0xB9 */PUSHW.bind(undefined, 2),\n    /* 0xBA */PUSHW.bind(undefined, 3),\n    /* 0xBB */PUSHW.bind(undefined, 4),\n    /* 0xBC */PUSHW.bind(undefined, 5),\n    /* 0xBD */PUSHW.bind(undefined, 6),\n    /* 0xBE */PUSHW.bind(undefined, 7),\n    /* 0xBF */PUSHW.bind(undefined, 8),\n    /* 0xC0 */MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),\n    /* 0xC1 */MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),\n    /* 0xC2 */MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),\n    /* 0xC3 */MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),\n    /* 0xC4 */MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),\n    /* 0xC5 */MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),\n    /* 0xC6 */MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),\n    /* 0xC7 */MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),\n    /* 0xC8 */MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),\n    /* 0xC9 */MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),\n    /* 0xCA */MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),\n    /* 0xCB */MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),\n    /* 0xCC */MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),\n    /* 0xCD */MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),\n    /* 0xCE */MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),\n    /* 0xCF */MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),\n    /* 0xD0 */MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),\n    /* 0xD1 */MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),\n    /* 0xD2 */MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),\n    /* 0xD3 */MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),\n    /* 0xD4 */MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),\n    /* 0xD5 */MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),\n    /* 0xD6 */MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),\n    /* 0xD7 */MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),\n    /* 0xD8 */MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),\n    /* 0xD9 */MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),\n    /* 0xDA */MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),\n    /* 0xDB */MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),\n    /* 0xDC */MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),\n    /* 0xDD */MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),\n    /* 0xDE */MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),\n    /* 0xDF */MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),\n    /* 0xE0 */MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),\n    /* 0xE1 */MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),\n    /* 0xE2 */MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),\n    /* 0xE3 */MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),\n    /* 0xE4 */MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),\n    /* 0xE5 */MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),\n    /* 0xE6 */MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),\n    /* 0xE7 */MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),\n    /* 0xE8 */MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),\n    /* 0xE9 */MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),\n    /* 0xEA */MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),\n    /* 0xEB */MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),\n    /* 0xEC */MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),\n    /* 0xED */MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),\n    /* 0xEE */MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),\n    /* 0xEF */MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),\n    /* 0xF0 */MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),\n    /* 0xF1 */MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),\n    /* 0xF2 */MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),\n    /* 0xF3 */MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),\n    /* 0xF4 */MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),\n    /* 0xF5 */MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),\n    /* 0xF6 */MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),\n    /* 0xF7 */MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),\n    /* 0xF8 */MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),\n    /* 0xF9 */MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),\n    /* 0xFA */MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),\n    /* 0xFB */MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),\n    /* 0xFC */MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),\n    /* 0xFD */MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),\n    /* 0xFE */MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),\n    /* 0xFF */MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)];\n\n    /*****************************\n      Mathematical Considerations\n    ******************************\n    \n    fv ... refers to freedom vector\n    pv ... refers to projection vector\n    rp ... refers to reference point\n    p  ... refers to to point being operated on\n    d  ... refers to distance\n    \n    SETRELATIVE:\n    ============\n    \n    case freedom vector == x-axis:\n    ------------------------------\n    \n                            (pv)\n                         .-'\n                  rpd .-'\n                   .-*\n              d .-'90°'\n             .-'       '\n          .-'           '\n       *-'               ' b\n      rp                  '\n                           '\n                            '\n                p *----------*-------------- (fv)\n                              pm\n    \n      rpdx = rpx + d * pv.x\n      rpdy = rpy + d * pv.y\n    \n      equation of line b\n    \n       y - rpdy = pvns * (x- rpdx)\n    \n       y = p.y\n    \n       x = rpdx + ( p.y - rpdy ) / pvns\n    \n    \n    case freedom vector == y-axis:\n    ------------------------------\n    \n        * pm\n        |\\\n        | \\\n        |  \\\n        |   \\\n        |    \\\n        |     \\\n        |      \\\n        |       \\\n        |        \\\n        |         \\ b\n        |          \\\n        |           \\\n        |            \\    .-' (pv)\n        |         90° \\.-'\n        |           .-'* rpd\n        |        .-'\n        *     *-'  d\n        p     rp\n    \n      rpdx = rpx + d * pv.x\n      rpdy = rpy + d * pv.y\n    \n      equation of line b:\n               pvns ... normal slope to pv\n    \n       y - rpdy = pvns * (x - rpdx)\n    \n       x = p.x\n    \n       y = rpdy +  pvns * (p.x - rpdx)\n    \n    \n    \n    generic case:\n    -------------\n    \n    \n                                  .'(fv)\n                                .'\n                              .* pm\n                            .' !\n                          .'    .\n                        .'      !\n                      .'         . b\n                    .'           !\n                   *              .\n                  p               !\n                             90°   .    ... (pv)\n                               ...-*-'''\n                      ...---'''    rpd\n             ...---'''   d\n       *--'''\n      rp\n    \n        rpdx = rpx + d * pv.x\n        rpdy = rpy + d * pv.y\n    \n     equation of line b:\n        pvns... normal slope to pv\n    \n        y - rpdy = pvns * (x - rpdx)\n    \n     equation of freedom vector line:\n        fvs ... slope of freedom vector (=fy/fx)\n    \n        y - py = fvs * (x - px)\n    \n    \n      on pm both equations are true for same x/y\n    \n        y - rpdy = pvns * (x - rpdx)\n    \n        y - py = fvs * (x - px)\n    \n      form to y and set equal:\n    \n        pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n    \n      expand:\n    \n        pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n    \n      switch:\n    \n        fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n    \n      solve for x:\n    \n        fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n    \n    \n    \n              fvs * px - pvns * rpdx + rpdy - py\n        x =  -----------------------------------\n                     fvs - pvns\n    \n      and:\n    \n        y = fvs * (x - px) + py\n    \n    \n    \n    INTERPOLATE:\n    ============\n    \n    Examples of point interpolation.\n    \n    The weight of the movement of the reference point gets bigger\n    the further the other reference point is away, thus the safest\n    option (that is avoiding 0/0 divisions) is to weight the\n    original distance of the other point by the sum of both distances.\n    \n    If the sum of both distances is 0, then move the point by the\n    arithmetic average of the movement of both reference points.\n    \n    \n    \n    \n               (+6)\n        rp1o *---->*rp1\n             .     .                          (+12)\n             .     .                  rp2o *---------->* rp2\n             .     .                       .           .\n             .     .                       .           .\n             .    10          20           .           .\n             |.........|...................|           .\n                   .   .                               .\n                   .   . (+8)                          .\n                    po *------>*p                      .\n                   .           .                       .\n                   .    12     .          24           .\n                   |...........|.......................|\n                                      36\n    \n    \n    -------\n    \n    \n    \n               (+10)\n        rp1o *-------->*rp1\n             .         .                      (-10)\n             .         .              rp2 *<---------* rpo2\n             .         .                   .         .\n             .         .                   .         .\n             .    10   .          30       .         .\n             |.........|.............................|\n                       .                   .\n                       . (+5)              .\n                    po *--->* p            .\n                       .    .              .\n                       .    .   20         .\n                       |....|..............|\n                         5        15\n    \n    \n    -------\n    \n    \n               (+10)\n        rp1o *-------->*rp1\n             .         .\n             .         .\n        rp2o *-------->*rp2\n    \n    \n                                   (+10)\n                              po *-------->* p\n    \n    -------\n    \n    \n               (+10)\n        rp1o *-------->*rp1\n             .         .\n             .         .(+30)\n        rp2o *---------------------------->*rp2\n    \n    \n                                            (+25)\n                              po *----------------------->* p\n    \n    \n    \n    vim: set ts=4 sw=4 expandtab:\n    *****/\n\n    // The Font object\n\n    /**\n     * @typedef FontOptions\n     * @type Object\n     * @property {Boolean} empty - whether to create a new empty font\n     * @property {string} familyName\n     * @property {string} styleName\n     * @property {string=} fullName\n     * @property {string=} postScriptName\n     * @property {string=} designer\n     * @property {string=} designerURL\n     * @property {string=} manufacturer\n     * @property {string=} manufacturerURL\n     * @property {string=} license\n     * @property {string=} licenseURL\n     * @property {string=} version\n     * @property {string=} description\n     * @property {string=} copyright\n     * @property {string=} trademark\n     * @property {Number} unitsPerEm\n     * @property {Number} ascender\n     * @property {Number} descender\n     * @property {Number} createdTimestamp\n     * @property {string=} weightClass\n     * @property {string=} widthClass\n     * @property {string=} fsSelection\n     */\n\n    /**\n     * A Font represents a loaded OpenType font file.\n     * It contains a set of glyphs and methods to draw text on a drawing context,\n     * or to get a path representing the text.\n     * @exports opentype.Font\n     * @class\n     * @param {FontOptions}\n     * @constructor\n     */\n    function Font(options) {\n        options = options || {};\n\n        if (!options.empty) {\n            // Check that we've provided the minimum set of names.\n            checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');\n            checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');\n            checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');\n            checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');\n            checkArgument(options.descender, 'When creating a new Font object, descender is required.');\n            checkArgument(options.descender < 0, 'Descender should be negative (e.g. -512).');\n\n            // OS X will complain if the names are empty, so we put a single space everywhere by default.\n            this.names = {\n                fontFamily: { en: options.familyName || ' ' },\n                fontSubfamily: { en: options.styleName || ' ' },\n                fullName: { en: options.fullName || options.familyName + ' ' + options.styleName },\n                postScriptName: { en: options.postScriptName || options.familyName + options.styleName },\n                designer: { en: options.designer || ' ' },\n                designerURL: { en: options.designerURL || ' ' },\n                manufacturer: { en: options.manufacturer || ' ' },\n                manufacturerURL: { en: options.manufacturerURL || ' ' },\n                license: { en: options.license || ' ' },\n                licenseURL: { en: options.licenseURL || ' ' },\n                version: { en: options.version || 'Version 0.1' },\n                description: { en: options.description || ' ' },\n                copyright: { en: options.copyright || ' ' },\n                trademark: { en: options.trademark || ' ' }\n            };\n            this.unitsPerEm = options.unitsPerEm || 1000;\n            this.ascender = options.ascender;\n            this.descender = options.descender;\n            this.createdTimestamp = options.createdTimestamp;\n            this.tables = { os2: {\n                    usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n                    usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n                    fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n                } };\n        }\n\n        this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n        this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n        this.encoding = new DefaultEncoding(this);\n        this.substitution = new Substitution(this);\n        this.tables = this.tables || {};\n\n        Object.defineProperty(this, 'hinting', {\n            get: function get() {\n                if (this._hinting) {\n                    return this._hinting;\n                }\n                if (this.outlinesFormat === 'truetype') {\n                    return this._hinting = new Hinting(this);\n                }\n            }\n        });\n    }\n\n    /**\n     * Check if the font has a glyph for the given character.\n     * @param  {string}\n     * @return {Boolean}\n     */\n    Font.prototype.hasChar = function (c) {\n        return this.encoding.charToGlyphIndex(c) !== null;\n    };\n\n    /**\n     * Convert the given character to a single glyph index.\n     * Note that this function assumes that there is a one-to-one mapping between\n     * the given character and a glyph; for complex scripts this might not be the case.\n     * @param  {string}\n     * @return {Number}\n     */\n    Font.prototype.charToGlyphIndex = function (s) {\n        return this.encoding.charToGlyphIndex(s);\n    };\n\n    /**\n     * Convert the given character to a single Glyph object.\n     * Note that this function assumes that there is a one-to-one mapping between\n     * the given character and a glyph; for complex scripts this might not be the case.\n     * @param  {string}\n     * @return {opentype.Glyph}\n     */\n    Font.prototype.charToGlyph = function (c) {\n        var glyphIndex = this.charToGlyphIndex(c);\n        var glyph = this.glyphs.get(glyphIndex);\n        if (!glyph) {\n            // .notdef\n            glyph = this.glyphs.get(0);\n        }\n\n        return glyph;\n    };\n\n    /**\n     * Convert the given text to a list of Glyph objects.\n     * Note that there is no strict one-to-one mapping between characters and\n     * glyphs, so the list of returned glyphs can be larger or smaller than the\n     * length of the given string.\n     * @param  {string}\n     * @param  {GlyphRenderOptions} [options]\n     * @return {opentype.Glyph[]}\n     */\n    Font.prototype.stringToGlyphs = function (s, options) {\n        var this$1 = this;\n\n        options = options || this.defaultRenderOptions;\n        // Get glyph indexes\n        var indexes = [];\n        for (var i = 0; i < s.length; i += 1) {\n            var c = s[i];\n            indexes.push(this$1.charToGlyphIndex(c));\n        }\n        var length = indexes.length;\n\n        // Apply substitutions on glyph indexes\n        if (options.features) {\n            var script = options.script || this.substitution.getDefaultScriptName();\n            var manyToOne = [];\n            if (options.features.liga) {\n                manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language));\n            }\n            if (options.features.rlig) {\n                manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language));\n            }\n            for (var i$1 = 0; i$1 < length; i$1 += 1) {\n                for (var j = 0; j < manyToOne.length; j++) {\n                    var ligature = manyToOne[j];\n                    var components = ligature.sub;\n                    var compCount = components.length;\n                    var k = 0;\n                    while (k < compCount && components[k] === indexes[i$1 + k]) {\n                        k++;\n                    }\n                    if (k === compCount) {\n                        indexes.splice(i$1, compCount, ligature.by);\n                        length = length - compCount + 1;\n                    }\n                }\n            }\n        }\n\n        // convert glyph indexes to glyph objects\n        var glyphs = new Array(length);\n        var notdef = this.glyphs.get(0);\n        for (var i$2 = 0; i$2 < length; i$2 += 1) {\n            glyphs[i$2] = this$1.glyphs.get(indexes[i$2]) || notdef;\n        }\n        return glyphs;\n    };\n\n    /**\n     * @param  {string}\n     * @return {Number}\n     */\n    Font.prototype.nameToGlyphIndex = function (name) {\n        return this.glyphNames.nameToGlyphIndex(name);\n    };\n\n    /**\n     * @param  {string}\n     * @return {opentype.Glyph}\n     */\n    Font.prototype.nameToGlyph = function (name) {\n        var glyphIndex = this.nameToGlyphIndex(name);\n        var glyph = this.glyphs.get(glyphIndex);\n        if (!glyph) {\n            // .notdef\n            glyph = this.glyphs.get(0);\n        }\n\n        return glyph;\n    };\n\n    /**\n     * @param  {Number}\n     * @return {String}\n     */\n    Font.prototype.glyphIndexToName = function (gid) {\n        if (!this.glyphNames.glyphIndexToName) {\n            return '';\n        }\n\n        return this.glyphNames.glyphIndexToName(gid);\n    };\n\n    /**\n     * Retrieve the value of the kerning pair between the left glyph (or its index)\n     * and the right glyph (or its index). If no kerning pair is found, return 0.\n     * The kerning value gets added to the advance width when calculating the spacing\n     * between glyphs.\n     * @param  {opentype.Glyph} leftGlyph\n     * @param  {opentype.Glyph} rightGlyph\n     * @return {Number}\n     */\n    Font.prototype.getKerningValue = function (leftGlyph, rightGlyph) {\n        leftGlyph = leftGlyph.index || leftGlyph;\n        rightGlyph = rightGlyph.index || rightGlyph;\n        var gposKerning = this.getGposKerningValue;\n        return gposKerning ? gposKerning(leftGlyph, rightGlyph) : this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;\n    };\n\n    /**\n     * @typedef GlyphRenderOptions\n     * @type Object\n     * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n     *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n     * @property {string} [language='dflt'] - language system used to determine which features to apply.\n     *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n     * @property {boolean} [kerning=true] - whether to include kerning values\n     * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n     *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n     */\n    Font.prototype.defaultRenderOptions = {\n        kerning: true,\n        features: {\n            liga: true,\n            rlig: true\n        }\n    };\n\n    /**\n     * Helper function that invokes the given callback for each glyph in the given text.\n     * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n     * @param {string} text - The text to apply.\n     * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n     * @param  {GlyphRenderOptions=} options\n     * @param  {Function} callback\n     */\n    Font.prototype.forEachGlyph = function (text, x, y, fontSize, options, callback) {\n        var this$1 = this;\n\n        x = x !== undefined ? x : 0;\n        y = y !== undefined ? y : 0;\n        fontSize = fontSize !== undefined ? fontSize : 72;\n        options = options || this.defaultRenderOptions;\n        var fontScale = 1 / this.unitsPerEm * fontSize;\n        var glyphs = this.stringToGlyphs(text, options);\n        for (var i = 0; i < glyphs.length; i += 1) {\n            var glyph = glyphs[i];\n            callback.call(this$1, glyph, x, y, fontSize, options);\n            if (glyph.advanceWidth) {\n                x += glyph.advanceWidth * fontScale;\n            }\n\n            if (options.kerning && i < glyphs.length - 1) {\n                var kerningValue = this$1.getKerningValue(glyph, glyphs[i + 1]);\n                x += kerningValue * fontScale;\n            }\n\n            if (options.letterSpacing) {\n                x += options.letterSpacing * fontSize;\n            } else if (options.tracking) {\n                x += options.tracking / 1000 * fontSize;\n            }\n        }\n        return x;\n    };\n\n    /**\n     * Create a Path object that represents the given text.\n     * @param  {string} text - The text to create.\n     * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n     * @param  {GlyphRenderOptions=} options\n     * @return {opentype.Path}\n     */\n    Font.prototype.getPath = function (text, x, y, fontSize, options) {\n        var fullPath = new Path();\n        this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {\n            var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n            fullPath.extend(glyphPath);\n        });\n        return fullPath;\n    };\n\n    /**\n     * Create an array of Path objects that represent the glyphs of a given text.\n     * @param  {string} text - The text to create.\n     * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n     * @param  {GlyphRenderOptions=} options\n     * @return {opentype.Path[]}\n     */\n    Font.prototype.getPaths = function (text, x, y, fontSize, options) {\n        var glyphPaths = [];\n        this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {\n            var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n            glyphPaths.push(glyphPath);\n        });\n\n        return glyphPaths;\n    };\n\n    /**\n     * Returns the advance width of a text.\n     *\n     * This is something different than Path.getBoundingBox() as for example a\n     * suffixed whitespace increases the advanceWidth but not the bounding box\n     * or an overhanging letter like a calligraphic 'f' might have a quite larger\n     * bounding box than its advance width.\n     *\n     * This corresponds to canvas2dContext.measureText(text).width\n     *\n     * @param  {string} text - The text to create.\n     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n     * @param  {GlyphRenderOptions=} options\n     * @return advance width\n     */\n    Font.prototype.getAdvanceWidth = function (text, fontSize, options) {\n        return this.forEachGlyph(text, 0, 0, fontSize, options, function () {});\n    };\n\n    /**\n     * Draw the text on the given drawing context.\n     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n     * @param  {string} text - The text to create.\n     * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n     * @param  {GlyphRenderOptions=} options\n     */\n    Font.prototype.draw = function (ctx, text, x, y, fontSize, options) {\n        this.getPath(text, x, y, fontSize, options).draw(ctx);\n    };\n\n    /**\n     * Draw the points of all glyphs in the text.\n     * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n     * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n     * @param {string} text - The text to create.\n     * @param {number} [x=0] - Horizontal position of the beginning of the text.\n     * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n     * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n     * @param {GlyphRenderOptions=} options\n     */\n    Font.prototype.drawPoints = function (ctx, text, x, y, fontSize, options) {\n        this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {\n            glyph.drawPoints(ctx, gX, gY, gFontSize);\n        });\n    };\n\n    /**\n     * Draw lines indicating important font measurements for all glyphs in the text.\n     * Black lines indicate the origin of the coordinate system (point 0,0).\n     * Blue lines indicate the glyph bounding box.\n     * Green line indicates the advance width of the glyph.\n     * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n     * @param {string} text - The text to create.\n     * @param {number} [x=0] - Horizontal position of the beginning of the text.\n     * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n     * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n     * @param {GlyphRenderOptions=} options\n     */\n    Font.prototype.drawMetrics = function (ctx, text, x, y, fontSize, options) {\n        this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {\n            glyph.drawMetrics(ctx, gX, gY, gFontSize);\n        });\n    };\n\n    /**\n     * @param  {string}\n     * @return {string}\n     */\n    Font.prototype.getEnglishName = function (name) {\n        var translations = this.names[name];\n        if (translations) {\n            return translations.en;\n        }\n    };\n\n    /**\n     * Validate\n     */\n    Font.prototype.validate = function () {\n        var warnings = [];\n        var _this = this;\n\n        function assert(predicate, message) {\n            if (!predicate) {\n                warnings.push(message);\n            }\n        }\n\n        function assertNamePresent(name) {\n            var englishName = _this.getEnglishName(name);\n            assert(englishName && englishName.trim().length > 0, 'No English ' + name + ' specified.');\n        }\n\n        // Identification information\n        assertNamePresent('fontFamily');\n        assertNamePresent('weightName');\n        assertNamePresent('manufacturer');\n        assertNamePresent('copyright');\n        assertNamePresent('version');\n\n        // Dimension information\n        assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n    };\n\n    /**\n     * Convert the font object to a SFNT data structure.\n     * This structure contains all the necessary tables and metadata to create a binary OTF file.\n     * @return {opentype.Table}\n     */\n    Font.prototype.toTables = function () {\n        return sfnt.fontToTable(this);\n    };\n    /**\n     * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n     */\n    Font.prototype.toBuffer = function () {\n        console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');\n        return this.toArrayBuffer();\n    };\n    /**\n     * Converts a `opentype.Font` into an `ArrayBuffer`\n     * @return {ArrayBuffer}\n     */\n    Font.prototype.toArrayBuffer = function () {\n        var sfntTable = this.toTables();\n        var bytes = sfntTable.encode();\n        var buffer = new ArrayBuffer(bytes.length);\n        var intArray = new Uint8Array(buffer);\n        for (var i = 0; i < bytes.length; i++) {\n            intArray[i] = bytes[i];\n        }\n\n        return buffer;\n    };\n\n    /**\n     * Initiate a download of the OpenType font.\n     */\n    Font.prototype.download = function (fileName) {\n        var familyName = this.getEnglishName('fontFamily');\n        var styleName = this.getEnglishName('fontSubfamily');\n        fileName = fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n        var arrayBuffer = this.toArrayBuffer();\n\n        if (isBrowser()) {\n            window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n            window.requestFileSystem(window.TEMPORARY, arrayBuffer.byteLength, function (fs) {\n                fs.root.getFile(fileName, { create: true }, function (fileEntry) {\n                    fileEntry.createWriter(function (writer) {\n                        var dataView = new DataView(arrayBuffer);\n                        var blob = new Blob([dataView], { type: 'font/opentype' });\n                        writer.write(blob);\n\n                        writer.addEventListener('writeend', function () {\n                            // Navigating to the file will download it.\n                            location.href = fileEntry.toURL();\n                        }, false);\n                    });\n                });\n            }, function (err) {\n                throw new Error(err.name + ': ' + err.message);\n            });\n        } else {\n            var fs = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\");\n            var buffer = arrayBufferToNodeBuffer(arrayBuffer);\n            fs.writeFileSync(fileName, buffer);\n        }\n    };\n    /**\n     * @private\n     */\n    Font.prototype.fsSelectionValues = {\n        ITALIC: 0x001, //1\n        UNDERSCORE: 0x002, //2\n        NEGATIVE: 0x004, //4\n        OUTLINED: 0x008, //8\n        STRIKEOUT: 0x010, //16\n        BOLD: 0x020, //32\n        REGULAR: 0x040, //64\n        USER_TYPO_METRICS: 0x080, //128\n        WWS: 0x100, //256\n        OBLIQUE: 0x200 //512\n    };\n\n    /**\n     * @private\n     */\n    Font.prototype.usWidthClasses = {\n        ULTRA_CONDENSED: 1,\n        EXTRA_CONDENSED: 2,\n        CONDENSED: 3,\n        SEMI_CONDENSED: 4,\n        MEDIUM: 5,\n        SEMI_EXPANDED: 6,\n        EXPANDED: 7,\n        EXTRA_EXPANDED: 8,\n        ULTRA_EXPANDED: 9\n    };\n\n    /**\n     * @private\n     */\n    Font.prototype.usWeightClasses = {\n        THIN: 100,\n        EXTRA_LIGHT: 200,\n        LIGHT: 300,\n        NORMAL: 400,\n        MEDIUM: 500,\n        SEMI_BOLD: 600,\n        BOLD: 700,\n        EXTRA_BOLD: 800,\n        BLACK: 900\n    };\n\n    // The `fvar` table stores font variation axes and instances.\n    // https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6fvar.html\n\n    function addName(name, names) {\n        var nameString = JSON.stringify(name);\n        var nameID = 256;\n        for (var nameKey in names) {\n            var n = parseInt(nameKey);\n            if (!n || n < 256) {\n                continue;\n            }\n\n            if (JSON.stringify(names[nameKey]) === nameString) {\n                return n;\n            }\n\n            if (nameID <= n) {\n                nameID = n + 1;\n            }\n        }\n\n        names[nameID] = name;\n        return nameID;\n    }\n\n    function makeFvarAxis(n, axis, names) {\n        var nameID = addName(axis.name, names);\n        return [{ name: 'tag_' + n, type: 'TAG', value: axis.tag }, { name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16 }, { name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16 }, { name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16 }, { name: 'flags_' + n, type: 'USHORT', value: 0 }, { name: 'nameID_' + n, type: 'USHORT', value: nameID }];\n    }\n\n    function parseFvarAxis(data, start, names) {\n        var axis = {};\n        var p = new parse.Parser(data, start);\n        axis.tag = p.parseTag();\n        axis.minValue = p.parseFixed();\n        axis.defaultValue = p.parseFixed();\n        axis.maxValue = p.parseFixed();\n        p.skip('uShort', 1); // reserved for flags; no values defined\n        axis.name = names[p.parseUShort()] || {};\n        return axis;\n    }\n\n    function makeFvarInstance(n, inst, axes, names) {\n        var nameID = addName(inst.name, names);\n        var fields = [{ name: 'nameID_' + n, type: 'USHORT', value: nameID }, { name: 'flags_' + n, type: 'USHORT', value: 0 }];\n\n        for (var i = 0; i < axes.length; ++i) {\n            var axisTag = axes[i].tag;\n            fields.push({\n                name: 'axis_' + n + ' ' + axisTag,\n                type: 'FIXED',\n                value: inst.coordinates[axisTag] << 16\n            });\n        }\n\n        return fields;\n    }\n\n    function parseFvarInstance(data, start, axes, names) {\n        var inst = {};\n        var p = new parse.Parser(data, start);\n        inst.name = names[p.parseUShort()] || {};\n        p.skip('uShort', 1); // reserved for flags; no values defined\n\n        inst.coordinates = {};\n        for (var i = 0; i < axes.length; ++i) {\n            inst.coordinates[axes[i].tag] = p.parseFixed();\n        }\n\n        return inst;\n    }\n\n    function makeFvarTable(fvar, names) {\n        var result = new table.Table('fvar', [{ name: 'version', type: 'ULONG', value: 0x10000 }, { name: 'offsetToData', type: 'USHORT', value: 0 }, { name: 'countSizePairs', type: 'USHORT', value: 2 }, { name: 'axisCount', type: 'USHORT', value: fvar.axes.length }, { name: 'axisSize', type: 'USHORT', value: 20 }, { name: 'instanceCount', type: 'USHORT', value: fvar.instances.length }, { name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4 }]);\n        result.offsetToData = result.sizeOf();\n\n        for (var i = 0; i < fvar.axes.length; i++) {\n            result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));\n        }\n\n        for (var j = 0; j < fvar.instances.length; j++) {\n            result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));\n        }\n\n        return result;\n    }\n\n    function parseFvarTable(data, start, names) {\n        var p = new parse.Parser(data, start);\n        var tableVersion = p.parseULong();\n        check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');\n        var offsetToData = p.parseOffset16();\n        // Skip countSizePairs.\n        p.skip('uShort', 1);\n        var axisCount = p.parseUShort();\n        var axisSize = p.parseUShort();\n        var instanceCount = p.parseUShort();\n        var instanceSize = p.parseUShort();\n\n        var axes = [];\n        for (var i = 0; i < axisCount; i++) {\n            axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));\n        }\n\n        var instances = [];\n        var instanceStart = start + offsetToData + axisCount * axisSize;\n        for (var j = 0; j < instanceCount; j++) {\n            instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));\n        }\n\n        return { axes: axes, instances: instances };\n    }\n\n    var fvar = { make: makeFvarTable, parse: parseFvarTable };\n\n    // The `GPOS` table contains kerning pairs, among other things.\n    // https://www.microsoft.com/typography/OTSPEC/gpos.htm\n\n    // Parse ScriptList and FeatureList tables of GPOS, GSUB, GDEF, BASE, JSTF tables.\n    // These lists are unused by now, this function is just the basis for a real parsing.\n    function parseTaggedListTable(data, start) {\n        var p = new parse.Parser(data, start);\n        var n = p.parseUShort();\n        var list = [];\n        for (var i = 0; i < n; i++) {\n            list[p.parseTag()] = { offset: p.parseUShort() };\n        }\n\n        return list;\n    }\n\n    // Parse a coverage table in a GSUB, GPOS or GDEF table.\n    // Format 1 is a simple list of glyph ids,\n    // Format 2 is a list of ranges. It is expanded in a list of glyphs, maybe not the best idea.\n    function parseCoverageTable(data, start) {\n        var p = new parse.Parser(data, start);\n        var format = p.parseUShort();\n        var count = p.parseUShort();\n        if (format === 1) {\n            return p.parseUShortList(count);\n        } else if (format === 2) {\n            var coverage = [];\n            for (; count--;) {\n                var begin = p.parseUShort();\n                var end = p.parseUShort();\n                var index = p.parseUShort();\n                for (var i = begin; i <= end; i++) {\n                    coverage[index++] = i;\n                }\n            }\n\n            return coverage;\n        }\n    }\n\n    // Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n    // Returns a function that gets a class value from a glyph ID.\n    function parseClassDefTable(data, start) {\n        var p = new parse.Parser(data, start);\n        var format = p.parseUShort();\n        if (format === 1) {\n            // Format 1 specifies a range of consecutive glyph indices, one class per glyph ID.\n            var startGlyph = p.parseUShort();\n            var glyphCount = p.parseUShort();\n            var classes = p.parseUShortList(glyphCount);\n            return function (glyphID) {\n                return classes[glyphID - startGlyph] || 0;\n            };\n        } else if (format === 2) {\n            // Format 2 defines multiple groups of glyph indices that belong to the same class.\n            var rangeCount = p.parseUShort();\n            var startGlyphs = [];\n            var endGlyphs = [];\n            var classValues = [];\n            for (var i = 0; i < rangeCount; i++) {\n                startGlyphs[i] = p.parseUShort();\n                endGlyphs[i] = p.parseUShort();\n                classValues[i] = p.parseUShort();\n            }\n\n            return function (glyphID) {\n                var l = 0;\n                var r = startGlyphs.length - 1;\n                while (l < r) {\n                    var c = l + r + 1 >> 1;\n                    if (glyphID < startGlyphs[c]) {\n                        r = c - 1;\n                    } else {\n                        l = c;\n                    }\n                }\n\n                if (startGlyphs[l] <= glyphID && glyphID <= endGlyphs[l]) {\n                    return classValues[l] || 0;\n                }\n\n                return 0;\n            };\n        }\n    }\n\n    // Parse a pair adjustment positioning subtable, format 1 or format 2\n    // The subtable is returned in the form of a lookup function.\n    function parsePairPosSubTable(data, start) {\n        var p = new parse.Parser(data, start);\n        // This part is common to format 1 and format 2 subtables\n        var format = p.parseUShort();\n        var coverageOffset = p.parseUShort();\n        var coverage = parseCoverageTable(data, start + coverageOffset);\n        // valueFormat 4: XAdvance only, 1: XPlacement only, 0: no ValueRecord for second glyph\n        // Only valueFormat1=4 and valueFormat2=0 is supported.\n        var valueFormat1 = p.parseUShort();\n        var valueFormat2 = p.parseUShort();\n        var value1;\n        var value2;\n        if (valueFormat1 !== 4 || valueFormat2 !== 0) {\n            return;\n        }\n        var sharedPairSets = {};\n        if (format === 1) {\n            // Pair Positioning Adjustment: Format 1\n            var pairSetCount = p.parseUShort();\n            var pairSet = [];\n            // Array of offsets to PairSet tables-from beginning of PairPos subtable-ordered by Coverage Index\n            var pairSetOffsets = p.parseOffset16List(pairSetCount);\n            for (var firstGlyph = 0; firstGlyph < pairSetCount; firstGlyph++) {\n                var pairSetOffset = pairSetOffsets[firstGlyph];\n                var sharedPairSet = sharedPairSets[pairSetOffset];\n                if (!sharedPairSet) {\n                    // Parse a pairset table in a pair adjustment subtable format 1\n                    sharedPairSet = {};\n                    p.relativeOffset = pairSetOffset;\n                    var pairValueCount = p.parseUShort();\n                    for (; pairValueCount--;) {\n                        var secondGlyph = p.parseUShort();\n                        if (valueFormat1) {\n                            value1 = p.parseShort();\n                        }\n                        if (valueFormat2) {\n                            value2 = p.parseShort();\n                        }\n                        // We only support valueFormat1 = 4 and valueFormat2 = 0,\n                        // so value1 is the XAdvance and value2 is empty.\n                        sharedPairSet[secondGlyph] = value1;\n                    }\n                }\n\n                pairSet[coverage[firstGlyph]] = sharedPairSet;\n            }\n\n            return function (leftGlyph, rightGlyph) {\n                var pairs = pairSet[leftGlyph];\n                if (pairs) {\n                    return pairs[rightGlyph];\n                }\n            };\n        } else if (format === 2) {\n            // Pair Positioning Adjustment: Format 2\n            var classDef1Offset = p.parseUShort();\n            var classDef2Offset = p.parseUShort();\n            var class1Count = p.parseUShort();\n            var class2Count = p.parseUShort();\n            var getClass1 = parseClassDefTable(data, start + classDef1Offset);\n            var getClass2 = parseClassDefTable(data, start + classDef2Offset);\n\n            // Parse kerning values by class pair.\n            var kerningMatrix = [];\n            for (var i = 0; i < class1Count; i++) {\n                var kerningRow = kerningMatrix[i] = [];\n                for (var j = 0; j < class2Count; j++) {\n                    if (valueFormat1) {\n                        value1 = p.parseShort();\n                    }\n                    if (valueFormat2) {\n                        value2 = p.parseShort();\n                    }\n                    // We only support valueFormat1 = 4 and valueFormat2 = 0,\n                    // so value1 is the XAdvance and value2 is empty.\n                    kerningRow[j] = value1;\n                }\n            }\n\n            // Convert coverage list to a hash\n            var covered = {};\n            for (var i$1 = 0; i$1 < coverage.length; i$1++) {\n                covered[coverage[i$1]] = 1;\n            }\n\n            // Get the kerning value for a specific glyph pair.\n            return function (leftGlyph, rightGlyph) {\n                if (!covered[leftGlyph]) {\n                    return;\n                }\n                var class1 = getClass1(leftGlyph);\n                var class2 = getClass2(rightGlyph);\n                var kerningRow = kerningMatrix[class1];\n\n                if (kerningRow) {\n                    return kerningRow[class2];\n                }\n            };\n        }\n    }\n\n    // Parse a LookupTable (present in of GPOS, GSUB, GDEF, BASE, JSTF tables).\n    function parseLookupTable(data, start) {\n        var p = new parse.Parser(data, start);\n        var lookupType = p.parseUShort();\n        var lookupFlag = p.parseUShort();\n        var useMarkFilteringSet = lookupFlag & 0x10;\n        var subTableCount = p.parseUShort();\n        var subTableOffsets = p.parseOffset16List(subTableCount);\n        var table = {\n            lookupType: lookupType,\n            lookupFlag: lookupFlag,\n            markFilteringSet: useMarkFilteringSet ? p.parseUShort() : -1\n        };\n        // LookupType 2, Pair adjustment\n        if (lookupType === 2) {\n            var subtables = [];\n            for (var i = 0; i < subTableCount; i++) {\n                var pairPosSubTable = parsePairPosSubTable(data, start + subTableOffsets[i]);\n                if (pairPosSubTable) {\n                    subtables.push(pairPosSubTable);\n                }\n            }\n            // Return a function which finds the kerning values in the subtables.\n            table.getKerningValue = function (leftGlyph, rightGlyph) {\n                for (var i = subtables.length; i--;) {\n                    var value = subtables[i](leftGlyph, rightGlyph);\n                    if (value !== undefined) {\n                        return value;\n                    }\n                }\n\n                return 0;\n            };\n        }\n\n        return table;\n    }\n\n    // Parse the `GPOS` table which contains, among other things, kerning pairs.\n    // https://www.microsoft.com/typography/OTSPEC/gpos.htm\n    function parseGposTable(data, start, font) {\n        var p = new parse.Parser(data, start);\n        var tableVersion = p.parseFixed();\n        check.argument(tableVersion === 1, 'Unsupported GPOS table version.');\n\n        // ScriptList and FeatureList - ignored for now\n        parseTaggedListTable(data, start + p.parseUShort());\n        // 'kern' is the feature we are looking for.\n        parseTaggedListTable(data, start + p.parseUShort());\n\n        // LookupList\n        var lookupListOffset = p.parseUShort();\n        p.relativeOffset = lookupListOffset;\n        var lookupCount = p.parseUShort();\n        var lookupTableOffsets = p.parseOffset16List(lookupCount);\n        var lookupListAbsoluteOffset = start + lookupListOffset;\n        for (var i = 0; i < lookupCount; i++) {\n            var table = parseLookupTable(data, lookupListAbsoluteOffset + lookupTableOffsets[i]);\n            if (table.lookupType === 2 && !font.getGposKerningValue) {\n                font.getGposKerningValue = table.getKerningValue;\n            }\n        }\n    }\n\n    var gpos = { parse: parseGposTable };\n\n    // The `kern` table contains kerning pairs.\n    // Note that some fonts use the GPOS OpenType layout table to specify kerning.\n    // https://www.microsoft.com/typography/OTSPEC/kern.htm\n\n    function parseWindowsKernTable(p) {\n        var pairs = {};\n        // Skip nTables.\n        p.skip('uShort');\n        var subtableVersion = p.parseUShort();\n        check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');\n        // Skip subtableLength, subtableCoverage\n        p.skip('uShort', 2);\n        var nPairs = p.parseUShort();\n        // Skip searchRange, entrySelector, rangeShift.\n        p.skip('uShort', 3);\n        for (var i = 0; i < nPairs; i += 1) {\n            var leftIndex = p.parseUShort();\n            var rightIndex = p.parseUShort();\n            var value = p.parseShort();\n            pairs[leftIndex + ',' + rightIndex] = value;\n        }\n        return pairs;\n    }\n\n    function parseMacKernTable(p) {\n        var pairs = {};\n        // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n        // Skip the rest.\n        p.skip('uShort');\n        var nTables = p.parseULong();\n        //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n        if (nTables > 1) {\n            console.warn('Only the first kern subtable is supported.');\n        }\n        p.skip('uLong');\n        var coverage = p.parseUShort();\n        var subtableVersion = coverage & 0xFF;\n        p.skip('uShort');\n        if (subtableVersion === 0) {\n            var nPairs = p.parseUShort();\n            // Skip searchRange, entrySelector, rangeShift.\n            p.skip('uShort', 3);\n            for (var i = 0; i < nPairs; i += 1) {\n                var leftIndex = p.parseUShort();\n                var rightIndex = p.parseUShort();\n                var value = p.parseShort();\n                pairs[leftIndex + ',' + rightIndex] = value;\n            }\n        }\n        return pairs;\n    }\n\n    // Parse the `kern` table which contains kerning pairs.\n    function parseKernTable(data, start) {\n        var p = new parse.Parser(data, start);\n        var tableVersion = p.parseUShort();\n        if (tableVersion === 0) {\n            return parseWindowsKernTable(p);\n        } else if (tableVersion === 1) {\n            return parseMacKernTable(p);\n        } else {\n            throw new Error('Unsupported kern table version (' + tableVersion + ').');\n        }\n    }\n\n    var kern = { parse: parseKernTable };\n\n    // The `loca` table stores the offsets to the locations of the glyphs in the font.\n    // https://www.microsoft.com/typography/OTSPEC/loca.htm\n\n    // Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n    // relative to the beginning of the glyphData table.\n    // The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n    // The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n    // version where offsets are stored as uLongs. The `head` table specifies which version to use\n    // (under indexToLocFormat).\n    function parseLocaTable(data, start, numGlyphs, shortVersion) {\n        var p = new parse.Parser(data, start);\n        var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n        // There is an extra entry after the last index element to compute the length of the last glyph.\n        // That's why we use numGlyphs + 1.\n        var glyphOffsets = [];\n        for (var i = 0; i < numGlyphs + 1; i += 1) {\n            var glyphOffset = parseFn.call(p);\n            if (shortVersion) {\n                // The short table version stores the actual offset divided by 2.\n                glyphOffset *= 2;\n            }\n\n            glyphOffsets.push(glyphOffset);\n        }\n\n        return glyphOffsets;\n    }\n\n    var loca = { parse: parseLocaTable };\n\n    // opentype.js\n    // https://github.com/nodebox/opentype.js\n    // (c) 2015 Frederik De Bleser\n    // opentype.js may be freely distributed under the MIT license.\n\n    /* global DataView, Uint8Array, XMLHttpRequest  */\n\n    /**\n     * The opentype library.\n     * @namespace opentype\n     */\n\n    // File loaders /////////////////////////////////////////////////////////\n    /**\n     * Loads a font from a file. The callback throws an error message as the first parameter if it fails\n     * and the font as an ArrayBuffer in the second parameter if it succeeds.\n     * @param  {string} path - The path of the file\n     * @param  {Function} callback - The function to call when the font load completes\n     */\n    function loadFromFile(path, callback) {\n        var fs = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\");\n        fs.readFile(path, function (err, buffer) {\n            if (err) {\n                return callback(err.message);\n            }\n\n            callback(null, nodeBufferToArrayBuffer(buffer));\n        });\n    }\n    /**\n     * Loads a font from a URL. The callback throws an error message as the first parameter if it fails\n     * and the font as an ArrayBuffer in the second parameter if it succeeds.\n     * @param  {string} url - The URL of the font file.\n     * @param  {Function} callback - The function to call when the font load completes\n     */\n    function loadFromUrl(url, callback) {\n        var request = new XMLHttpRequest();\n        request.open('get', url, true);\n        request.responseType = 'arraybuffer';\n        request.onload = function () {\n            if (request.status !== 200) {\n                return callback('Font could not be loaded: ' + request.statusText);\n            }\n\n            return callback(null, request.response);\n        };\n\n        request.onerror = function () {\n            callback('Font could not be loaded');\n        };\n\n        request.send();\n    }\n\n    // Table Directory Entries //////////////////////////////////////////////\n    /**\n     * Parses OpenType table entries.\n     * @param  {DataView}\n     * @param  {Number}\n     * @return {Object[]}\n     */\n    function parseOpenTypeTableEntries(data, numTables) {\n        var tableEntries = [];\n        var p = 12;\n        for (var i = 0; i < numTables; i += 1) {\n            var tag = parse.getTag(data, p);\n            var checksum = parse.getULong(data, p + 4);\n            var offset = parse.getULong(data, p + 8);\n            var length = parse.getULong(data, p + 12);\n            tableEntries.push({ tag: tag, checksum: checksum, offset: offset, length: length, compression: false });\n            p += 16;\n        }\n\n        return tableEntries;\n    }\n\n    /**\n     * Parses WOFF table entries.\n     * @param  {DataView}\n     * @param  {Number}\n     * @return {Object[]}\n     */\n    function parseWOFFTableEntries(data, numTables) {\n        var tableEntries = [];\n        var p = 44; // offset to the first table directory entry.\n        for (var i = 0; i < numTables; i += 1) {\n            var tag = parse.getTag(data, p);\n            var offset = parse.getULong(data, p + 4);\n            var compLength = parse.getULong(data, p + 8);\n            var origLength = parse.getULong(data, p + 12);\n            var compression = void 0;\n            if (compLength < origLength) {\n                compression = 'WOFF';\n            } else {\n                compression = false;\n            }\n\n            tableEntries.push({ tag: tag, offset: offset, compression: compression,\n                compressedLength: compLength, length: origLength });\n            p += 20;\n        }\n\n        return tableEntries;\n    }\n\n    /**\n     * @typedef TableData\n     * @type Object\n     * @property {DataView} data - The DataView\n     * @property {number} offset - The data offset.\n     */\n\n    /**\n     * @param  {DataView}\n     * @param  {Object}\n     * @return {TableData}\n     */\n    function uncompressTable(data, tableEntry) {\n        if (tableEntry.compression === 'WOFF') {\n            var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);\n            var outBuffer = new Uint8Array(tableEntry.length);\n            index(inBuffer, outBuffer);\n            if (outBuffer.byteLength !== tableEntry.length) {\n                throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\\'t match recorded length');\n            }\n\n            var view = new DataView(outBuffer.buffer, 0);\n            return { data: view, offset: 0 };\n        } else {\n            return { data: data, offset: tableEntry.offset };\n        }\n    }\n\n    // Public API ///////////////////////////////////////////////////////////\n\n    /**\n     * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n     * Throws an error if the font could not be parsed.\n     * @param  {ArrayBuffer}\n     * @return {opentype.Font}\n     */\n    function parseBuffer(buffer) {\n        var indexToLocFormat;\n        var ltagTable;\n\n        // Since the constructor can also be called to create new fonts from scratch, we indicate this\n        // should be an empty font that we'll fill with our own data.\n        var font = new Font({ empty: true });\n\n        // OpenType fonts use big endian byte ordering.\n        // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n        // Instead we use DataViews where we can specify endianness.\n        var data = new DataView(buffer, 0);\n        var numTables;\n        var tableEntries = [];\n        var signature = parse.getTag(data, 0);\n        if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {\n            font.outlinesFormat = 'truetype';\n            numTables = parse.getUShort(data, 4);\n            tableEntries = parseOpenTypeTableEntries(data, numTables);\n        } else if (signature === 'OTTO') {\n            font.outlinesFormat = 'cff';\n            numTables = parse.getUShort(data, 4);\n            tableEntries = parseOpenTypeTableEntries(data, numTables);\n        } else if (signature === 'wOFF') {\n            var flavor = parse.getTag(data, 4);\n            if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n                font.outlinesFormat = 'truetype';\n            } else if (flavor === 'OTTO') {\n                font.outlinesFormat = 'cff';\n            } else {\n                throw new Error('Unsupported OpenType flavor ' + signature);\n            }\n\n            numTables = parse.getUShort(data, 12);\n            tableEntries = parseWOFFTableEntries(data, numTables);\n        } else {\n            throw new Error('Unsupported OpenType signature ' + signature);\n        }\n\n        var cffTableEntry;\n        var fvarTableEntry;\n        var glyfTableEntry;\n        var gposTableEntry;\n        var gsubTableEntry;\n        var hmtxTableEntry;\n        var kernTableEntry;\n        var locaTableEntry;\n        var nameTableEntry;\n        var metaTableEntry;\n        var p;\n\n        for (var i = 0; i < numTables; i += 1) {\n            var tableEntry = tableEntries[i];\n            var table = void 0;\n            switch (tableEntry.tag) {\n                case 'cmap':\n                    table = uncompressTable(data, tableEntry);\n                    font.tables.cmap = cmap.parse(table.data, table.offset);\n                    font.encoding = new CmapEncoding(font.tables.cmap);\n                    break;\n                case 'cvt ':\n                    table = uncompressTable(data, tableEntry);\n                    p = new parse.Parser(table.data, table.offset);\n                    font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n                    break;\n                case 'fvar':\n                    fvarTableEntry = tableEntry;\n                    break;\n                case 'fpgm':\n                    table = uncompressTable(data, tableEntry);\n                    p = new parse.Parser(table.data, table.offset);\n                    font.tables.fpgm = p.parseByteList(tableEntry.length);\n                    break;\n                case 'head':\n                    table = uncompressTable(data, tableEntry);\n                    font.tables.head = head.parse(table.data, table.offset);\n                    font.unitsPerEm = font.tables.head.unitsPerEm;\n                    indexToLocFormat = font.tables.head.indexToLocFormat;\n                    break;\n                case 'hhea':\n                    table = uncompressTable(data, tableEntry);\n                    font.tables.hhea = hhea.parse(table.data, table.offset);\n                    font.ascender = font.tables.hhea.ascender;\n                    font.descender = font.tables.hhea.descender;\n                    font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n                    break;\n                case 'hmtx':\n                    hmtxTableEntry = tableEntry;\n                    break;\n                case 'ltag':\n                    table = uncompressTable(data, tableEntry);\n                    ltagTable = ltag.parse(table.data, table.offset);\n                    break;\n                case 'maxp':\n                    table = uncompressTable(data, tableEntry);\n                    font.tables.maxp = maxp.parse(table.data, table.offset);\n                    font.numGlyphs = font.tables.maxp.numGlyphs;\n                    break;\n                case 'name':\n                    nameTableEntry = tableEntry;\n                    break;\n                case 'OS/2':\n                    table = uncompressTable(data, tableEntry);\n                    font.tables.os2 = os2.parse(table.data, table.offset);\n                    break;\n                case 'post':\n                    table = uncompressTable(data, tableEntry);\n                    font.tables.post = post.parse(table.data, table.offset);\n                    font.glyphNames = new GlyphNames(font.tables.post);\n                    break;\n                case 'prep':\n                    table = uncompressTable(data, tableEntry);\n                    p = new parse.Parser(table.data, table.offset);\n                    font.tables.prep = p.parseByteList(tableEntry.length);\n                    break;\n                case 'glyf':\n                    glyfTableEntry = tableEntry;\n                    break;\n                case 'loca':\n                    locaTableEntry = tableEntry;\n                    break;\n                case 'CFF ':\n                    cffTableEntry = tableEntry;\n                    break;\n                case 'kern':\n                    kernTableEntry = tableEntry;\n                    break;\n                case 'GPOS':\n                    gposTableEntry = tableEntry;\n                    break;\n                case 'GSUB':\n                    gsubTableEntry = tableEntry;\n                    break;\n                case 'meta':\n                    metaTableEntry = tableEntry;\n                    break;\n            }\n        }\n\n        var nameTable = uncompressTable(data, nameTableEntry);\n        font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);\n        font.names = font.tables.name;\n\n        if (glyfTableEntry && locaTableEntry) {\n            var shortVersion = indexToLocFormat === 0;\n            var locaTable = uncompressTable(data, locaTableEntry);\n            var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);\n            var glyfTable = uncompressTable(data, glyfTableEntry);\n            font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font);\n        } else if (cffTableEntry) {\n            var cffTable = uncompressTable(data, cffTableEntry);\n            cff.parse(cffTable.data, cffTable.offset, font);\n        } else {\n            throw new Error('Font doesn\\'t contain TrueType or CFF outlines.');\n        }\n\n        var hmtxTable = uncompressTable(data, hmtxTableEntry);\n        hmtx.parse(hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);\n        addGlyphNames(font);\n\n        if (kernTableEntry) {\n            var kernTable = uncompressTable(data, kernTableEntry);\n            font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n        } else {\n            font.kerningPairs = {};\n        }\n\n        if (gposTableEntry) {\n            var gposTable = uncompressTable(data, gposTableEntry);\n            gpos.parse(gposTable.data, gposTable.offset, font);\n        }\n\n        if (gsubTableEntry) {\n            var gsubTable = uncompressTable(data, gsubTableEntry);\n            font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n        }\n\n        if (fvarTableEntry) {\n            var fvarTable = uncompressTable(data, fvarTableEntry);\n            font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);\n        }\n\n        if (metaTableEntry) {\n            var metaTable = uncompressTable(data, metaTableEntry);\n            font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n            font.metas = font.tables.meta;\n        }\n\n        return font;\n    }\n\n    /**\n     * Asynchronously load the font from a URL or a filesystem. When done, call the callback\n     * with two arguments `(err, font)`. The `err` will be null on success,\n     * the `font` is a Font object.\n     * We use the node.js callback convention so that\n     * opentype.js can integrate with frameworks like async.js.\n     * @alias opentype.load\n     * @param  {string} url - The URL of the font to load.\n     * @param  {Function} callback - The callback.\n     */\n    function load(url, callback) {\n        var isNode$$1 = typeof window === 'undefined';\n        var loadFn = isNode$$1 ? loadFromFile : loadFromUrl;\n        loadFn(url, function (err, arrayBuffer) {\n            if (err) {\n                return callback(err);\n            }\n            var font;\n            try {\n                font = parseBuffer(arrayBuffer);\n            } catch (e) {\n                return callback(e, null);\n            }\n            return callback(null, font);\n        });\n    }\n\n    /**\n     * Synchronously load the font from a URL or file.\n     * When done, returns the font object or throws an error.\n     * @alias opentype.loadSync\n     * @param  {string} url - The URL of the font to load.\n     * @return {opentype.Font}\n     */\n    function loadSync(url) {\n        var fs = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\");\n        var buffer = fs.readFileSync(url);\n        return parseBuffer(nodeBufferToArrayBuffer(buffer));\n    }\n\n    exports.Font = Font;\n    exports.Glyph = Glyph;\n    exports.Path = Path;\n    exports.BoundingBox = BoundingBox;\n    exports._parse = parse;\n    exports.parse = parseBuffer;\n    exports.load = load;\n    exports.loadSync = loadSync;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=opentype.js.map\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./src/lib/opentype.js?");

/***/ }),

/***/ 0:
/*!********************************!*\
  !*** ./node/self.js (ignored) ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack:///./node/self.js_(ignored)?");

/***/ }),

/***/ 1:
/*!**********************************!*\
  !*** ./node/extend.js (ignored) ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack:///./node/extend.js_(ignored)?");

/***/ })

/******/ });